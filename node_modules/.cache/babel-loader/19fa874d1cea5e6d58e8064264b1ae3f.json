{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/MeetingShowSelected.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport socketIOClient from \"socket.io-client\";\nimport data from \"./data\";\nimport '../css/Chat.css';\nimport VideoExt from './chat/VideoExt';\nimport SocketX from './chat/SocketX';\nimport PeerConnectionExt from './chat/PeerConnectionExt';\nconst ICE_SERVERS = [{\n  urls: 'turn:numb.viagenie.ca',\n  credential: 'muazkh',\n  username: 'webrtc@live.com'\n}, {\n  url: 'turn:192.158.29.39:3478?transport=tcp',\n  credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n  username: '28224511:1379330808'\n}, {\n  url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n  credential: 'webrtc',\n  username: 'webrtc'\n}, {\n  url: 'turn:13.250.13.83:3478?transport=tcp',\n  credential: 'YzYNCouZM1mhqhmseWk6',\n  username: 'YzYNCouZM1mhqhmseWk6'\n}, {\n  urls: 'stun:stun.l.google.com:19302'\n},\n/*{ urls: 'stun:stun1.l.google.com:19302' },\n{ urls: 'stun:stun2.l.google.com:19302' },\n{ urls: 'stun:stun3.l.google.com:19302' },\n{ urls: 'stun:stun4.l.google.com:19302' },*/\n{\n  urls: 'stun:stun.ekiga.net'\n}];\n\nclass MeetingShowSelected extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dualShareHandler = mediaStream => {\n      console.log('in dual share handler');\n      this.setState({\n        localStream: mediaStream\n      }, () => {\n        for (let key in this.peerConnections) this.addLocalStreamToPeerCon(key);\n      });\n\n      if (this.props.loggedInUser === this.organiserId) {\n        this.socket.emit(\"call-organiser\", {});\n      } else if (this.props.loggedInUser !== this.organiserId && this.state.userIds.includes(this.organiserId)) {//this.callUser(this.organiserId).then();\n        //this.setState({callMadeByNonOrganiser: true});\n      }\n    };\n\n    this.errorHandler = error => {\n      console.log(error.message);\n    };\n\n    this.shareScreenChange = async e => {\n      let isChecked = e.target.checked;\n      let {\n        localStream\n      } = this.state;\n      let dualStream;\n\n      if (isChecked) {\n        dualStream = await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      } else {\n        dualStream = await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if (localStream === null) {\n        for (let key in this.peerConnections) dualStream.getTracks().forEach(track => this.peerConnections[key].addTrack(track));\n\n        this.setState({\n          localStream: dualStream,\n          shareScreen: isChecked\n        });\n      } else {\n        let trackArr = [...localStream.getTracks()];\n\n        for (let i = 0; i < trackArr.length; i++) await localStream.removeTrack(trackArr[i]);\n\n        for (let i = 0; i < dualStream.getTracks().length; i++) {\n          await localStream.addTrack(dualStream.getTracks()[i]);\n\n          for (let key in this.peerConnections) {\n            const senders = this.peerConnections[key].getSenders();\n            senders.forEach(sender => {\n              if (dualStream.getTracks()[i].kind === sender.track.kind) sender.replaceTrack(dualStream.getTracks()[i]);\n            });\n          }\n        }\n\n        this.setState({\n          localStream,\n          shareScreen: isChecked\n        });\n      }\n    };\n\n    this.onSocketConnect = () => {\n      if (this.socket) {\n        this.socket.emit(\"map\", {\n          userName: this.props.loggedInUserFullName,\n          userId: this.props.loggedInUser\n        });\n        console.log(this.socket.id + ' mapped to ' + this.props.loggedInUser);\n      }\n    };\n\n    this.addLocalStreamToPeerCon = sourceId => {\n      if (this.state.localStream && this.isLocalStreamAdded[sourceId] !== true) {\n        console.log('local stream tracks length ' + this.state.localStream.getTracks().length);\n        this.state.localStream.getTracks().forEach(track => this.peerConnections[sourceId].addTrack(track));\n        this.isLocalStreamAdded[sourceId] = true;\n      }\n    };\n\n    this.onUpdateUserList = data => {\n      console.log('In update user list');\n      let userIds = [...this.state.userIds];\n      let newUserIds = data.userIds;\n      let remoteStreams = Object.assign({}, this.state.remoteStreams);\n      newUserIds.forEach(id => {\n        if (!userIds.includes(id)) {\n          userIds.push(id);\n          this.peerConnections[id] = new RTCPeerConnection({\n            iceServers: ICE_SERVERS\n          });\n          this.isLocalStreamAdded[id] = false;\n          this.callAttempts[id] = 0;\n          this.isRemotePlaying[id] = false;\n          this.addLocalStreamToPeerCon(id);\n          remoteStreams[id] = new MediaStream();\n\n          if (this.props.loggedInUser !== this.organiserId && this.organiserId === id) {\n            this.peerConnections[this.organiserId] = new RTCPeerConnection({\n              iceServers: ICE_SERVERS\n            });\n            this.isLocalStreamAdded[this.organiserId] = false;\n            this.callAttempts[this.organiserId] = 0;\n            this.isRemotePlaying[this.organiserId] = false;\n            this.addLocalStreamToPeerCon(this.organiserId);\n            remoteStreams[this.organiserId] = new MediaStream();\n            this.setState({\n              remoteStreams,\n              userIds,\n              userNameMap: data.nameMap\n            });\n\n            if (this.isLocalStreamAdded[this.organiserId] === true) {//this.callUser(this.organiserId).then();\n              //this.setState({callMadeByNonOrganiser: true});\n            }\n          }\n        }\n      });\n      console.log(userIds);\n      console.log(data.nameMap);\n      this.setState({\n        remoteStreams,\n        userIds,\n        userNameMap: data.nameMap\n      }, () => {\n        if (this.props.loggedInUser === this.organiserId) {\n          this.socket.emit(\"call-organiser\", {});\n        }\n      });\n    };\n\n    this.handleCallOrganiser = () => {\n      console.log('handle call organiser');\n\n      if (this.state.userIds.includes(this.organiserId)) {\n        this.callAttempts[this.organiserId] = 0;\n        this.isRemotePlaying[this.organiserId] = false; //this.callUser(this.organiserId).then();\n        //this.setState({callMadeByNonOrganiser: true});\n      }\n    };\n\n    this.callUser = async userId => {\n      console.log('Call User ' + userId + ' ' + this.state.userNameMap[userId]); //if(this.isRemotePlaying[userId]===undefined)\n      //  this.isRemotePlaying[userId]=false;\n\n      if (this.callAttempts[userId] === undefined) this.callAttempts[userId] = 1;else this.callAttempts[userId]++;\n      console.log('remoteStreams');\n      console.log(this.state.remoteStreams[userId]);\n      console.log(this.peerConnections[userId]);\n\n      if (this.peerConnections[userId] === undefined) {\n        this.peerConnections[userId] = new RTCPeerConnection({\n          iceServers: ICE_SERVERS\n        });\n        this.isLocalStreamAdded[userId] = false;\n      }\n\n      this.addLocalStreamToPeerCon(userId);\n\n      if (this.state.remoteStreams[userId] === undefined) {\n        let remoteStreams = Object.assign({}, this.state.remoteStreams);\n        remoteStreams[userId] = new MediaStream();\n        this.setState({\n          remoteStreams\n        });\n      } //console.log(this.peerConnection);\n\n\n      console.log('Call Attempts ' + this.callAttempts[userId]);\n      const offer = await this.peerConnections[userId].createOffer();\n      await this.peerConnections[userId].setLocalDescription(new RTCSessionDescription(offer));\n      this.socket.emit(\"call-user\", {\n        offer,\n        to: userId,\n        from: this.props.loggedInUser\n      });\n      this.setState({\n        message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`\n      });\n    };\n\n    this.onCallRcvd = async data => {\n      console.log('callRcvd ');\n      console.log('remoteStreams');\n      console.log(this.state.remoteStreams[data.from]);\n      console.log(this.peerConnections[data.from]);\n\n      if (this.peerConnections[data.from] === undefined) {\n        this.peerConnections[data.from] = new RTCPeerConnection({\n          iceServers: ICE_SERVERS\n        });\n        this.isLocalStreamAdded[data.from] = false;\n      }\n\n      this.addLocalStreamToPeerCon(data.from);\n\n      if (this.state.remoteStreams[data.from] === undefined) {\n        let remoteStreams = Object.assign({}, this.state.remoteStreams);\n        remoteStreams[data.from] = new MediaStream();\n        this.setState({\n          remoteStreams\n        });\n      }\n\n      await this.peerConnections[data.from].setRemoteDescription(new RTCSessionDescription(data.offer));\n      const answer = await this.peerConnections[data.from].createAnswer();\n      console.log('answer \\n' + JSON.stringify(answer));\n      await this.peerConnections[data.from].setLocalDescription(new RTCSessionDescription(answer)); //console.log(this.peerConnections[data.from]);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.from,\n        from: this.props.loggedInUser\n      });\n    };\n\n    this.onAnswerRcvd = async data => {\n      console.log('on Answer Rcvd' + JSON.stringify(data.answer));\n      console.log(this.state.remoteStreams[data.from]);\n      console.log(this.peerConnections[data.from]);\n      this.addLocalStreamToPeerCon(data.from);\n\n      if (this.peerConnections[data.from].signalingState !== \"stable\") {\n        await this.peerConnections[data.from].setRemoteDescription(new RTCSessionDescription(data.answer));\n      }\n\n      this.socket.emit(\"ack-callee\", {\n        to: data.from,\n        from: this.props.loggedInUser\n      });\n    };\n\n    this.onAckCalleeRcvd = data => {\n      console.log('remoteStreams');\n      console.log(this.state.remoteStreams[data.from]);\n      console.log(this.peerConnections[data.from]);\n      console.log('on ack callee received, callAttempts ' + this.callAttempts[data.from] + ' remotePlaying' + this.isRemotePlaying[data.from]); //if(this.state.remoteStreams[data.from].getVideoTracks().length<=0 && this.state.remoteStreams[data.from].getAudioTracks().length<=0 && this.callAttempts[data.from]<3)\n\n      if (!this.isRemotePlaying[data.from] && this.callAttempts[data.from] < 4) {//this.callUser(data.from).then();\n      }\n    };\n\n    this.onRemoveUser = ({\n      userId\n    }) => {\n      console.log('removing user ' + userId);\n      let userIds = this.state.userIds.filter(val => val !== userId);\n      let userNameMap = {};\n\n      for (let attr in this.state.userNameMap) {\n        if (userIds.includes(attr)) userNameMap[attr] = this.state.userNameMap[attr];\n      }\n\n      delete this.peerConnections[userId];\n      let remoteStreams = Object.assign({}, this.state.remoteStreams);\n      delete remoteStreams[userId];\n      this.isLocalStreamAdded[userId] = false;\n      this.callAttempts[userId] = 0;\n      this.isRemotePlaying[userId] = false;\n      if (userId === this.organiserId) this.setState({\n        userNameMap,\n        remoteStreams,\n        userIds\n      }); //, callMadeByNonOrganiser: false\n      else this.setState({\n          userNameMap,\n          remoteStreams,\n          userIds\n        });\n    };\n\n    this.handleIceCandidate = async data => {\n      const candidate = JSON.parse(data);\n      const revCandidate = new RTCIceCandidate({\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        candidate: candidate.candidate\n      });\n\n      for (let key in this.peerConnections) await this.peerConnections[key].addIceCandidate(revCandidate);\n    };\n\n    this.handleOnIceEvent = rtcPeerConnectionIceEvent => {\n      console.log('ICE event handle');\n\n      if (rtcPeerConnectionIceEvent.candidate && this.peerConnections) {\n        const {\n          candidate\n        } = rtcPeerConnectionIceEvent;\n        this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n      }\n    };\n\n    this.onRemoteVideoPlaying = (e, key) => {\n      this.isRemotePlaying[key] = true;\n      console.log('remote video playing event for remote user ' + key);\n      console.log(e);\n    };\n\n    this.state = {\n      localStream: null,\n      remoteStreams: {},\n      shareScreen: false,\n      //peerConnections: {},\n      icons: data.icons,\n      userIds: [],\n      userNameMap: {},\n      message: 'Select a user on the left menu to start sharing.' //callMadeByNonOrganiser: false\n\n    };\n    const {\n      params\n    } = this.props.match;\n    this.meetingId = params.id;\n    this.organiserId = params.organiserId;\n    this.peerConnections = {};\n    this.callAttempts = {};\n    this.isRemotePlaying = {};\n    this.isLocalStreamAdded = {}; //this.socket = socketIOClient(ENDPOINT);\n\n    this.socket = socketIOClient(\"/\" + this.meetingId);\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions = {\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.loggedInUserFullName !== '') {\n      if (this.state.shareScreen) {\n        navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      } else {\n        navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      }\n    }\n  }\n\n  render() {\n    if (this.props.loggedInUserFullName === '') {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/errorLogin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 16\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }\n      }, \"Meeting Show Selected\", /*#__PURE__*/React.createElement(SocketX, {\n        socket: this.socket,\n        onSocketConnect: this.onSocketConnect,\n        onUpdateUserList: this.onUpdateUserList,\n        onRemoveUser: this.onRemoveUser,\n        onCallRcvd: this.onCallRcvd,\n        onAnswerRcvd: this.onAnswerRcvd,\n        onAckCalleeRcvd: this.onAckCalleeRcvd,\n        handleIceCandidate: this.handleIceCandidate,\n        handleCallOrganiser: this.handleCallOrganiser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 14\n        }\n      }), Object.keys(this.state.remoteStreams).map(key => /*#__PURE__*/React.createElement(PeerConnectionExt, {\n        peerConnection: this.peerConnections[key],\n        localStream: this.state.localStream,\n        remoteStream: this.state.remoteStreams[key],\n        handleOnIceEvent: this.handleOnIceEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"active-users-panel\",\n        id: \"active-user-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"panel-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 23\n        }\n      }, \"Callable Users:\"), this.state.userIds.map(val => /*#__PURE__*/React.createElement(\"div\", {\n        id: val,\n        key: val,\n        className: \"active-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 57\n        }\n      }, this.state.userNameMap[val], \"(\", val, \")\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-chat-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"talk-info\",\n        id: \"talking-with-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 27\n        }\n      }, this.state.message), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 27\n        }\n      }, \"Share Screen: \", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"shareScreen\",\n        checked: this.state.shareScreen,\n        onChange: this.shareScreenChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 43\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        muted: \"muted\",\n        mediaStream: this.state.localStream,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 29\n        }\n      }), Object.keys(this.state.remoteStreams).map(key => /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        mediaStream: this.state.remoteStreams[key],\n        onPlaying: e => this.onRemoteVideoPlaying(e, key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 32\n        }\n      }))))));\n    }\n  }\n\n}\n\nexport default MeetingShowSelected;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/MeetingShowSelected.js"],"names":["React","Redirect","socketIOClient","data","VideoExt","SocketX","PeerConnectionExt","ICE_SERVERS","urls","credential","username","url","MeetingShowSelected","Component","constructor","props","dualShareHandler","mediaStream","console","log","setState","localStream","key","peerConnections","addLocalStreamToPeerCon","loggedInUser","organiserId","socket","emit","state","userIds","includes","errorHandler","error","message","shareScreenChange","e","isChecked","target","checked","dualStream","navigator","mediaDevices","getDisplayMedia","displayMediaOptions","getUserMedia","camMediaOptions","getTracks","forEach","track","addTrack","shareScreen","trackArr","i","length","removeTrack","senders","getSenders","sender","kind","replaceTrack","onSocketConnect","userName","loggedInUserFullName","userId","id","sourceId","isLocalStreamAdded","onUpdateUserList","newUserIds","remoteStreams","Object","assign","push","RTCPeerConnection","iceServers","callAttempts","isRemotePlaying","MediaStream","userNameMap","nameMap","handleCallOrganiser","callUser","undefined","offer","createOffer","setLocalDescription","RTCSessionDescription","to","from","onCallRcvd","setRemoteDescription","answer","createAnswer","JSON","stringify","onAnswerRcvd","signalingState","onAckCalleeRcvd","onRemoveUser","filter","val","attr","handleIceCandidate","candidate","parse","revCandidate","RTCIceCandidate","sdpMLineIndex","addIceCandidate","handleOnIceEvent","rtcPeerConnectionIceEvent","onRemoteVideoPlaying","icons","params","match","meetingId","video","cursor","audio","echoCancellation","noiseSuppression","componentDidMount","then","catch","render","keys","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {  Redirect } from 'react-router-dom';\nimport socketIOClient from \"socket.io-client\";\nimport data from \"./data\";\nimport '../css/Chat.css';\nimport VideoExt from './chat/VideoExt';\nimport SocketX from './chat/SocketX';\nimport PeerConnectionExt from './chat/PeerConnectionExt';\n\nconst ICE_SERVERS=[\n  {\n    urls: 'turn:numb.viagenie.ca',\n    credential: 'muazkh',\n    username: 'webrtc@live.com'\n  },\n  {\n      url: 'turn:192.158.29.39:3478?transport=tcp',\n      credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n      username: '28224511:1379330808'\n  },\n  {\n      url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n      credential: 'webrtc',\n      username: 'webrtc'\n  },\n  {\n      url: 'turn:13.250.13.83:3478?transport=tcp',\n      credential: 'YzYNCouZM1mhqhmseWk6',\n      username: 'YzYNCouZM1mhqhmseWk6'\n  },\n  { urls: 'stun:stun.l.google.com:19302' },\n  /*{ urls: 'stun:stun1.l.google.com:19302' },\n  { urls: 'stun:stun2.l.google.com:19302' },\n  { urls: 'stun:stun3.l.google.com:19302' },\n  { urls: 'stun:stun4.l.google.com:19302' },*/\n  { urls: 'stun:stun.ekiga.net'}\n];\n\nclass MeetingShowSelected extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      localStream: null,\n      remoteStreams: {},\n      shareScreen: false,\n      //peerConnections: {},\n      icons: data.icons,\n      userIds:[],\n      userNameMap:{},\n      message: 'Select a user on the left menu to start sharing.',\n      //callMadeByNonOrganiser: false\n    }\n    const {params}= this.props.match;\n\n    this.meetingId=params.id;\n    this.organiserId=params.organiserId;\n\n    this.peerConnections={};\n    this.callAttempts={};\n    this.isRemotePlaying={};\n    this.isLocalStreamAdded={};\n\n    //this.socket = socketIOClient(ENDPOINT);\n    this.socket = socketIOClient(\"/\"+this.meetingId);\n\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions={\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  dualShareHandler=(mediaStream)=>{\n    console.log('in dual share handler');\n    this.setState({localStream: mediaStream}, ()=>{\n       for(let key in this.peerConnections)\n          this.addLocalStreamToPeerCon(key);\n    });\n\n    if(this.props.loggedInUser===this.organiserId){\n      this.socket.emit(\"call-organiser\", {});\n    }\n    else if(this.props.loggedInUser!==this.organiserId && this.state.userIds.includes(this.organiserId)){\n      //this.callUser(this.organiserId).then();\n      //this.setState({callMadeByNonOrganiser: true});\n    }\n  }\n\n\n  errorHandler=error => {\n    console.log(error.message);\n  }\n\n  shareScreenChange=async (e)=>{\n    let isChecked=e.target.checked;\n    let {localStream}=this.state;\n    let dualStream;\n    if(isChecked){\n        dualStream=await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n    }\n    else{\n      dualStream=await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n    }\n    if(localStream===null){\n      for(let key in this.peerConnections)\n          dualStream.getTracks().forEach(track => this.peerConnections[key].addTrack(track));\n\n      this.setState({localStream: dualStream, shareScreen: isChecked})\n    }\n    else{\n      let trackArr=[...localStream.getTracks()];\n      for(let i=0;i<trackArr.length;i++)\n          await localStream.removeTrack(trackArr[i]);\n\n      for(let i=0;i<dualStream.getTracks().length;i++){\n          await localStream.addTrack(dualStream.getTracks()[i]);\n          for(let key in this.peerConnections){\n              const senders = this.peerConnections[key].getSenders();\n              senders.forEach((sender) => {\n                                  if(dualStream.getTracks()[i].kind===sender.track.kind)\n                                      sender.replaceTrack(dualStream.getTracks()[i]);\n                                });\n          }\n\n      }\n      this.setState({localStream, shareScreen: isChecked});\n    }\n  }\n\n  componentDidMount(){\n    if(this.props.loggedInUserFullName!==''){\n        if(this.state.shareScreen){\n            navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        }\n        else{\n          navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        }\n   }\n  }\n\n  onSocketConnect=()=>{\n    if(this.socket){\n      this.socket.emit(\"map\", {\n        userName: this.props.loggedInUserFullName,\n        userId: this.props.loggedInUser\n      });\n      console.log(this.socket.id+' mapped to '+this.props.loggedInUser);\n    }\n  }\n\n  addLocalStreamToPeerCon=(sourceId)=>{\n    if(this.state.localStream && this.isLocalStreamAdded[sourceId]!==true){\n      console.log('local stream tracks length '+this.state.localStream.getTracks().length);\n      this.state.localStream.getTracks().forEach(track => this.peerConnections[sourceId].addTrack(track));\n      this.isLocalStreamAdded[sourceId]=true;\n    }\n  }\n\n  onUpdateUserList=(data) => {\n    console.log('In update user list');\n    let userIds=[...this.state.userIds];\n    let newUserIds=data.userIds;\n    let remoteStreams=Object.assign({}, this.state.remoteStreams);\n    newUserIds.forEach(id=>{\n      if(!userIds.includes(id)){\n        userIds.push(id);\n        this.peerConnections[id] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n        this.isLocalStreamAdded[id] = false;\n        this.callAttempts[id]=0;\n        this.isRemotePlaying[id]=false;\n        this.addLocalStreamToPeerCon(id);\n        remoteStreams[id] = new MediaStream();\n        if(this.props.loggedInUser!==this.organiserId && this.organiserId===id){\n           this.peerConnections[this.organiserId] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n           this.isLocalStreamAdded[this.organiserId] = false;\n           this.callAttempts[this.organiserId]=0;\n           this.isRemotePlaying[this.organiserId]=false;\n           this.addLocalStreamToPeerCon(this.organiserId);\n           remoteStreams[this.organiserId] = new MediaStream();\n           this.setState({remoteStreams, userIds, userNameMap: data.nameMap});\n           if(this.isLocalStreamAdded[this.organiserId]===true){\n               //this.callUser(this.organiserId).then();\n               //this.setState({callMadeByNonOrganiser: true});\n           }\n       }\n      }\n    });\n    console.log(userIds);\n    console.log(data.nameMap);\n    this.setState({remoteStreams, userIds, userNameMap: data.nameMap}, ()=>{\n      if(this.props.loggedInUser===this.organiserId){\n              this.socket.emit(\"call-organiser\", {});\n      }\n    });\n  };\n\n  handleCallOrganiser=()=>{\n    console.log('handle call organiser');\n    if(this.state.userIds.includes(this.organiserId)){\n        this.callAttempts[this.organiserId]=0;\n        this.isRemotePlaying[this.organiserId]=false;\n        //this.callUser(this.organiserId).then();\n        //this.setState({callMadeByNonOrganiser: true});\n    }\n  }\n\n\n  callUser=async (userId)=>{\n    console.log('Call User '+userId+' '+this.state.userNameMap[userId]);\n    //if(this.isRemotePlaying[userId]===undefined)\n    //  this.isRemotePlaying[userId]=false;\n\n    if(this.callAttempts[userId]===undefined)\n      this.callAttempts[userId]=1;\n    else\n      this.callAttempts[userId]++;\n\n    console.log('remoteStreams');\n    console.log(this.state.remoteStreams[userId]);\n    console.log(this.peerConnections[userId]);\n\n    if(this.peerConnections[userId]===undefined){\n        this.peerConnections[userId] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n        this.isLocalStreamAdded[userId]=false;\n    }\n    this.addLocalStreamToPeerCon(userId);\n\n    if(this.state.remoteStreams[userId]===undefined){\n      let remoteStreams=Object.assign({}, this.state.remoteStreams);\n      remoteStreams[userId] = new MediaStream();\n      this.setState({remoteStreams});\n    }\n\n    //console.log(this.peerConnection);\n\n    console.log('Call Attempts '+this.callAttempts[userId]);\n    const offer = await this.peerConnections[userId].createOffer();\n    await this.peerConnections[userId].setLocalDescription(new RTCSessionDescription(offer));\n    this.socket.emit(\"call-user\", {\n      offer,\n      to: userId,\n      from: this.props.loggedInUser\n    });\n    this.setState({message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`});\n\n  }\n\n  onCallRcvd=async (data) => {\n    console.log('callRcvd ');\n    console.log('remoteStreams');\n    console.log(this.state.remoteStreams[data.from]);\n    console.log(this.peerConnections[data.from]);\n\n    if(this.peerConnections[data.from]===undefined){\n        this.peerConnections[data.from] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n        this.isLocalStreamAdded[data.from] = false;\n    }\n    this.addLocalStreamToPeerCon(data.from);\n\n    if(this.state.remoteStreams[data.from]===undefined){\n      let remoteStreams=Object.assign({}, this.state.remoteStreams);\n      remoteStreams[data.from]= new MediaStream();\n      this.setState({remoteStreams});\n    }\n\n    await this.peerConnections[data.from].setRemoteDescription(\n      new RTCSessionDescription(data.offer)\n    );\n    const answer = await this.peerConnections[data.from].createAnswer();\n    console.log('answer \\n'+JSON.stringify(answer));\n    await this.peerConnections[data.from].setLocalDescription(new RTCSessionDescription(answer));\n    //console.log(this.peerConnections[data.from]);\n    this.socket.emit(\"make-answer\", {\n      answer,\n      to: data.from,\n      from: this.props.loggedInUser\n    });\n  }\n\n  onAnswerRcvd=async (data) => {\n     console.log('on Answer Rcvd'+JSON.stringify(data.answer));\n     console.log(this.state.remoteStreams[data.from])\n     console.log(this.peerConnections[data.from])\n     this.addLocalStreamToPeerCon(data.from);\n     if(this.peerConnections[data.from].signalingState!== \"stable\"){\n       await this.peerConnections[data.from].setRemoteDescription(\n          new RTCSessionDescription(data.answer)\n       );\n     }\n     this.socket.emit(\"ack-callee\", {\n        to: data.from,\n        from: this.props.loggedInUser\n     });\n  }\n\n  onAckCalleeRcvd=(data)=>{\n    console.log('remoteStreams');\n    console.log(this.state.remoteStreams[data.from]);\n    console.log(this.peerConnections[data.from]);\n    console.log('on ack callee received, callAttempts '+this.callAttempts[data.from]+' remotePlaying'+this.isRemotePlaying[data.from]);\n    //if(this.state.remoteStreams[data.from].getVideoTracks().length<=0 && this.state.remoteStreams[data.from].getAudioTracks().length<=0 && this.callAttempts[data.from]<3)\n    if(!this.isRemotePlaying[data.from] && this.callAttempts[data.from]<4){\n      //this.callUser(data.from).then();\n    }\n  }\n\n\n  onRemoveUser=({ userId }) => {\n    console.log('removing user '+userId);\n    let userIds=this.state.userIds.filter((val)=>val!==userId);\n    let userNameMap={};\n    for(let attr in this.state.userNameMap){\n      if(userIds.includes(attr))\n        userNameMap[attr]=this.state.userNameMap[attr];\n    }\n    delete this.peerConnections[userId];\n    let remoteStreams=Object.assign({}, this.state.remoteStreams);\n    delete remoteStreams[userId];\n    this.isLocalStreamAdded[userId] = false;\n    this.callAttempts[userId]=0;\n    this.isRemotePlaying[userId]=false;\n\n    if(userId===this.organiserId)\n      this.setState({userNameMap, remoteStreams, userIds}); //, callMadeByNonOrganiser: false\n    else\n      this.setState({userNameMap, remoteStreams, userIds});\n  }\n\n  handleIceCandidate = async (data) => {\n    const candidate = JSON.parse(data);\n    const revCandidate=new RTCIceCandidate({\n      sdpMLineIndex: candidate.sdpMLineIndex,\n      candidate: candidate.candidate\n    });\n    for(let key in this.peerConnections)\n      await this.peerConnections[key].addIceCandidate(revCandidate);\n  }\n\n  handleOnIceEvent = (rtcPeerConnectionIceEvent) => {\n    console.log('ICE event handle');\n    if (rtcPeerConnectionIceEvent.candidate && this.peerConnections) {\n        const { candidate } = rtcPeerConnectionIceEvent;\n        this.socket.emit(\"ice-candidate\",  JSON.stringify(candidate));\n    }\n  }\n\n  onRemoteVideoPlaying=(e, key)=>{\n    this.isRemotePlaying[key]=true;\n    console.log('remote video playing event for remote user '+key);\n    console.log(e);\n  }\n\n\n  render(){\n      if(this.props.loggedInUserFullName===''){\n        return <Redirect to=\"/errorLogin\"/>\n      }\n      else\n      {\n          return (\n            <div>\n            Meeting Show Selected\n             <SocketX\n              socket={this.socket}\n              onSocketConnect={this.onSocketConnect}\n              onUpdateUserList={this.onUpdateUserList}\n              onRemoveUser={this.onRemoveUser}\n              onCallRcvd={this.onCallRcvd}\n              onAnswerRcvd={this.onAnswerRcvd}\n              onAckCalleeRcvd={this.onAckCalleeRcvd}\n              handleIceCandidate={this.handleIceCandidate}\n              handleCallOrganiser={this.handleCallOrganiser}\n              />\n              {Object.keys(this.state.remoteStreams).map((key)=>(\n                <PeerConnectionExt\n                 peerConnection={this.peerConnections[key]}\n                 localStream={this.state.localStream}\n                 remoteStream={this.state.remoteStreams[key]}\n                 handleOnIceEvent={this.handleOnIceEvent}\n                />\n              ))\n              }\n              <div className=\"content-container\">\n                    <div className=\"active-users-panel\"  id=\"active-user-container\">\n                      <h3 className=\"panel-title\">Callable Users:</h3>\n                      {this.state.userIds.map(val=>(<div id={val} key={val}    className=\"active-user\">\n                                                        <p className=\"username\">\n                                                          {this.state.userNameMap[val]}({val})\n                                                        </p>\n                                                       </div>\n                                                       )\n                                            )}\n                    </div>\n                    <div className=\"video-chat-container\">\n                          {/*<h2>Logged In User: {this.props.loggedInUserFullName}</h2>*/}\n                          <h2 className=\"talk-info\" id=\"talking-with-info\">\n                            {this.state.message}\n                          </h2>\n                          <div className=\"video-container\">\n                            Share Screen: <input type=\"checkbox\" id=\"shareScreen\" checked={this.state.shareScreen}\n                                            onChange={this.shareScreenChange}/>\n                            <br/>\n                            <VideoExt\n                             controls={true}\n                             muted=\"muted\"\n                             mediaStream={this.state.localStream} />\n                             {Object.keys(this.state.remoteStreams).map(key=>(\n                               <VideoExt\n                               controls\n                               mediaStream={this.state.remoteStreams[key]}\n                               onPlaying={(e)=>this.onRemoteVideoPlaying(e, key)}\n                               />\n                             ))}\n\n                          </div>\n                    </div>\n              </div>\n            </div>\n          )\n      }\n  }\n}\n\nexport default MeetingShowSelected;\n"]},"metadata":{},"sourceType":"module"}