{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/QuizShowSelected.js\";\nimport React from 'react';\nimport QuizEditDialog from './QuizEditDialog';\nimport { Redirect } from 'react-router-dom';\nimport data from './data';\nimport { showSpinner, hideSpinner, loadQuizes, setQuizes, setStartedQuiz, setStartedQuizAnswers, submitStartedQuiz } from '../stores/appStoreActions';\nimport { getMinutesRemaining, getCurrentTimestampString } from '../utils/utils';\n\nclass QuizShowSelected extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.optionChange = (problemId, optionSelectedValue) => {\n      let globalState = this.props.state;\n      let dispatch = this.props.dispatch;\n      const copied = Object.assign({}, globalState.startedQuizAnswers);\n      copied[problemId] = optionSelectedValue; //this.setState({startedQuizAnswers:copied});\n      //console.log(copied);\n      //localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n\n      setStartedQuizAnswers(copied, dispatch);\n    };\n\n    this.solutionChange = (problemId, e) => {\n      let globalState = this.props.state;\n      let dispatch = this.props.dispatch;\n      const copied = Object.assign({}, globalState.startedQuizAnswers);\n      copied[problemId] = e.target.value; //this.setState({startedQuizAnswers:copied});\n      //localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n\n      setStartedQuizAnswers(copied, dispatch);\n    };\n\n    this.startQuiz = () => {\n      let globalState = this.props.state;\n      let dispatch = this.props.dispatch;\n      let quizObj = this.state.quizObj;\n\n      if (globalState.startedQuiz === null) {\n        if (window.confirm('Are you sure you want to start the quiz:\\r\\n' + quizObj.description) === true) {\n          quizObj['start_time'] = getCurrentTimestampString();\n          var reqBody = \"quizId=\" + encodeURIComponent(quizObj.id);\n          reqBody += '&startTime=' + encodeURIComponent(quizObj.start_time);\n          reqBody += '&userId=' + encodeURIComponent(this.state.loggedInUser);\n          fetch(`/api/quizStart`, {\n            headers: {\n              'Accept': 'application/json',\n              'Content-type': 'application/x-www-form-urlencoded'\n            },\n            method: 'POST',\n            body: reqBody\n          }).then(res => res.json()).then(data => {\n            console.log(data);\n\n            if (data.insertstatus === \"ok\") {\n              quizObj['quizInstanceId'] = data.quizInstanceId; //this.setState({startedQuiz:quizObj});\n              //localStorage.setItem('startedQuiz', JSON.stringify(quizObj));\n\n              setStartedQuiz(quizObj, dispatch);\n            } else {\n              alert('An error occurred in connecting to the server to start the quiz');\n            }\n          });\n        }\n      } else {\n        alert('There is already a started quiz:\\r\\n' + globalState.startedQuiz.description + '\\r\\n Please submit this quiz to start a new quiz');\n      }\n\n      console.log(globalState.startedQuiz);\n    };\n\n    this.submitQuiz = () => {\n      //console.log(this.state.startedQuizAnswers);\n      //console.log(this.state.startedQuiz);\n      let globalState = this.props.state;\n      let dispatch = this.props.dispatch;\n      var reqBody = \"quizId=\" + encodeURIComponent(globalState.startedQuiz.id);\n      reqBody += \"&quizType=\" + encodeURIComponent(globalState.startedQuiz.type);\n      reqBody += '&quizInstanceId=' + encodeURIComponent(globalState.startedQuiz.quizInstanceId);\n      reqBody += '&answersObject=' + encodeURIComponent(JSON.stringify(globalState.startedQuizAnswers));\n      fetch(`/api/quizAnwersSubmit`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      }).then(res => res.json()).then(data => {\n        //console.log(data);\n        if (data.insertstatus === \"ok\") {\n          //localStorage.removeItem('startedQuiz');\n          //localStorage.removeItem('startedQuizAnswers');\n          //this.setState({startedQuiz:null, startedQuizAnswers:null});\n          submitStartedQuiz(dispatch);\n          alert('Quiz Submitted');\n        }\n      });\n    };\n\n    this.state = {\n      quizObj: {},\n      problemsArray: [],\n      problemsArrayForEdit: [],\n      showEditQuizDialog: false,\n      quizObjForEdit: {},\n      icons: data.icons\n    };\n    this.editQuizHandler = this.editQuizHandler.bind(this);\n    this.handleEditQuizDialogDismiss = this.handleEditQuizDialogDismiss.bind(this);\n    this.saveUpdateHandler = this.saveUpdateHandler.bind(this);\n    this.descriptionChange = this.descriptionChange.bind(this);\n    this.courseNameChange = this.courseNameChange.bind(this);\n    this.durationChange = this.durationChange.bind(this);\n    this.quizTypeSelectChange = this.quizTypeSelectChange.bind(this);\n    this.removeCourseFromCoursesArray = this.removeCourseFromCoursesArray.bind(this);\n    this.addCourseToCoursesArraySubmit = this.addCourseToCoursesArraySubmit.bind(this);\n    this.removeProblemFromProblemsArray = this.removeProblemFromProblemsArray.bind(this);\n    this.addProblemToProblemsArray = this.addProblemToProblemsArray.bind(this);\n  }\n\n  handleEditQuizDialogDismiss(e) {\n    this.setState({\n      showEditQuizDialog: false,\n      quizObjForEdit: this.state.quizObj,\n      problemsArrayForEdit: this.state.problemsArray\n    });\n  }\n\n  saveUpdateHandler(e) {\n    let dispatch = this.props.dispatch;\n    let globalState = this.props.state;\n    let conflictArray = this.state.problemsArrayForEdit.filter(val => val.type !== this.state.quizObjForEdit.type);\n\n    if (conflictArray.length > 0) {\n      alert('Error! A problem exists for the quiz whose type is different from the selected type');\n      return;\n    } else {\n      showSpinner(dispatch); //console.log(newCourseObj);\n\n      var reqBody = \"id=\" + encodeURIComponent(this.state.quizObjForEdit.id);\n      reqBody += '&coursesArray=' + encodeURIComponent(JSON.stringify(this.state.quizObjForEdit.coursesArray));\n      reqBody += '&problemsArray=' + encodeURIComponent(JSON.stringify(this.state.problemsArrayForEdit));\n      reqBody += '&description=' + encodeURIComponent(this.state.quizObjForEdit.description);\n      reqBody += '&type=' + encodeURIComponent(this.state.quizObjForEdit.type);\n      reqBody += '&duration_minutes=' + encodeURIComponent(this.state.quizObjForEdit.duration_minutes);\n      fetch(`/api/updateQuiz`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      }).then(res => res.json()).then(data => {\n        //console.log(data);\n        if (data.updatestatus === \"ok\") {\n          loadQuizes(dispatch);\n          let quizesArrayCopy = JSON.parse(JSON.stringify(globalState.quizesArray));\n          quizesArrayCopy.forEach(obj => {\n            if (obj.id === this.state.quizObjForEdit.id) {\n              obj.description = this.state.quizObjForEdit.description;\n              obj.duration_minutes = this.state.quizObjForEdit.duration_minutes;\n            }\n          });\n          setQuizes(quizesArrayCopy, dispatch);\n          this.setState({\n            quizObj: this.state.quizObjForEdit,\n            problemsArray: this.state.problemsArrayForEdit,\n            showEditQuizDialog: false\n          });\n          hideSpinner(dispatch);\n          alert('Quiz updated');\n        } else {\n          alert('Quiz updation failed!');\n        }\n      });\n    } //end of else\n\n  }\n\n  quizTypeSelectChange(e) {\n    const copied = Object.assign({}, this.state.quizObjForEdit);\n    var new_quizType = e.target.value;\n    var new_quizTypeDescription = e.target.options[e.target.selectedIndex].text;\n    copied.type = new_quizType; //console.log(new_quizType);\n\n    this.setState({\n      quizObjForEdit: copied\n    });\n  }\n\n  descriptionChange(e) {\n    const copied = Object.assign({}, this.state.quizObjForEdit);\n    copied.description = e.target.value;\n    this.setState({\n      quizObjForEdit: copied\n    });\n  }\n\n  courseNameChange(e) {\n    const copied = Object.assign({}, this.state.quizObjForEdit);\n    copied.courseName = e.target.value;\n    this.setState({\n      quizObjForEdit: copied\n    });\n  }\n\n  durationChange(e) {\n    const copied = Object.assign({}, this.state.quizObjForEdit);\n    copied.duration_minutes = e.target.value;\n    this.setState({\n      quizObjForEdit: copied\n    });\n  }\n  /*  async componentDidMount(){\n      this.props.showSpinner();\n      const {params}= this.props.match;\n  \n      var reqBody=\"quizId=\"+encodeURIComponent(params.id);\n      let res1=await fetch(`/api/getTheQuiz`, {\n        headers:{\n          'Accept':'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      });\n      let data=await res1.json()\n      data.id=params.id;\n        //console.log(data);\n      let res2=await fetch(`/api/getProblemListForQuiz`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        });\n      let data1=await res2.json()\n  \n      let res3=await fetch(`http://localhost:5000/api/quizGetScores`, {\n                     headers:{\n                       'Accept':'application/json',\n                       'Content-type': 'application/x-www-form-urlencoded'\n                     },\n                     method: 'POST',\n                     body: reqBody\n                   });\n  \n     const data2=await res3.json();\n     console.log(data2);\n     this.setState({quizObj: data, quizObjForEdit: data, problemsArray: data1, quizResultsArray:data2});\n    }*/\n\n\n  componentDidMount() {\n    let dispatch = this.props.dispatch;\n    showSpinner(dispatch);\n    const {\n      params\n    } = this.props.match;\n    var reqBody = \"quizId=\" + encodeURIComponent(params.id);\n    let promise1 = fetch(`/api/getTheQuiz`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    });\n    let promise2 = fetch(`/api/getProblemListForQuiz`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    });\n    Promise.all([promise1, promise2]).then(responses => {\n      Promise.all(responses.map(res => res.json())).then(jsons => {\n        jsons[0].id = params.id; //console.log(jsons[0]);\n\n        this.setState({\n          quizObj: jsons[0],\n          quizObjForEdit: jsons[0],\n          problemsArray: jsons[1],\n          problemsArrayForEdit: jsons[1]\n        });\n      });\n    });\n    hideSpinner(dispatch);\n  }\n\n  editQuizHandler() {\n    this.setState({\n      showEditQuizDialog: true\n    });\n  }\n\n  removeProblemFromProblemsArray(e, problemId) {\n    let problemsArray = this.state.problemsArrayForEdit.filter(val => val.id !== problemId);\n    this.setState({\n      problemsArrayForEdit: problemsArray\n    }); //console.log(quizesArray);\n  }\n\n  addProblemToProblemsArray(e, probObj) {\n    let problemsArray = [...this.state.problemsArrayForEdit];\n\n    if (problemsArray.filter(val => val.id === probObj.id).length > 0) {\n      alert('Problem redundant');\n    } else if (probObj.type !== this.state.quizObjForEdit.type) {\n      alert('Problem and Quiz should be of the same type');\n    } else {\n      problemsArray.push(probObj);\n      this.setState({\n        problemsArrayForEdit: problemsArray\n      });\n    }\n  }\n\n  removeCourseFromCoursesArray(e, courseId) {\n    const copied = Object.assign({}, this.state.quizObjForEdit);\n    let coursesArray = copied.coursesArray.filter(val => val.id !== courseId);\n    copied.coursesArray = coursesArray;\n    this.setState({\n      quizObjForEdit: copied\n    }); //console.log(quizesArray);\n  }\n\n  addCourseToCoursesArraySubmit(courseObject) {\n    const copied = Object.assign({}, this.state.quizObjForEdit);\n    let coursesArray = [...copied.coursesArray];\n\n    if (coursesArray.filter(val => val.id === courseObject.id).length > 0) {\n      alert('Course redundant');\n    } else {\n      coursesArray.push(courseObject);\n      copied.coursesArray = coursesArray;\n      this.setState({\n        quizObjForEdit: copied\n      });\n    } //console.log(quizObject);\n\n  }\n\n  deleteQuizHandler(id) {\n    let dispatch = this.props.dispatch;\n    let globalState = this.props.state;\n    let b = window.confirm('Are you sure you want to delete');\n\n    if (b === true) {\n      showSpinner(dispatch);\n      var reqBody = \"id=\" + encodeURIComponent(id);\n      fetch(`/api/deleteQuiz`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      }).then(res => res.json()).then(data => {\n        if (data.deletestatus === \"ok\") {\n          let quizesArrayCopy = globalState.quizesArray.filter(obj => obj.id !== id);\n          setQuizes(quizesArrayCopy, dispatch);\n          hideSpinner(dispatch);\n          alert('Quiz deleted');\n          window.location.assign(\"https://\" + window.location.hostname + ':' + window.location.port + \"/quizesBrowse\");\n        }\n      });\n    } //end of if\n\n  }\n  /* Toggle between showing and hiding the navigation menu links when the user clicks on the hamburger menu / bar icon */\n\n\n  toggleNavDisplay() {\n    var x = document.getElementById(\"TopNav\");\n\n    if (x.className === \"TopNav\") {\n      x.className += \" responsive\";\n    } else {\n      x.className = \"TopNav\";\n    }\n  }\n\n  showQuizResultsHandler() {\n    window.location.assign(\"https://\" + window.location.hostname + ':' + window.location.port + \"/quizInstances/\" + this.state.quizObjForEdit.id); //this.setState({showQuizResultsDialog:true});\n  }\n\n  render() {\n    {\n      /*if(this.props.loggedInUser===''){\n       return <Redirect to=\"/errorLogin\"/>\n       }*/\n    }\n    let globalState = this.props.state;\n    let dispatch = this.props.dispatch;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"HomeLink\",\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      class: \"homeIcon\",\n      src: this.state.icons.home,\n      alt: \"back to home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 7\n      }\n    }, \"Quiz Details\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }\n    }, this.state.quizObj.description), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 12\n      }\n    }, \"Course:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 26\n      }\n    }), this.state.quizObj.coursesArray !== undefined ? this.state.quizObj.coursesArray.map(courseObj => /*#__PURE__*/React.createElement(\"a\", {\n      href: `https://${window.location.hostname}:${window.location.port}/courseShowSelected/${courseObj.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 32\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: `courseName$,${courseObj.id}`,\n      className: \"Course\",\n      style: {\n        marginLeft: '2em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 34\n      }\n    }, courseObj.name))) : null, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 12\n      }\n    }, \"Duration (minutes):\"), \" \", this.state.quizObj.duration_minutes, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TopNavParent\",\n      style: {\n        width: '100%',\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"TopNav\",\n      className: \"TopNav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"javascript:void(0);\",\n      class: \"HamIcon\",\n      onClick: () => this.toggleNavDisplay(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-bars\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      className: \"LeftButton\",\n      onClick: () => this.startQuiz(),\n      id: `s${this.state.quizObj.id}`,\n      value: \"Start Quiz\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 16\n      }\n    }), this.props.loggedInUser === this.state.quizObj.instructorId || this.props.admin === \"1\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      className: \"LeftButton\",\n      onClick: () => this.editQuizHandler(),\n      id: `e${this.state.quizObj.id}`,\n      value: \"Edit Quiz\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      className: \"LeftButton\",\n      onClick: () => this.deleteQuizHandler(this.state.quizObj.id),\n      id: `d${this.state.quizObj.id}`,\n      value: \"Delete Quiz\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      className: \"LeftButton\",\n      onClick: () => this.showQuizResultsHandler(),\n      id: `r${this.state.quizObj.id}`,\n      value: \"Quiz Results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 20\n      }\n    })) : null)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 12\n      }\n    }, \" Quiz Type:\"), \" \", this.state.quizObj.type === \"d\" ? \"Descriptive\" : \"Multiple Choice\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }\n    }, \" Instructor:\"), \" \", this.state.quizObj.instructorId, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 16\n      }\n    }), globalState.isQuizStarted(this.state.quizObj.id) ? /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 13\n      }\n    }, this.state.problemsArray.map(obj => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"probParent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 19\n      }\n    }, \"Question: \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Question\",\n      dangerouslySetInnerHTML: {\n        __html: obj.description\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 19\n      }\n    }), obj.type === \"d\" ? /*#__PURE__*/React.createElement(React.Fragment, null, \"Answer Description:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"ansDescription\",\n      name: \"ansDescription\",\n      type: \"text\",\n      rows: \"10\",\n      value: globalState.startedQuizAnswers[obj.id],\n      onChange: e => this.solutionChange(obj.id, e),\n      style: {\n        width: '90%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 39\n      }\n    })) : null, obj.type === \"m\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 39\n      }\n    }, \"Options\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: `${obj.id}$option1`,\n      onChange: e => this.optionChange(obj.id, e.target.value),\n      checked: globalState.startedQuizAnswers != null && globalState.startedQuizAnswers[obj.id] === \"1\",\n      name: `${obj.id}$`,\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: obj.option1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 95\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: `${obj.id}$option2`,\n      onChange: e => this.optionChange(obj.id, e.target.value),\n      checked: globalState.startedQuizAnswers != null && globalState.startedQuizAnswers[obj.id] === \"2\",\n      name: `${obj.id}$`,\n      value: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: obj.option2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 95\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: `${obj.id}$option3`,\n      onChange: e => this.optionChange(obj.id, e.target.value),\n      checked: globalState.startedQuizAnswers != null && globalState.startedQuizAnswers[obj.id] === \"3\",\n      name: `${obj.id}$`,\n      value: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: obj.option3\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 95\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: `${obj.id}$option4`,\n      onChange: e => this.optionChange(obj.id, e.target.value),\n      checked: globalState.startedQuizAnswers != null && globalState.startedQuizAnswers[obj.id] === \"4\",\n      name: `${obj.id}$`,\n      value: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: obj.option4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 95\n      }\n    })) : null)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      className: \"LeftButton\",\n      onClick: e => {\n        if (window.confirm('Are you sure you want to submit the quiz:' + this.state.quizObj.description) === true) this.submitQuiz();\n      },\n      value: \"Submit Quiz\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 12\n      }\n    })) : null, /*#__PURE__*/React.createElement(QuizEditDialog, {\n      objectForEdit: this.state.quizObjForEdit,\n      show: this.state.showEditQuizDialog,\n      handleDismiss: this.handleEditQuizDialogDismiss,\n      handleSubmit: this.saveUpdateHandler,\n      descriptionChange: this.descriptionChange,\n      courseNameChange: this.courseNameChange,\n      problemsArrayForEdit: this.state.problemsArrayForEdit,\n      durationChange: this.durationChange,\n      quizTypeSelectChange: this.quizTypeSelectChange,\n      removeCourseFromCoursesArray: this.removeCourseFromCoursesArray,\n      addCourseToCoursesArraySubmit: this.addCourseToCoursesArraySubmit,\n      removeProblemFromProblemsArray: this.removeProblemFromProblemsArray,\n      addProblemToProblemsArray: this.addProblemToProblemsArray,\n      state: this.props.state,\n      dispatch: this.props.dispatch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default QuizShowSelected;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/QuizShowSelected.js"],"names":["React","QuizEditDialog","Redirect","data","showSpinner","hideSpinner","loadQuizes","setQuizes","setStartedQuiz","setStartedQuizAnswers","submitStartedQuiz","getMinutesRemaining","getCurrentTimestampString","QuizShowSelected","Component","constructor","props","optionChange","problemId","optionSelectedValue","globalState","state","dispatch","copied","Object","assign","startedQuizAnswers","solutionChange","e","target","value","startQuiz","quizObj","startedQuiz","window","confirm","description","reqBody","encodeURIComponent","id","start_time","loggedInUser","fetch","headers","method","body","then","res","json","console","log","insertstatus","quizInstanceId","alert","submitQuiz","type","JSON","stringify","problemsArray","problemsArrayForEdit","showEditQuizDialog","quizObjForEdit","icons","editQuizHandler","bind","handleEditQuizDialogDismiss","saveUpdateHandler","descriptionChange","courseNameChange","durationChange","quizTypeSelectChange","removeCourseFromCoursesArray","addCourseToCoursesArraySubmit","removeProblemFromProblemsArray","addProblemToProblemsArray","setState","conflictArray","filter","val","length","coursesArray","duration_minutes","updatestatus","quizesArrayCopy","parse","quizesArray","forEach","obj","new_quizType","new_quizTypeDescription","options","selectedIndex","text","courseName","componentDidMount","params","match","promise1","promise2","Promise","all","responses","map","jsons","probObj","push","courseId","courseObject","deleteQuizHandler","b","deletestatus","location","hostname","port","toggleNavDisplay","x","document","getElementById","className","showQuizResultsHandler","render","home","undefined","courseObj","marginLeft","name","width","textAlign","instructorId","admin","isQuizStarted","__html","option1","option2","option3","option4"],"mappings":"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","sourcesContent":["import React from 'react';\nimport QuizEditDialog from './QuizEditDialog';\nimport {  Redirect } from 'react-router-dom';\nimport data from './data';\nimport {showSpinner, hideSpinner, loadQuizes, setQuizes, setStartedQuiz,\n  setStartedQuizAnswers, submitStartedQuiz} from '../stores/appStoreActions';\nimport {getMinutesRemaining, getCurrentTimestampString} from '../utils/utils';\n\nclass QuizShowSelected extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      quizObj:{},\n      problemsArray:[],\n      problemsArrayForEdit:[],\n      showEditQuizDialog:false,\n      quizObjForEdit:{},\n      icons: data.icons\n    }\n    this.editQuizHandler=this.editQuizHandler.bind(this);\n    this.handleEditQuizDialogDismiss=this.handleEditQuizDialogDismiss.bind(this);\n    this.saveUpdateHandler=this.saveUpdateHandler.bind(this);\n    this.descriptionChange=this.descriptionChange.bind(this);\n    this.courseNameChange=this.courseNameChange.bind(this);\n    this.durationChange=this.durationChange.bind(this);\n    this.quizTypeSelectChange=this.quizTypeSelectChange.bind(this);\n    this.removeCourseFromCoursesArray=this.removeCourseFromCoursesArray.bind(this);\n    this.addCourseToCoursesArraySubmit=this.addCourseToCoursesArraySubmit.bind(this);\n    this.removeProblemFromProblemsArray=this.removeProblemFromProblemsArray.bind(this);\n    this.addProblemToProblemsArray=this.addProblemToProblemsArray.bind(this);\n  }\n\n\n\n  handleEditQuizDialogDismiss(e){\n     this.setState({showEditQuizDialog:false, quizObjForEdit: this.state.quizObj,\n                    problemsArrayForEdit: this.state.problemsArray});\n  }\n\n\n  saveUpdateHandler(e){\n    let dispatch=this.props.dispatch;\n    let globalState=this.props.state;\n\n    let conflictArray=this.state.problemsArrayForEdit.filter((val)=>val.type!==this.state.quizObjForEdit.type);\n    if(conflictArray.length>0){\n      alert('Error! A problem exists for the quiz whose type is different from the selected type');\n      return;\n    }\n    else{\n        showSpinner(dispatch);\n        //console.log(newCourseObj);\n        var reqBody=\"id=\"+encodeURIComponent(this.state.quizObjForEdit.id);\n        reqBody+='&coursesArray='+encodeURIComponent(JSON.stringify(this.state.quizObjForEdit.coursesArray));\n        reqBody+='&problemsArray='+encodeURIComponent(JSON.stringify(this.state.problemsArrayForEdit));\n        reqBody+='&description='+encodeURIComponent(this.state.quizObjForEdit.description);\n        reqBody+='&type='+encodeURIComponent(this.state.quizObjForEdit.type);\n        reqBody+='&duration_minutes='+encodeURIComponent(this.state.quizObjForEdit.duration_minutes);\n\n        fetch(`/api/updateQuiz`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        })\n        .then(res=>res.json())\n        .then(data=>{\n                    //console.log(data);\n            if(data.updatestatus===\"ok\"){\n                loadQuizes(dispatch);\n                let quizesArrayCopy=JSON.parse(JSON.stringify(globalState.quizesArray));\n                quizesArrayCopy.forEach((obj)=>{\n                  if(obj.id===this.state.quizObjForEdit.id){\n                     obj.description=this.state.quizObjForEdit.description;\n                     obj.duration_minutes=this.state.quizObjForEdit.duration_minutes;\n                  }\n                });\n                setQuizes(quizesArrayCopy, dispatch);\n                this.setState({quizObj: this.state.quizObjForEdit, problemsArray: this.state.problemsArrayForEdit,\n                  showEditQuizDialog:false});\n                hideSpinner(dispatch);\n                alert('Quiz updated');\n            }\n            else{\n              alert('Quiz updation failed!');\n            }\n        })\n    }//end of else\n  }\n\n  quizTypeSelectChange(e){\n        const copied = Object.assign({}, this.state.quizObjForEdit)\n        var new_quizType=e.target.value;\n        var new_quizTypeDescription=e.target.options[e.target.selectedIndex].text;\n        copied.type=new_quizType;\n        //console.log(new_quizType);\n        this.setState({quizObjForEdit:copied});\n  }\n\n  descriptionChange(e){\n    const copied = Object.assign({}, this.state.quizObjForEdit)\n    copied.description=e.target.value;\n    this.setState({quizObjForEdit:copied});\n  }\n\n  courseNameChange(e){\n    const copied = Object.assign({}, this.state.quizObjForEdit)\n    copied.courseName=e.target.value;\n    this.setState({quizObjForEdit:copied});\n  }\n\n  durationChange(e){\n    const copied = Object.assign({}, this.state.quizObjForEdit)\n    copied.duration_minutes=e.target.value;\n    this.setState({quizObjForEdit:copied});\n  }\n\n/*  async componentDidMount(){\n    this.props.showSpinner();\n    const {params}= this.props.match;\n\n    var reqBody=\"quizId=\"+encodeURIComponent(params.id);\n    let res1=await fetch(`/api/getTheQuiz`, {\n      headers:{\n        'Accept':'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    });\n    let data=await res1.json()\n    data.id=params.id;\n      //console.log(data);\n    let res2=await fetch(`/api/getProblemListForQuiz`, {\n        headers:{\n          'Accept':'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      });\n    let data1=await res2.json()\n\n    let res3=await fetch(`http://localhost:5000/api/quizGetScores`, {\n                   headers:{\n                     'Accept':'application/json',\n                     'Content-type': 'application/x-www-form-urlencoded'\n                   },\n                   method: 'POST',\n                   body: reqBody\n                 });\n\n   const data2=await res3.json();\n   console.log(data2);\n   this.setState({quizObj: data, quizObjForEdit: data, problemsArray: data1, quizResultsArray:data2});\n  }*/\n\n  componentDidMount(){\n    let dispatch=this.props.dispatch;\n\n    showSpinner(dispatch);\n    const {params}= this.props.match;\n\n    var reqBody=\"quizId=\"+encodeURIComponent(params.id);\n    let promise1=fetch(`/api/getTheQuiz`, {\n      headers:{\n        'Accept':'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    });\n\n    let promise2=fetch(`/api/getProblemListForQuiz`, {\n        headers:{\n          'Accept':'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      });\n\n\n    Promise.all([promise1, promise2]).then(responses=>{\n      Promise.all(responses.map(res=>res.json())).then(jsons=>{\n          jsons[0].id=params.id;\n          //console.log(jsons[0]);\n           this.setState({\n              quizObj: jsons[0], quizObjForEdit: jsons[0],\n              problemsArray: jsons[1], problemsArrayForEdit: jsons[1],\n              });\n           })\n    });\n    hideSpinner(dispatch);\n  }\n\n  editQuizHandler(){\n    this.setState({showEditQuizDialog:true});\n  }\n\n  removeProblemFromProblemsArray(e,problemId){\n    let problemsArray =  this.state.problemsArrayForEdit.filter(val=>val.id!==problemId)\n    this.setState({problemsArrayForEdit:problemsArray});\n    //console.log(quizesArray);\n  }\n\n  addProblemToProblemsArray(e,probObj){\n    let problemsArray =  [...this.state.problemsArrayForEdit];\n    if(problemsArray.filter(val=>val.id===probObj.id).length>0){\n      alert('Problem redundant')\n    }\n    else if(probObj.type!==this.state.quizObjForEdit.type){\n      alert('Problem and Quiz should be of the same type')\n    }\n    else {\n       problemsArray.push(probObj);\n       this.setState({problemsArrayForEdit:problemsArray});\n    }\n  }\n\n\n  removeCourseFromCoursesArray(e,courseId){\n    const copied = Object.assign({}, this.state.quizObjForEdit)\n    let coursesArray=copied.coursesArray.filter(val=>val.id!==courseId);\n    copied.coursesArray=coursesArray;\n    this.setState({quizObjForEdit:copied});\n    //console.log(quizesArray);\n  }\n\n  addCourseToCoursesArraySubmit(courseObject){\n    const copied = Object.assign({}, this.state.quizObjForEdit);\n    let coursesArray= [...copied.coursesArray];\n\n    if(coursesArray.filter(val=>val.id===courseObject.id).length>0){\n      alert('Course redundant')\n    }\n    else {\n       coursesArray.push(courseObject);\n       copied.coursesArray=coursesArray;\n       this.setState({quizObjForEdit:copied});\n    }\n    //console.log(quizObject);\n  }\n\n\n  deleteQuizHandler(id){\n    let dispatch=this.props.dispatch;\n    let globalState=this.props.state;\n\n    let b=window.confirm('Are you sure you want to delete');\n    if(b===true){\n        showSpinner(dispatch);\n          var reqBody=\"id=\"+encodeURIComponent(id);\n          fetch(`/api/deleteQuiz`, {\n            headers:{\n              'Accept':'application/json',\n              'Content-type': 'application/x-www-form-urlencoded'\n            },\n            method: 'POST',\n            body: reqBody\n          })\n          .then(res=>res.json())\n          .then(data=>{\n              if(data.deletestatus===\"ok\"){\n                  let quizesArrayCopy=globalState.quizesArray.filter((obj)=>obj.id!==id);\n                  setQuizes(quizesArrayCopy, dispatch);\n                  hideSpinner(dispatch);\n                  alert('Quiz deleted');\n                  window.location.assign(\"https://\"+window.location.hostname+':'+window.location.port+\"/quizesBrowse\");\n              }\n          })\n    }//end of if\n  }\n\n  /* Toggle between showing and hiding the navigation menu links when the user clicks on the hamburger menu / bar icon */\n toggleNavDisplay() {\n   var x = document.getElementById(\"TopNav\");\n  if (x.className === \"TopNav\") {\n    x.className += \" responsive\";\n  } else {\n    x.className = \"TopNav\";\n  }\n}\n\nshowQuizResultsHandler(){\n   window.location.assign(\"https://\"+window.location.hostname+':'+window.location.port+\"/quizInstances/\"+this.state.quizObjForEdit.id);\n   //this.setState({showQuizResultsDialog:true});\n}\n\noptionChange=(problemId, optionSelectedValue)=>{\n  let globalState=this.props.state;\n  let dispatch=this.props.dispatch;\n  const copied = Object.assign({}, globalState.startedQuizAnswers);\n  copied[problemId]=optionSelectedValue;\n  //this.setState({startedQuizAnswers:copied});\n  //console.log(copied);\n  //localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  setStartedQuizAnswers(copied, dispatch);\n}\n\nsolutionChange=(problemId, e)=>{\n  let globalState=this.props.state;\n  let dispatch=this.props.dispatch;\n  const copied = Object.assign({}, globalState.startedQuizAnswers);\n  copied[problemId]=e.target.value;\n  //this.setState({startedQuizAnswers:copied});\n  //localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  setStartedQuizAnswers(copied, dispatch);\n}\n\nstartQuiz=()=>{\n  let globalState=this.props.state;\n  let dispatch=this.props.dispatch;\n  let quizObj=this.state.quizObj;\n  if(globalState.startedQuiz===null){\n    if(window.confirm('Are you sure you want to start the quiz:\\r\\n'+quizObj.description)===true){\n      quizObj['start_time']=getCurrentTimestampString();\n      var reqBody=\"quizId=\"+encodeURIComponent(quizObj.id);\n          reqBody+='&startTime='+encodeURIComponent(quizObj.start_time);\n          reqBody+='&userId='+encodeURIComponent(this.state.loggedInUser);\n\n      fetch(`/api/quizStart`, {\n        headers:{\n          'Accept':'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      })\n      .then(res=>res.json())\n      .then(\n        data=>{\n          console.log(data);\n          if(data.insertstatus=== \"ok\"){\n            quizObj['quizInstanceId']=data.quizInstanceId;\n            //this.setState({startedQuiz:quizObj});\n            //localStorage.setItem('startedQuiz', JSON.stringify(quizObj));\n            setStartedQuiz(quizObj, dispatch);\n          }\n          else{\n            alert('An error occurred in connecting to the server to start the quiz');\n          }\n        });\n    }\n  }\n  else{\n    alert('There is already a started quiz:\\r\\n'+\n           globalState.startedQuiz.description+\n          '\\r\\n Please submit this quiz to start a new quiz')\n  }\n   console.log(globalState.startedQuiz);\n}\n\nsubmitQuiz=()=>{\n  //console.log(this.state.startedQuizAnswers);\n  //console.log(this.state.startedQuiz);\n  let globalState=this.props.state;\n  let dispatch=this.props.dispatch;\n  var reqBody=\"quizId=\"+encodeURIComponent(globalState.startedQuiz.id);\n      reqBody+=\"&quizType=\"+encodeURIComponent(globalState.startedQuiz.type);\n      reqBody+='&quizInstanceId='+encodeURIComponent(globalState.startedQuiz.quizInstanceId);\n      reqBody+='&answersObject='+encodeURIComponent(JSON.stringify(globalState.startedQuizAnswers));\n\n      fetch(`/api/quizAnwersSubmit`, {\n        headers:{\n          'Accept':'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      })\n      .then(res=>res.json())\n      .then(\n        data=>{\n          //console.log(data);\n          if(data.insertstatus=== \"ok\"){\n            //localStorage.removeItem('startedQuiz');\n            //localStorage.removeItem('startedQuizAnswers');\n            //this.setState({startedQuiz:null, startedQuizAnswers:null});\n            submitStartedQuiz(dispatch)\n            alert('Quiz Submitted');\n          }\n        }\n      );\n}\n\n\n  render(){\n    {/*if(this.props.loggedInUser===''){\n      return <Redirect to=\"/errorLogin\"/>\n      }*/}\n    let globalState=this.props.state;\n    let dispatch=this.props.dispatch;\n    return (\n      <div>\n      <a class=\"HomeLink\" href=\"/\">\n          <img class=\"homeIcon\" src={this.state.icons.home} alt=\"back to home\"/>\n      {/*back to home*/}\n      </a>\n      <div class=\"h1\">\n        Quiz Details\n      </div>\n      <div className=\"Panel\">\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n          <div className=\"h1\">\n            {this.state.quizObj.description}\n          </div>\n           <b>Course:</b><br/>\n           {this.state.quizObj.coursesArray!==undefined?\n             (\n               this.state.quizObj.coursesArray.map(courseObj=>(\n                               <a href={`https://${window.location.hostname}:${window.location.port}/courseShowSelected/${courseObj.id}`}>\n                                 <div id={`courseName$,${courseObj.id}`}  className=\"Course\" style={{marginLeft:'2em'}}>\n                                 {courseObj.name}\n                                 </div>\n                               </a>\n                                                               )\n               )\n             ):null\n           }\n           <br/>\n           <b>Duration (minutes):</b> {this.state.quizObj.duration_minutes}\n           <div className=\"TopNavParent\" style={{ width:'100%', textAlign:'right'}}>\n               <div id=\"TopNav\" className=\"TopNav\">\n                <a href=\"javascript:void(0);\" class=\"HamIcon\" onClick={()=>this.toggleNavDisplay()}>\n                    <i class=\"fa fa-bars\"></i>\n                </a>\n               <input type=\"button\" className=\"LeftButton\"\n                onClick={()=>this.startQuiz()}\n                id={`s${this.state.quizObj.id}`} value=\"Start Quiz\"/>\n               {(this.props.loggedInUser===this.state.quizObj.instructorId||this.props.admin===\"1\")?\n               (<>\n                  <input type=\"button\"\n                   className=\"LeftButton\"\n                   onClick={()=>this.editQuizHandler()}\n                   id={`e${this.state.quizObj.id}`} value=\"Edit Quiz\"/>\n                  <input type=\"button\" className=\"LeftButton\"\n                   onClick={()=>this.deleteQuizHandler(this.state.quizObj.id)}\n                   id={`d${this.state.quizObj.id}`} value=\"Delete Quiz\"/>\n                   <input type=\"button\" className=\"LeftButton\"\n                    onClick={()=>this.showQuizResultsHandler()}\n                    id={`r${this.state.quizObj.id}`} value=\"Quiz Results\"/>\n               </>):null}\n                </div>\n            </div>\n           <br/>\n           <b> Quiz Type:</b> {this.state.quizObj.type===\"d\"?\"Descriptive\": \"Multiple Choice\"}\n           <br/><br/>\n          <b> Instructor:</b> {this.state.quizObj.instructorId}\n          <br/><br/>\n          {globalState.isQuizStarted(this.state.quizObj.id)?(\n            <form>\n            {(this.state.problemsArray.map(obj=>(\n              <div className=\"probParent\">\n                  <hr/>\n                  <b>Question: </b>\n                  <div className=\"Question\"\n                        dangerouslySetInnerHTML={{\n                       __html: obj.description\n                       }}\n                  ></div>\n                  {obj.type===\"d\"?(<>Answer Description:<br/>\n                                      <textarea id=\"ansDescription\" name=\"ansDescription\" type=\"text\" rows=\"10\"\n                                      value={globalState.startedQuizAnswers[obj.id]}\n                                      onChange={(e)=>this.solutionChange(obj.id,e)}\n                                      style={{width:'90%'}}>\n                                      </textarea>\n                                  </>):null\n                  }\n                  {obj.type===\"m\"?(<>\n                                      <b>Options</b><br/>\n                                      <input type=\"radio\" id={`${obj.id}$option1`} onChange={(e)=>this.optionChange(obj.id,e.target.value)}\n                                      checked={globalState.startedQuizAnswers!=null&&globalState.startedQuizAnswers[obj.id]===\"1\"}\n                                       name={`${obj.id}$`} value=\"1\" ></input>\n                                      <span  dangerouslySetInnerHTML={{__html: obj.option1}}/><br/>\n                                      <input type=\"radio\" id={`${obj.id}$option2`} onChange={(e)=>this.optionChange(obj.id,e.target.value)}\n                                      checked={globalState.startedQuizAnswers!=null&&globalState.startedQuizAnswers[obj.id]===\"2\"}\n                                       name={`${obj.id}$`} value=\"2\"></input>\n                                      <span  dangerouslySetInnerHTML={{__html: obj.option2}}/><br/>\n                                      <input type=\"radio\" id={`${obj.id}$option3`} onChange={(e)=>this.optionChange(obj.id,e.target.value)}\n                                        checked={globalState.startedQuizAnswers!=null&&globalState.startedQuizAnswers[obj.id]===\"3\"}\n                                       name={`${obj.id}$`} value=\"3\"></input>\n                                      <span  dangerouslySetInnerHTML={{__html: obj.option3}}/><br/>\n                                      <input type=\"radio\" id={`${obj.id}$option4`} onChange={(e)=>this.optionChange(obj.id,e.target.value)}\n                                        checked={globalState.startedQuizAnswers!=null&&globalState.startedQuizAnswers[obj.id]===\"4\"}\n                                       name={`${obj.id}$`} value=\"4\"></input>\n                                      <span  dangerouslySetInnerHTML={{__html: obj.option4}}/><br/>\n                                  </>\n                                ):null\n                }\n              </div>\n            )\n          ))}\n           <br/>\n           <input type=\"button\" className=\"LeftButton\"\n           onClick={e=>{\n                         if(window.confirm('Are you sure you want to submit the quiz:'+this.state.quizObj.description)===true)\n                           this.submitQuiz();\n                       }\n                   }\n           value=\"Submit Quiz\"/>\n          </form>\n        ):null}\n        <QuizEditDialog\n                objectForEdit={this.state.quizObjForEdit}\n                show={this.state.showEditQuizDialog}\n                handleDismiss={this.handleEditQuizDialogDismiss}\n                handleSubmit={this.saveUpdateHandler}\n                descriptionChange={this.descriptionChange}\n                courseNameChange={this.courseNameChange}\n                problemsArrayForEdit={this.state.problemsArrayForEdit}\n                durationChange={this.durationChange}\n                quizTypeSelectChange={this.quizTypeSelectChange}\n                removeCourseFromCoursesArray={this.removeCourseFromCoursesArray}\n                addCourseToCoursesArraySubmit={this.addCourseToCoursesArraySubmit}\n                removeProblemFromProblemsArray={this.removeProblemFromProblemsArray}\n                addProblemToProblemsArray={this.addProblemToProblemsArray}\n                state={this.props.state}\n                dispatch={this.props.dispatch}\n        />\n     </div>\n     </div>\n    )\n  }\n\n\n}\n\nexport default QuizShowSelected;\n"]},"metadata":{},"sourceType":"module"}