{"ast":null,"code":";\n\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./sha1\", \"./hmac\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var MD5 = C_algo.MD5;\n    /**\n     * This key derivation function is meant to conform with EVP_BytesToKey.\n     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n     */\n\n    var EvpKDF = C_algo.EvpKDF = Base.extend({\n      /**\n       * Configuration options.\n       *\n       * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n       * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n       * @property {number} iterations The number of iterations to perform. Default: 1\n       */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: MD5,\n        iterations: 1\n      }),\n\n      /**\n       * Initializes a newly created key derivation function.\n       *\n       * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n       *\n       * @example\n       *\n       *     var kdf = CryptoJS.algo.EvpKDF.create();\n       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n       */\n      init: function (cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n       * Derives a key from a password.\n       *\n       * @param {WordArray|string} password The password.\n       * @param {WordArray|string} salt A salt.\n       *\n       * @return {WordArray} The derived key.\n       *\n       * @example\n       *\n       *     var key = kdf.compute(password, salt);\n       */\n      compute: function (password, salt) {\n        var block; // Shortcut\n\n        var cfg = this.cfg; // Init hasher\n\n        var hasher = cfg.hasher.create(); // Initial values\n\n        var derivedKey = WordArray.create(); // Shortcuts\n\n        var derivedKeyWords = derivedKey.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations; // Generate key\n\n        while (derivedKeyWords.length < keySize) {\n          if (block) {\n            hasher.update(block);\n          }\n\n          block = hasher.update(password).finalize(salt);\n          hasher.reset(); // Iterations\n\n          for (var i = 1; i < iterations; i++) {\n            block = hasher.finalize(block);\n            hasher.reset();\n          }\n\n          derivedKey.concat(block);\n        }\n\n        derivedKey.sigBytes = keySize * 4;\n        return derivedKey;\n      }\n    });\n    /**\n     * Derives a key from a password.\n     *\n     * @param {WordArray|string} password The password.\n     * @param {WordArray|string} salt A salt.\n     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n     *\n     * @return {WordArray} The derived key.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var key = CryptoJS.EvpKDF(password, salt);\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n     */\n\n    C.EvpKDF = function (password, salt, cfg) {\n      return EvpKDF.create(cfg).compute(password, salt);\n    };\n  })();\n\n  return CryptoJS.EvpKDF;\n});","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/node_modules/crypto-js/evpkdf.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","Base","WordArray","C_algo","algo","MD5","EvpKDF","extend","cfg","keySize","hasher","iterations","init","compute","password","salt","block","create","derivedKey","derivedKeyWords","words","length","update","finalize","reset","i","concat","sigBytes"],"mappings":"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","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));"]},"metadata":{},"sourceType":"script"}