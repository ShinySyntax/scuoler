{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/App.js\";\nimport React from 'react';\nimport './css/App.css';\nimport Header from './components/Header';\nimport ImageSlider from './components/ImageSlider';\nimport DropdownMenuHover from './components/DropdownMenuHover';\nimport ProblemsBrowse from './components/ProblemsBrowse';\nimport ProblemsSearch from './components/ProblemsSearch';\nimport ProblemInsert from './components/ProblemInsert';\nimport ProblemShowSelected from './components/ProblemShowSelected';\nimport QuizesBrowse from './components/QuizesBrowse';\nimport QuizesSearch from './components/QuizesSearch';\nimport QuizInsert from './components/QuizInsert';\nimport QuizShowSelected from './components/QuizShowSelected';\nimport QuizInstances from './components/QuizInstances';\nimport UsersBrowse from './components/UsersBrowse';\nimport UsersSearch from './components/UsersSearch';\nimport UserInsert from './components/UserInsert';\nimport UserShowSelected from './components/UserShowSelected';\nimport UserQuizInstances from './components/UserQuizInstances';\nimport CoursesBrowse from './components/CoursesBrowse';\nimport CourseInsert from './components/CourseInsert';\nimport CoursesSearch from './components/CoursesSearch';\nimport CourseShowSelected from './components/CourseShowSelected';\nimport ChatHome from './components/chat/ChatHome';\nimport { Route, BrowserRouter as Router, useLocation, useHistory, Redirect } from 'react-router-dom';\nimport { getMinutesRemaining, getCurrentTimestampString, getPageArray } from './utils/utils';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      spinner: false,\n      userId: null,\n      password: null,\n      loggedInUser: localStorage.getItem('loggedInUser') || '',\n      loggedInUserFullName: localStorage.getItem('loggedInUserFullName') || '',\n      admin: localStorage.getItem('admin') || \"0\",\n      errorMessage: null,\n      coursesArray: [],\n      problemsArray: [],\n      currentProblemsPage: 1,\n      currentQuizesPage: 1,\n      currentCoursesPage: 1,\n      currentUsersPage: 1,\n      pageSize: 30,\n      quizesArray: [],\n      usersArray: [],\n      startedQuiz: localStorage.getItem('startedQuiz') ? JSON.parse(localStorage.getItem('startedQuiz')) : null,\n      startedQuizAnswers: localStorage.getItem('startedQuizAnswers') ? JSON.parse(localStorage.getItem('startedQuizAnswers')) : null\n    };\n    this.userIdChange = this.userIdChange.bind(this);\n    this.passwordChange = this.passwordChange.bind(this);\n    this.handleLoginSubmit = this.handleLoginSubmit.bind(this);\n    this.handleAltLogin = this.handleAltLogin.bind(this);\n    this.logoutUser = this.logoutUser.bind(this);\n    this.setErrorMessage = this.setErrorMessage.bind(this);\n    this.setCourses = this.setCourses.bind(this);\n    this.setProblems = this.setProblems.bind(this);\n    this.setQuizes = this.setQuizes.bind(this);\n    this.setUsers = this.setUsers.bind(this);\n    this.loadCourses = this.loadCourses.bind(this);\n    this.loadProblems = this.loadProblems.bind(this);\n    this.loadQuizes = this.loadQuizes.bind(this);\n    this.loadUsers = this.loadUsers.bind(this);\n    this.showSpinner = this.showSpinner.bind(this);\n    this.hideSpinner = this.hideSpinner.bind(this);\n    this.startQuiz = this.startQuiz.bind(this);\n    this.isQuizStarted = this.isQuizStarted.bind(this);\n    this.startedQuizOptionChange = this.startedQuizOptionChange.bind(this);\n    this.startedQuizSolutionChange = this.startedQuizSolutionChange.bind(this);\n    this.startedQuizSubmit = this.startedQuizSubmit.bind(this);\n    this.nextProblemsPageClick = this.nextProblemsPageClick.bind(this);\n    this.prevProblemsPageClick = this.prevProblemsPageClick.bind(this);\n    this.setProblemsPage = this.setProblemsPage.bind(this);\n    this.nextQuizesPageClick = this.nextQuizesPageClick.bind(this);\n    this.prevQuizesPageClick = this.prevQuizesPageClick.bind(this);\n    this.setQuizesPage = this.setQuizesPage.bind(this);\n    this.nextCoursesPageClick = this.nextCoursesPageClick.bind(this);\n    this.prevCoursesPageClick = this.prevCoursesPageClick.bind(this);\n    this.setCoursesPage = this.setCoursesPage.bind(this);\n    this.nextUsersPageClick = this.nextUsersPageClick.bind(this);\n    this.prevUsersPageClick = this.prevUsersPageClick.bind(this);\n    this.setUsersPage = this.setUsersPage.bind(this);\n  }\n\n  componentDidMount() {\n    var timer = setInterval(() => {\n      this.reviseQuizMinsRemaining();\n    }, 60000);\n  }\n\n  loadCourses() {\n    this.setState({\n      spinner: true\n    });\n    let url = '/api/getCourses';\n\n    if (this.state.currentCoursesPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentCoursesPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      //console.log(data);\n      this.setState({\n        coursesArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setCourses(arr) {\n    this.setState({\n      coursesArray: arr\n    });\n  }\n\n  setCoursesPage(page) {\n    this.setState({\n      currentCoursesPage: page\n    }, () => {\n      this.loadCourses();\n    });\n  }\n\n  nextCoursesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentCoursesPage, this.state.coursesArray === undefined || this.state.coursesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentCoursesPage + 1)) {\n      this.setState({\n        currentCoursesPage: this.state.currentCoursesPage + 1\n      }, () => {\n        this.loadCourses();\n      });\n    }\n  }\n\n  prevCoursesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentCoursesPage, this.state.coursesArray === undefined || this.state.coursesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentCoursesPage - 1)) {\n      this.setState({\n        currentCoursesPage: this.state.currentCoursesPage - 1\n      }, () => {\n        this.loadCourses();\n      });\n    }\n  }\n\n  startedQuizOptionChange(problemId, optionSelectedValue) {\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId] = optionSelectedValue;\n    this.setState({\n      startedQuizAnswers: copied\n    }); //console.log(copied);\n\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startedQuizSolutionChange(problemId, e) {\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId] = e.target.value;\n    this.setState({\n      startedQuizAnswers: copied\n    });\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startQuiz(quizObj) {\n    if (this.state.startedQuiz === null) {\n      if (window.confirm('Are you sure you want to start the quiz:\\r\\n' + quizObj.description) === true) {\n        quizObj['start_time'] = getCurrentTimestampString();\n        var reqBody = \"quizId=\" + encodeURIComponent(quizObj.id);\n        reqBody += '&startTime=' + encodeURIComponent(quizObj.start_time);\n        reqBody += '&userId=' + encodeURIComponent(this.state.loggedInUser);\n        fetch(`/api/quizStart`, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        }).then(res => res.json()).then(data => {\n          console.log(data);\n\n          if (data.insertstatus === \"ok\") {\n            quizObj['quizInstanceId'] = data.quizInstanceId;\n            this.setState({\n              startedQuiz: quizObj\n            });\n            localStorage.setItem('startedQuiz', JSON.stringify(quizObj));\n          } else {\n            alert('An error occurred in connecting to the server to start the quiz');\n          }\n        });\n      }\n    } else {\n      alert('There is already a started quiz:\\r\\n' + this.state.startedQuiz.description + '\\r\\n Please submit this quiz to start a new quiz');\n    }\n\n    console.log(this.state.startedQuiz);\n  }\n\n  startedQuizSubmit() {\n    //console.log(this.state.startedQuizAnswers);\n    //console.log(this.state.startedQuiz);\n    var reqBody = \"quizId=\" + encodeURIComponent(this.state.startedQuiz.id);\n    reqBody += \"&quizType=\" + encodeURIComponent(this.state.startedQuiz.type);\n    reqBody += '&quizInstanceId=' + encodeURIComponent(this.state.startedQuiz.quizInstanceId);\n    reqBody += '&answersObject=' + encodeURIComponent(JSON.stringify(this.state.startedQuizAnswers));\n    fetch(`/api/quizAnwersSubmit`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    }).then(res => res.json()).then(data => {\n      //console.log(data);\n      if (data.insertstatus === \"ok\") {\n        localStorage.removeItem('startedQuiz');\n        localStorage.removeItem('startedQuizAnswers');\n        this.setState({\n          startedQuiz: null,\n          startedQuizAnswers: null\n        });\n        alert('Quiz Submitted');\n      }\n    });\n  }\n\n  reviseQuizMinsRemaining() {\n    if (this.state.startedQuiz !== null) {\n      var mins_remaining = getMinutesRemaining(this.state.startedQuiz.start_time, this.state.startedQuiz.duration_minutes);\n\n      if (mins_remaining > 0) {\n        console.log(mins_remaining);\n        const copied = Object.assign({}, this.state.startedQuiz); //copied['mins_remaining']=mins_remaining;\n\n        this.setState({\n          startedQuiz: copied\n        });\n        localStorage.setItem('startedQuiz', JSON.stringify(copied));\n      } else {\n        this.startedQuizSubmit();\n      }\n    }\n  }\n\n  isQuizStarted(quizId) {\n    if (this.state.startedQuiz !== null && this.state.startedQuiz.id === quizId) return true;else return false;\n  }\n\n  loadProblems() {\n    let url = '/api/getProblems';\n\n    if (this.state.currentProblemsPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentProblemsPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    this.setState({\n      spinner: true\n    });\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        problemsArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setProblems(arr) {\n    this.setState({\n      problemsArray: arr\n    });\n  }\n\n  setProblemsPage(page) {\n    this.setState({\n      currentProblemsPage: page\n    }, () => {\n      this.loadProblems();\n    });\n  }\n\n  nextProblemsPageClick(e) {\n    let pageArray = getPageArray(this.state.currentProblemsPage, this.state.problemsArray === undefined || this.state.problemsArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentProblemsPage + 1)) {\n      this.setState({\n        currentProblemsPage: this.state.currentProblemsPage + 1\n      }, () => {\n        this.loadProblems();\n      });\n    }\n  }\n\n  prevProblemsPageClick(e) {\n    let pageArray = getPageArray(this.state.currentProblemsPage, this.state.problemsArray === undefined || this.state.problemsArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentProblemsPage - 1)) {\n      this.setState({\n        currentProblemsPage: this.state.currentProblemsPage - 1\n      }, () => {\n        this.loadProblems();\n      });\n    }\n  }\n\n  loadQuizes() {\n    this.setState({\n      spinner: true\n    });\n    let url = '/api/getQuizes';\n\n    if (this.state.currentQuizesPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentQuizesPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      //console.log(data);\n      this.setState({\n        quizesArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setQuizes(arr) {\n    this.setState({\n      quizesArray: arr\n    });\n  }\n\n  setQuizesPage(page) {\n    this.setState({\n      currentQuizesPage: page\n    }, () => {\n      this.loadQuizes();\n    });\n  }\n\n  nextQuizesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentQuizesPage, this.state.quizesArray === undefined || this.state.quizesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentQuizesPage + 1)) {\n      this.setState({\n        currentQuizesPage: this.state.currentQuizesPage + 1\n      }, () => {\n        this.loadQuizes();\n      });\n    }\n  }\n\n  prevQuizesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentQuizesPage, this.state.quizesArray === undefined || this.state.quizesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentQuizesPage - 1)) {\n      this.setState({\n        currentQuizesPage: this.state.currentQuizesPage - 1\n      }, () => {\n        this.loadQuizes();\n      });\n    }\n  }\n\n  loadUsers() {\n    this.setState({\n      spinner: true\n    });\n    let url = '/api/getUsers';\n\n    if (this.state.currentUsersPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentUsersPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        usersArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setUsers(arr) {\n    this.setState({\n      usersArray: arr\n    });\n  }\n\n  setUsersPage(page) {\n    this.setState({\n      currentUsersPage: page\n    }, () => {\n      this.loadUsers();\n    });\n  }\n\n  nextUsersPageClick(e) {\n    let pageArray = getPageArray(this.state.currentUsersPage, this.state.usersArray === undefined || this.state.usersArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentUsersPage + 1)) {\n      this.setState({\n        currentUsersPage: this.state.currentUsersPage + 1\n      }, () => {\n        this.loadUsers();\n      });\n    }\n  }\n\n  prevUsersPageClick(e) {\n    let pageArray = getPageArray(this.state.currentUsersPage, this.state.usersArray === undefined || this.state.usersArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentUsersPage - 1)) {\n      this.setState({\n        currentUsersPage: this.state.currentUsersPage - 1\n      }, () => {\n        this.loadUsers();\n      });\n    }\n  }\n\n  showSpinner() {\n    this.setState({\n      spinner: true\n    });\n  }\n\n  hideSpinner() {\n    this.setState({\n      spinner: false\n    });\n  }\n\n  handleAltLogin(strSource, response) {\n    const AltLoginInitiate = (firstName, lastName, email, id, picture_url) => {\n      var reqBody = \"userId=\" + encodeURIComponent(id);\n      reqBody += '&firstName=' + encodeURIComponent(firstName);\n      reqBody += '&lastName=' + encodeURIComponent(lastName);\n      reqBody += '&email=' + encodeURIComponent(email);\n      reqBody += '&pictureUrl=' + encodeURIComponent(picture_url);\n      fetch(`/api/mergeUser`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      }).then(res => res.json()).then(data => {//console.log(data);\n      });\n      localStorage.setItem('loggedInUser', id);\n      localStorage.setItem('loggedInUserFullName', firstName + ' ' + lastName);\n      localStorage.setItem('admin', '0');\n      this.setState({\n        errorMessage: null,\n        loggedInUser: id,\n        loggedInUserFullName: firstName + ' ' + lastName,\n        admin: '0'\n      }); //console.log(firstName+' '+lastName+' '+email+' '+id+' '+picture_url);\n    };\n\n    if (strSource === 'facebook' && response.id !== undefined) {\n      let fullName = response.name;\n      let firstName = fullName;\n      let lastName = \"\";\n      let arrName = fullName.split(\" \");\n\n      if (arrName.length > 1) {\n        firstName = arrName[0];\n        lastName = arrName[1];\n      }\n\n      let email = response.email;\n      let id = response.id;\n      let picture_url = response.picture.data.url;\n      AltLoginInitiate(firstName, lastName, email, id, picture_url);\n    } else if (strSource === 'google' && response.googleId !== undefined) {\n      let id = response.googleId;\n      let picture_url = response.profileObj.imageUrl;\n      let email = response.profileObj.email;\n      let firstName = response.profileObj.givenName;\n      let lastName = response.profileObj.familyName;\n      AltLoginInitiate(firstName, lastName, email, id, picture_url); //console.log(response);\n    } //alert(strSource);\n\n  }\n\n  handleLoginSubmit(event) {\n    if (this.state.userId === null || this.state.password === null || this.state.password.length === 0 || this.state.userId.length === 0) {\n      event.preventDefault();\n      this.setState({\n        errorMessage: \"UserId/password cannot be empty\"\n      });\n      return;\n    }\n\n    var reqBody = \"userId=\" + encodeURIComponent(this.state.userId);\n    reqBody += '&password=' + encodeURIComponent(this.state.password);\n    fetch(`/api/login`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.login === \"ok\") {\n        localStorage.setItem('loggedInUser', this.state.userId);\n        localStorage.setItem('loggedInUserFullName', data.full_name);\n        localStorage.setItem('admin', data.admin);\n        this.setState({\n          errorMessage: null,\n          loggedInUser: this.state.userId,\n          loggedInUserFullName: data.full_name,\n          admin: data.admin\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Login Failed: UserId/password Mismatch\"\n        });\n      }\n    });\n    event.preventDefault();\n  }\n\n  userIdChange(e) {\n    const newUserId = e.target.value;\n    this.setState({\n      userId: newUserId\n    });\n  }\n\n  passwordChange(e) {\n    const newPassword = e.target.value;\n    this.setState({\n      password: newPassword\n    });\n  }\n\n  logoutUser(e) {\n    //e.preventDefault();\n    let confirmMsg = 'Are you sure you want to logout?';\n\n    if (this.state.startedQuiz !== null) {\n      confirmMsg += 'There is an unsubmitted quiz: \\r\\n' + this.state.startedQuiz.description;\n    }\n\n    let b = window.confirm(confirmMsg);\n\n    if (b === true) {\n      if (this.state.startedQuiz !== null) this.startedQuizSubmit();\n      localStorage.setItem('loggedInUser', '');\n      localStorage.setItem('loggedInUserFullName', '');\n      localStorage.setItem('admin', \"0\");\n      localStorage.removeItem('startedQuiz');\n      localStorage.removeItem('startedQuizAnswers');\n      this.setState({\n        errorMessage: null,\n        loggedInUser: '',\n        admin: \"0\",\n        startedQuiz: null,\n        startedQuizAnswers: null\n      });\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  setErrorMessage(errMsg) {\n    this.setState({\n      errorMessage: errMsg\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: props => /*#__PURE__*/React.createElement(Header, Object.assign({}, props, {\n        userId: this.state.userId,\n        password: this.state.password,\n        errorMessage: this.state.errorMessage,\n        passwordChange: this.passwordChange,\n        userIdChange: this.userIdChange,\n        handleSubmit: this.handleLoginSubmit,\n        handleAltLogin: this.handleAltLogin,\n        logoutUser: this.logoutUser,\n        loggedInUser: this.state.loggedInUser,\n        loggedInUserFullName: this.state.loggedInUserFullName,\n        startedQuiz: this.state.startedQuiz,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 46\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: props => /*#__PURE__*/React.createElement(DropdownMenuHover, Object.assign({}, props, {\n        loggedInUser: this.state.loggedInUser,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 46\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 13\n      }\n    }), this.state.spinner === true ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"spinner\",\n      className: \"loadingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 43\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 90\n      }\n    })) : null, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: ImageSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemsBrowse\",\n      render: props => /*#__PURE__*/React.createElement(ProblemsBrowse, Object.assign({}, props, {\n        problemsArray: this.state.problemsArray,\n        quizesArray: this.state.quizesArray,\n        loadProblems: this.loadProblems,\n        setProblems: this.setProblems,\n        loadQuizes: this.loadQuizes,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        currentPage: this.state.currentProblemsPage,\n        pageArray: getPageArray(this.state.currentProblemsPage, this.state.problemsArray === undefined || this.state.problemsArray.length < this.state.pageSize),\n        nextPageClick: this.nextProblemsPageClick,\n        prevPageClick: this.prevProblemsPageClick,\n        setProblemsPage: this.setProblemsPage,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 60\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemsSearch\",\n      render: props => /*#__PURE__*/React.createElement(ProblemsSearch, Object.assign({}, props, {\n        loadProblems: this.loadProblems,\n        problemsArray: this.state.problemsArray,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 60\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemInsert\",\n      render: props => /*#__PURE__*/React.createElement(ProblemInsert, Object.assign({}, props, {\n        problemsArray: this.state.problemsArray,\n        quizesArray: this.state.quizesArray,\n        loadQuizes: this.loadQuizes,\n        setProblems: this.setProblems,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(ProblemShowSelected, Object.assign({}, props, {\n        loadProblems: this.loadProblems,\n        problemsArray: this.state.problemsArray,\n        setProblems: this.setProblems,\n        loadQuizes: this.loadQuizes,\n        quizesArray: this.state.quizesArray,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 69\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizesBrowse\",\n      render: props => /*#__PURE__*/React.createElement(QuizesBrowse, {\n        quizesArray: this.state.quizesArray,\n        loadQuizes: this.loadQuizes,\n        currentPage: this.state.currentQuizesPage,\n        pageArray: getPageArray(this.state.currentQuizesPage, this.state.quizesArray === undefined || this.state.quizesArray.length < this.state.pageSize),\n        nextPageClick: this.nextQuizesPageClick,\n        prevPageClick: this.prevQuizesPageClick,\n        setQuizesPage: this.setQuizesPage,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 58\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizesSearch\",\n      render: props => /*#__PURE__*/React.createElement(QuizesSearch, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loadQuizes: this.loadQuizes,\n        quizesArray: this.state.quizesArray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizInsert\",\n      render: props => /*#__PURE__*/React.createElement(QuizInsert, Object.assign({}, props, {\n        quizesArray: this.state.quizesArray,\n        coursesArray: this.state.coursesArray,\n        loadCourses: this.loadCourses,\n        setQuizes: this.setQuizes,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 56\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(QuizShowSelected, Object.assign({}, props, {\n        loadQuizes: this.loadQuizes,\n        quizesArray: this.state.quizesArray,\n        setQuizes: this.setQuizes,\n        loadCourses: this.loadCourses,\n        coursesArray: this.state.coursesArray,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        startQuiz: this.startQuiz,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        isQuizStarted: this.isQuizStarted,\n        optionChange: this.startedQuizOptionChange,\n        solutionChange: this.startedQuizSolutionChange,\n        submitQuiz: this.startedQuizSubmit,\n        startedQuizAnswers: this.state.startedQuizAnswers,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 66\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizInstances/:id\",\n      render: props => /*#__PURE__*/React.createElement(QuizInstances, Object.assign({}, props, {\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 63\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/usersBrowse\",\n      render: props => /*#__PURE__*/React.createElement(UsersBrowse, Object.assign({}, props, {\n        usersArray: this.state.usersArray,\n        loadUsers: this.loadUsers,\n        currentPage: this.state.currentUsersPage,\n        pageArray: getPageArray(this.state.currentUsersPage, this.state.usersArray === undefined || this.state.usersArray.length < this.state.pageSize),\n        nextPageClick: this.nextUsersPageClick,\n        prevPageClick: this.prevUsersPageClick,\n        setUsersPage: this.setUsersPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 57\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/usersSearch\",\n      render: props => /*#__PURE__*/React.createElement(UsersSearch, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loadUsers: this.loadUsers,\n        usersArray: this.state.usersArray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 57\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/userInsert\",\n      render: props => /*#__PURE__*/React.createElement(UserInsert, Object.assign({}, props, {\n        usersArray: this.state.usersArray,\n        setUsers: this.setUsers,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 56\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/userShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(UserShowSelected, Object.assign({}, props, {\n        loadUsers: this.loadUsers,\n        usersArray: this.state.usersArray,\n        setUsers: this.setUsers,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 66\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/userQuizInstances\",\n      render: props => /*#__PURE__*/React.createElement(UserQuizInstances, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 63\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/coursesBrowse\",\n      render: props => /*#__PURE__*/React.createElement(CoursesBrowse, {\n        coursesArray: this.state.coursesArray,\n        loadCourses: this.loadCourses,\n        currentPage: this.state.currentCoursesPage,\n        pageArray: getPageArray(this.state.currentCoursesPage, this.state.coursesArray === undefined || this.state.coursesArray.length < this.state.pageSize),\n        nextPageClick: this.nextCoursesPageClick,\n        prevPageClick: this.prevCoursesPageClick,\n        setCoursesPage: this.setCoursesPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 59\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/coursesSearch\",\n      render: props => /*#__PURE__*/React.createElement(CoursesSearch, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loadCourses: this.loadCourses,\n        coursesArray: this.state.coursesArray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/courseInsert\",\n      render: props => /*#__PURE__*/React.createElement(CourseInsert, Object.assign({}, props, {\n        coursesArray: this.state.coursesArray,\n        setCourses: this.setCourses,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 58\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/CourseShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(CourseShowSelected, Object.assign({}, props, {\n        loadCourses: this.loadCourses,\n        coursesArray: this.state.coursesArray,\n        setCourses: this.setCourses,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 68\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 13\n      }\n    }), this.props.loggedInUser !== \"\" && /*#__PURE__*/React.createElement(Route, {\n      path: \"/videoChat\",\n      render: props => /*#__PURE__*/React.createElement(ChatHome, Object.assign({}, props, {\n        loggedInUser: this.state.loggedInUser,\n        loggedInUserFullName: this.state.loggedInUserFullName,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 88\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 46\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/errorLogin\",\n      render: props => /*#__PURE__*/React.createElement(ErrorLogin, Object.assign({}, props, {\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 56\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nfunction ErrorLogin({\n  loggedInUser,\n  ...props\n}) {\n  let history = useHistory();\n  let location = useLocation();\n  let {\n    from\n  } = location.state || {\n    from: {\n      pathname: \"/usersBrowse\"\n    }\n  };\n  console.log(loggedInUser);\n\n  if (loggedInUser !== \"\") {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: from,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 12\n      }\n    }); // history.replace(from);\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: \"red\",\n        fontSize: \"1.5em\",\n        paddingTop: \"1%\",\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 9\n      }\n    }, \"Error: User not Logged In!\");\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/App.js"],"names":["React","Header","ImageSlider","DropdownMenuHover","ProblemsBrowse","ProblemsSearch","ProblemInsert","ProblemShowSelected","QuizesBrowse","QuizesSearch","QuizInsert","QuizShowSelected","QuizInstances","UsersBrowse","UsersSearch","UserInsert","UserShowSelected","UserQuizInstances","CoursesBrowse","CourseInsert","CoursesSearch","CourseShowSelected","ChatHome","Route","BrowserRouter","Router","useLocation","useHistory","Redirect","getMinutesRemaining","getCurrentTimestampString","getPageArray","App","Component","constructor","props","state","spinner","userId","password","loggedInUser","localStorage","getItem","loggedInUserFullName","admin","errorMessage","coursesArray","problemsArray","currentProblemsPage","currentQuizesPage","currentCoursesPage","currentUsersPage","pageSize","quizesArray","usersArray","startedQuiz","JSON","parse","startedQuizAnswers","userIdChange","bind","passwordChange","handleLoginSubmit","handleAltLogin","logoutUser","setErrorMessage","setCourses","setProblems","setQuizes","setUsers","loadCourses","loadProblems","loadQuizes","loadUsers","showSpinner","hideSpinner","startQuiz","isQuizStarted","startedQuizOptionChange","startedQuizSolutionChange","startedQuizSubmit","nextProblemsPageClick","prevProblemsPageClick","setProblemsPage","nextQuizesPageClick","prevQuizesPageClick","setQuizesPage","nextCoursesPageClick","prevCoursesPageClick","setCoursesPage","nextUsersPageClick","prevUsersPageClick","setUsersPage","componentDidMount","timer","setInterval","reviseQuizMinsRemaining","setState","url","undefined","fetch","headers","then","res","json","data","arr","page","e","pageArray","length","includes","problemId","optionSelectedValue","copied","Object","assign","setItem","stringify","target","value","quizObj","window","confirm","description","reqBody","encodeURIComponent","id","start_time","method","body","console","log","insertstatus","quizInstanceId","alert","type","removeItem","mins_remaining","duration_minutes","quizId","strSource","response","AltLoginInitiate","firstName","lastName","email","picture_url","fullName","name","arrName","split","picture","googleId","profileObj","imageUrl","givenName","familyName","event","preventDefault","login","full_name","newUserId","newPassword","confirmMsg","b","errMsg","render","ErrorLogin","history","location","from","pathname","color","fontSize","paddingTop","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './css/App.css';\nimport Header from './components/Header';\nimport ImageSlider from './components/ImageSlider';\nimport DropdownMenuHover from './components/DropdownMenuHover';\nimport ProblemsBrowse from './components/ProblemsBrowse';\nimport ProblemsSearch from './components/ProblemsSearch';\nimport ProblemInsert from './components/ProblemInsert';\nimport ProblemShowSelected from './components/ProblemShowSelected';\nimport QuizesBrowse from './components/QuizesBrowse';\nimport QuizesSearch from './components/QuizesSearch';\nimport QuizInsert from './components/QuizInsert';\nimport QuizShowSelected from './components/QuizShowSelected';\nimport QuizInstances from './components/QuizInstances';\nimport UsersBrowse from './components/UsersBrowse';\nimport UsersSearch from './components/UsersSearch';\nimport UserInsert from './components/UserInsert';\nimport UserShowSelected from './components/UserShowSelected';\nimport UserQuizInstances from './components/UserQuizInstances';\nimport CoursesBrowse from './components/CoursesBrowse';\nimport CourseInsert from './components/CourseInsert';\nimport CoursesSearch from './components/CoursesSearch';\nimport CourseShowSelected from './components/CourseShowSelected';\nimport ChatHome from './components/chat/ChatHome';\nimport { Route, BrowserRouter as Router, useLocation, useHistory, Redirect} from 'react-router-dom';\nimport {getMinutesRemaining, getCurrentTimestampString, getPageArray} from './utils/utils';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      spinner:false,\n      userId:null,\n      password:null,\n      loggedInUser:localStorage.getItem('loggedInUser') || '',\n      loggedInUserFullName: localStorage.getItem('loggedInUserFullName')||'',\n      admin:localStorage.getItem('admin')||\"0\",\n      errorMessage:null,\n      coursesArray:[],\n      problemsArray:[],\n      currentProblemsPage:1,\n      currentQuizesPage:1,\n      currentCoursesPage:1,\n      currentUsersPage:1,\n      pageSize:30,\n      quizesArray:[],\n      usersArray:[],\n      startedQuiz:localStorage.getItem('startedQuiz')?JSON.parse(localStorage.getItem('startedQuiz')):null,\n      startedQuizAnswers:localStorage.getItem('startedQuizAnswers')?JSON.parse(localStorage.getItem('startedQuizAnswers')):null\n    }\n    this.userIdChange=this.userIdChange.bind(this);\n    this.passwordChange=this.passwordChange.bind(this);\n    this.handleLoginSubmit=this.handleLoginSubmit.bind(this);\n    this.handleAltLogin=this.handleAltLogin.bind(this);\n    this.logoutUser=this.logoutUser.bind(this);\n    this.setErrorMessage=this.setErrorMessage.bind(this);\n    this.setCourses=this.setCourses.bind(this);\n    this.setProblems=this.setProblems.bind(this);\n    this.setQuizes=this.setQuizes.bind(this);\n    this.setUsers=this.setUsers.bind(this);\n    this.loadCourses=this.loadCourses.bind(this);\n    this.loadProblems=this.loadProblems.bind(this);\n    this.loadQuizes=this.loadQuizes.bind(this);\n    this.loadUsers=this.loadUsers.bind(this);\n    this.showSpinner=this.showSpinner.bind(this);\n    this.hideSpinner=this.hideSpinner.bind(this);\n    this.startQuiz=this.startQuiz.bind(this);\n    this.isQuizStarted=this.isQuizStarted.bind(this);\n    this.startedQuizOptionChange=this.startedQuizOptionChange.bind(this);\n    this.startedQuizSolutionChange=this.startedQuizSolutionChange.bind(this);\n    this.startedQuizSubmit=this.startedQuizSubmit.bind(this);\n    this.nextProblemsPageClick=this.nextProblemsPageClick.bind(this);\n    this.prevProblemsPageClick=this.prevProblemsPageClick.bind(this);\n    this.setProblemsPage=this.setProblemsPage.bind(this);\n    this.nextQuizesPageClick=this.nextQuizesPageClick.bind(this);\n    this.prevQuizesPageClick=this.prevQuizesPageClick.bind(this);\n    this.setQuizesPage=this.setQuizesPage.bind(this);\n    this.nextCoursesPageClick=this.nextCoursesPageClick.bind(this);\n    this.prevCoursesPageClick=this.prevCoursesPageClick.bind(this);\n    this.setCoursesPage=this.setCoursesPage.bind(this);\n    this.nextUsersPageClick=this.nextUsersPageClick.bind(this);\n    this.prevUsersPageClick=this.prevUsersPageClick.bind(this);\n    this.setUsersPage=this.setUsersPage.bind(this);\n  }\n\n  componentDidMount() {\n    var timer = setInterval(() => {this.reviseQuizMinsRemaining();}, 60000)\n  }\n\n\n\n\n\n\n  loadCourses(){\n    this.setState({spinner:true});\n\n    let url='/api/getCourses';\n\n    if(this.state.currentCoursesPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentCoursesPage+'&pageSize='+this.state.pageSize;\n    }\n\n\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n      //console.log(data);\n      this.setState({coursesArray: data, spinner: false});\n    })\n  }\n\n  setCourses(arr){\n    this.setState({coursesArray:arr});\n  }\n\n  setCoursesPage(page){\n    this.setState({currentCoursesPage:page}, ()=>{this.loadCourses();});\n  }\n\n  nextCoursesPageClick(e){\n    let pageArray=getPageArray(this.state.currentCoursesPage, this.state.coursesArray===undefined||this.state.coursesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentCoursesPage+1)){\n        this.setState({currentCoursesPage:this.state.currentCoursesPage+1}, ()=>{this.loadCourses()});\n    }\n  }\n\n  prevCoursesPageClick(e){\n    let pageArray=getPageArray(this.state.currentCoursesPage, this.state.coursesArray===undefined||this.state.coursesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentCoursesPage-1)){\n        this.setState({currentCoursesPage:this.state.currentCoursesPage-1}, ()=>{this.loadCourses()});\n    }\n  }\n\n\n  startedQuizOptionChange(problemId, optionSelectedValue){\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId]=optionSelectedValue;\n    this.setState({startedQuizAnswers:copied});\n    //console.log(copied);\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startedQuizSolutionChange(problemId, e){\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId]=e.target.value;\n    this.setState({startedQuizAnswers:copied});\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startQuiz(quizObj){\n    if(this.state.startedQuiz===null){\n      if(window.confirm('Are you sure you want to start the quiz:\\r\\n'+quizObj.description)===true){\n        quizObj['start_time']=getCurrentTimestampString();\n        var reqBody=\"quizId=\"+encodeURIComponent(quizObj.id);\n            reqBody+='&startTime='+encodeURIComponent(quizObj.start_time);\n            reqBody+='&userId='+encodeURIComponent(this.state.loggedInUser);\n\n        fetch(`/api/quizStart`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        })\n        .then(res=>res.json())\n        .then(\n          data=>{\n            console.log(data);\n            if(data.insertstatus=== \"ok\"){\n              quizObj['quizInstanceId']=data.quizInstanceId;\n              this.setState({startedQuiz:quizObj});\n              localStorage.setItem('startedQuiz', JSON.stringify(quizObj));\n            }\n            else{\n              alert('An error occurred in connecting to the server to start the quiz');\n            }\n          });\n      }\n    }\n    else{\n      alert('There is already a started quiz:\\r\\n'+\n             this.state.startedQuiz.description+\n            '\\r\\n Please submit this quiz to start a new quiz')\n    }\n     console.log(this.state.startedQuiz);\n  }\n\n  startedQuizSubmit(){\n    //console.log(this.state.startedQuizAnswers);\n    //console.log(this.state.startedQuiz);\n\n    var reqBody=\"quizId=\"+encodeURIComponent(this.state.startedQuiz.id);\n        reqBody+=\"&quizType=\"+encodeURIComponent(this.state.startedQuiz.type);\n        reqBody+='&quizInstanceId='+encodeURIComponent(this.state.startedQuiz.quizInstanceId);\n        reqBody+='&answersObject='+encodeURIComponent(JSON.stringify(this.state.startedQuizAnswers));\n\n        fetch(`/api/quizAnwersSubmit`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        })\n        .then(res=>res.json())\n        .then(\n          data=>{\n            //console.log(data);\n            if(data.insertstatus=== \"ok\"){\n              localStorage.removeItem('startedQuiz');\n              localStorage.removeItem('startedQuizAnswers');\n              this.setState({startedQuiz:null, startedQuizAnswers:null});\n              alert('Quiz Submitted');\n            }\n          }\n        );\n  }\n\n  reviseQuizMinsRemaining(){\n    if(this.state.startedQuiz!==null){\n          var mins_remaining= getMinutesRemaining(this.state.startedQuiz.start_time, this.state.startedQuiz.duration_minutes);\n\n          if(mins_remaining>0){\n            console.log(mins_remaining);\n            const copied = Object.assign({}, this.state.startedQuiz);\n            //copied['mins_remaining']=mins_remaining;\n            this.setState({startedQuiz:copied});\n            localStorage.setItem('startedQuiz', JSON.stringify(copied));\n         }\n         else{\n           this.startedQuizSubmit();\n         }\n    }\n  }\n\n\n\n  isQuizStarted(quizId){\n    if(this.state.startedQuiz!==null&&this.state.startedQuiz.id===quizId)\n        return true;\n    else\n        return false;\n  }\n\n\n  loadProblems(){\n    let url='/api/getProblems';\n\n    if(this.state.currentProblemsPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentProblemsPage+'&pageSize='+this.state.pageSize;\n    }\n\n    this.setState({spinner:true});\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n        this.setState({problemsArray: data, spinner: false});\n    })\n  }\n\n  setProblems(arr){\n    this.setState({problemsArray:arr});\n  }\n\n  setProblemsPage(page){\n    this.setState({currentProblemsPage:page}, ()=>{this.loadProblems();});\n  }\n\n  nextProblemsPageClick(e){\n    let pageArray=getPageArray(this.state.currentProblemsPage, this.state.problemsArray===undefined||this.state.problemsArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentProblemsPage+1)){\n        this.setState({currentProblemsPage:this.state.currentProblemsPage+1}, ()=>{this.loadProblems()});\n    }\n  }\n\n  prevProblemsPageClick(e){\n    let pageArray=getPageArray(this.state.currentProblemsPage, this.state.problemsArray===undefined||this.state.problemsArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentProblemsPage-1)){\n        this.setState({currentProblemsPage:this.state.currentProblemsPage-1}, ()=>{this.loadProblems()});\n    }\n  }\n\n\n  loadQuizes(){\n    this.setState({spinner:true});\n    let url='/api/getQuizes';\n\n    if(this.state.currentQuizesPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentQuizesPage+'&pageSize='+this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n      //console.log(data);\n      this.setState({ quizesArray: data, spinner: false});\n    })\n  }\n\n  setQuizes(arr){\n    this.setState({quizesArray:arr});\n  }\n\n  setQuizesPage(page){\n    this.setState({currentQuizesPage:page}, ()=>{this.loadQuizes();});\n  }\n\n  nextQuizesPageClick(e){\n    let pageArray=getPageArray(this.state.currentQuizesPage, this.state.quizesArray===undefined||this.state.quizesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentQuizesPage+1)){\n        this.setState({currentQuizesPage:this.state.currentQuizesPage+1}, ()=>{this.loadQuizes()});\n    }\n  }\n\n  prevQuizesPageClick(e){\n    let pageArray=getPageArray(this.state.currentQuizesPage, this.state.quizesArray===undefined||this.state.quizesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentQuizesPage-1)){\n        this.setState({currentQuizesPage:this.state.currentQuizesPage-1}, ()=>{this.loadQuizes()});\n    }\n  }\n\n  loadUsers(){\n    this.setState({spinner:true});\n    let url='/api/getUsers';\n\n    if(this.state.currentUsersPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentUsersPage+'&pageSize='+this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n      this.setState({usersArray: data, spinner:false});\n    })\n  }\n\n  setUsers(arr){\n    this.setState({usersArray:arr});\n  }\n\n  setUsersPage(page){\n    this.setState({currentUsersPage:page}, ()=>{this.loadUsers();});\n  }\n\n  nextUsersPageClick(e){\n    let pageArray=getPageArray(this.state.currentUsersPage, this.state.usersArray===undefined||this.state.usersArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentUsersPage+1)){\n        this.setState({currentUsersPage:this.state.currentUsersPage+1}, ()=>{this.loadUsers()});\n    }\n  }\n\n  prevUsersPageClick(e){\n    let pageArray=getPageArray(this.state.currentUsersPage, this.state.usersArray===undefined||this.state.usersArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentUsersPage-1)){\n        this.setState({currentUsersPage:this.state.currentUsersPage-1}, ()=>{this.loadUsers()});\n    }\n  }\n\n  showSpinner(){\n    this.setState({spinner:true});\n  }\n\n  hideSpinner(){\n    this.setState({spinner:false});\n  }\n\n  handleAltLogin(strSource, response){\n    const AltLoginInitiate=(firstName, lastName, email, id, picture_url)=>{\n      var reqBody=\"userId=\"+encodeURIComponent(id);\n      reqBody+='&firstName='+encodeURIComponent(firstName);\n      reqBody+='&lastName='+encodeURIComponent(lastName);\n      reqBody+='&email='+encodeURIComponent(email);\n      reqBody+='&pictureUrl='+encodeURIComponent(picture_url);\n\n      fetch(`/api/mergeUser`, {\n        headers:{\n          'Accept':'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      })\n      .then(res=>res.json())\n      .then(data=>{\n          //console.log(data);\n       });\n       localStorage.setItem('loggedInUser', id);\n       localStorage.setItem('loggedInUserFullName', firstName+' '+lastName);\n       localStorage.setItem('admin', '0');\n       this.setState({errorMessage:null,\n                     loggedInUser: id,\n                     loggedInUserFullName: firstName+' '+lastName,\n                     admin: '0'\n                     });\n       //console.log(firstName+' '+lastName+' '+email+' '+id+' '+picture_url);\n    }\n    if(strSource==='facebook' && response.id!==undefined){\n      let fullName=response.name;\n      let firstName=fullName;\n      let lastName=\"\";\n      let arrName=fullName.split(\" \");\n      if(arrName.length>1){\n        firstName=arrName[0];\n        lastName=arrName[1];\n      }\n      let email=response.email;\n      let id=response.id;\n      let picture_url=response.picture.data.url;\n      AltLoginInitiate(firstName, lastName, email, id, picture_url);\n    }\n    else if(strSource==='google' && response.googleId!==undefined){\n      let id=response.googleId;\n      let picture_url=response.profileObj.imageUrl;\n      let email=response.profileObj.email;\n      let firstName=response.profileObj.givenName;\n      let lastName=response.profileObj.familyName;\n      AltLoginInitiate(firstName, lastName, email, id, picture_url);\n      //console.log(response);\n    }\n    //alert(strSource);\n  }\n\n  handleLoginSubmit(event){\n    if(this.state.userId===null\n        ||this.state.password===null\n        ||this.state.password.length===0\n        ||this.state.userId.length===0)\n    {\n      event.preventDefault();\n      this.setState({errorMessage: \"UserId/password cannot be empty\"})\n      return;\n    }\n    var reqBody=\"userId=\"+encodeURIComponent(this.state.userId);\n        reqBody+='&password='+encodeURIComponent(this.state.password);\n\n        fetch(`/api/login`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        })\n        .then(res=>res.json())\n        .then(\n          data=>{\n            console.log(data);\n            if(data.login===\"ok\"){\n              localStorage.setItem('loggedInUser', this.state.userId);\n              localStorage.setItem('loggedInUserFullName', data.full_name);\n              localStorage.setItem('admin', data.admin);\n              this.setState({errorMessage:null,\n                            loggedInUser: this.state.userId,\n                            loggedInUserFullName: data.full_name,\n                            admin: data.admin\n                            });\n            }\n            else{\n              this.setState({errorMessage: \"Login Failed: UserId/password Mismatch\"});\n            }\n          }\n        );\n    event.preventDefault();\n\n  }\n\n  userIdChange(e){\n    const newUserId=e.target.value;\n    this.setState({userId: newUserId});\n  }\n\n  passwordChange(e){\n    const newPassword=e.target.value;\n    this.setState({password: newPassword});\n  }\n\n  logoutUser(e){\n    //e.preventDefault();\n    let confirmMsg='Are you sure you want to logout?';\n    if(this.state.startedQuiz!==null){\n        confirmMsg+='There is an unsubmitted quiz: \\r\\n'+this.state.startedQuiz.description;\n    }\n    let b=window.confirm(confirmMsg)\n    if(b===true){\n      if(this.state.startedQuiz!==null)\n         this.startedQuizSubmit();\n      localStorage.setItem('loggedInUser', '');\n      localStorage.setItem('loggedInUserFullName','');\n      localStorage.setItem('admin', \"0\");\n      localStorage.removeItem('startedQuiz');\n      localStorage.removeItem('startedQuizAnswers');\n      this.setState({errorMessage:null, loggedInUser: '', admin:\"0\",\n                      startedQuiz:null, startedQuizAnswers:null});\n    }\n    else{\n      e.preventDefault();\n    }\n  }\n\n  setErrorMessage(errMsg){\n    this.setState({errorMessage:errMsg});\n  }\n\n\n    render(){\n      return (\n        <Router>\n          <div>\n            <Route path=\"/\" render={(props)=><Header\n                                                {...props}\n                                                userId={this.state.userId}\n                                                password={this.state.password}\n                                                errorMessage={this.state.errorMessage}\n                                                passwordChange={this.passwordChange}\n                                                userIdChange={this.userIdChange}\n                                                handleSubmit={this.handleLoginSubmit}\n                                                handleAltLogin={this.handleAltLogin}\n                                                logoutUser={this.logoutUser}\n                                                loggedInUser={this.state.loggedInUser}\n                                                loggedInUserFullName={this.state.loggedInUserFullName}\n                                                startedQuiz={this.state.startedQuiz}\n                                              />}\n            />\n            <Route path=\"/\" render={(props)=><DropdownMenuHover\n                                              {...props}\n                                               loggedInUser={this.state.loggedInUser}\n                                               setErrorMessage={this.setErrorMessage}\n                                              />\n                                    }\n             />\n             {\n               this.state.spinner===true?(<div id=\"spinner\" className=\"loadingContainer\"><div className=\"loading\"></div></div>):null\n             }\n            <Route exact path=\"/\" component={ImageSlider} />\n            <Route path=\"/problemsBrowse\" render={(props)=><ProblemsBrowse {...props}\n                                                            problemsArray={this.state.problemsArray}\n                                                            quizesArray={this.state.quizesArray}\n                                                            loadProblems={this.loadProblems}\n                                                            setProblems={this.setProblems}\n                                                            loadQuizes={this.loadQuizes}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                            currentPage={this.state.currentProblemsPage}\n                                                            pageArray={getPageArray(this.state.currentProblemsPage, this.state.problemsArray===undefined||this.state.problemsArray.length<this.state.pageSize)}\n                                                            nextPageClick={this.nextProblemsPageClick}\n                                                            prevPageClick={this.prevProblemsPageClick}\n                                                            setProblemsPage={this.setProblemsPage}\n                                                            loggedInUser={this.state.loggedInUser}\n                                                            admin={this.state.admin}\n                                                            />\n                                                 }\n            />\n            <Route path=\"/problemsSearch\" render={(props)=><ProblemsSearch {...props}\n                                                            loadProblems={this.loadProblems}\n                                                            problemsArray={this.state.problemsArray}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                           />\n                                                  }\n            />\n            <Route path=\"/problemInsert\" render={(props)=><ProblemInsert {...props}\n                                                           problemsArray={this.state.problemsArray}\n                                                           quizesArray={this.state.quizesArray}\n                                                           loadQuizes={this.loadQuizes}\n                                                           setProblems={this.setProblems}\n                                                           showSpinner={this.showSpinner}\n                                                           hideSpinner={this.hideSpinner}\n                                                           loggedInUser={this.state.loggedInUser}\n                                                          />\n                                                }\n            />\n            <Route path=\"/problemShowSelected/:id\" render={(props)=><ProblemShowSelected {...props}\n                                                                  loadProblems={this.loadProblems}\n                                                                  problemsArray={this.state.problemsArray}\n                                                                  setProblems={this.setProblems}\n                                                                  loadQuizes={this.loadQuizes}\n                                                                  quizesArray={this.state.quizesArray}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  admin={this.state.admin}\n                                                                  setErrorMessage={this.setErrorMessage}\n                                                                 />\n                                                       }\n            />\n            <Route path=\"/quizesBrowse\" render={(props)=><QuizesBrowse\n                                                          quizesArray={this.state.quizesArray}\n                                                          loadQuizes={this.loadQuizes}\n                                                          currentPage={this.state.currentQuizesPage}\n                                                          pageArray={getPageArray(this.state.currentQuizesPage, this.state.quizesArray===undefined||this.state.quizesArray.length<this.state.pageSize)}\n                                                          nextPageClick={this.nextQuizesPageClick}\n                                                          prevPageClick={this.prevQuizesPageClick}\n                                                          setQuizesPage={this.setQuizesPage}\n                                                          loggedInUser={this.state.loggedInUser}\n                                                          admin={this.state.admin}\n                                                        />\n                                               }\n             />\n             <Route path=\"/quizesSearch\" render={(props)=><QuizesSearch {...props}\n                                                             showSpinner={this.showSpinner}\n                                                             hideSpinner={this.hideSpinner}\n                                                             loadQuizes={this.loadQuizes}\n                                                             quizesArray={this.state.quizesArray}\n                                                            />\n                                                   }\n             />\n            <Route path=\"/quizInsert\" render={(props)=><QuizInsert {...props}\n                                                        quizesArray={this.state.quizesArray}\n                                                        coursesArray={this.state.coursesArray}\n                                                        loadCourses={this.loadCourses}\n                                                        setQuizes={this.setQuizes}\n                                                        showSpinner={this.showSpinner}\n                                                        hideSpinner={this.hideSpinner}\n                                                        loggedInUser={this.state.loggedInUser}\n                                                       />\n                                             }\n            />\n            <Route path=\"/quizShowSelected/:id\" render={(props)=><QuizShowSelected {...props}\n                                                                  loadQuizes={this.loadQuizes}\n                                                                  quizesArray={this.state.quizesArray}\n                                                                  setQuizes={this.setQuizes}\n                                                                  loadCourses={this.loadCourses}\n                                                                  coursesArray={this.state.coursesArray}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  startQuiz={this.startQuiz}\n                                                                  admin={this.state.admin}\n                                                                  setErrorMessage={this.setErrorMessage}\n                                                                  isQuizStarted={this.isQuizStarted}\n                                                                  optionChange={this.startedQuizOptionChange}\n                                                                  solutionChange={this.startedQuizSolutionChange}\n                                                                  submitQuiz={this.startedQuizSubmit}\n                                                                  startedQuizAnswers={this.state.startedQuizAnswers}\n                                                                 />\n                                                       }\n            />\n            <Route path=\"/quizInstances/:id\" render={(props)=><QuizInstances {...props}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  admin={this.state.admin}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                              />\n                                                    }\n            />\n            <Route path=\"/usersBrowse\" render={(props)=><UsersBrowse {...props}\n                                                          usersArray={this.state.usersArray}\n                                                          loadUsers={this.loadUsers}\n                                                          currentPage={this.state.currentUsersPage}\n                                                          pageArray={getPageArray(this.state.currentUsersPage, this.state.usersArray===undefined||this.state.usersArray.length<this.state.pageSize)}\n                                                          nextPageClick={this.nextUsersPageClick}\n                                                          prevPageClick={this.prevUsersPageClick}\n                                                          setUsersPage={this.setUsersPage}\n                                                        />\n                                              }\n            />\n            <Route path=\"/usersSearch\" render={(props)=><UsersSearch {...props}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                            loadUsers={this.loadUsers}\n                                                            usersArray={this.state.usersArray}\n                                                           />\n                                                  }\n            />\n            <Route path=\"/userInsert\" render={(props)=><UserInsert {...props}\n                                                        usersArray={this.state.usersArray}\n                                                        setUsers={this.setUsers}\n                                                        showSpinner={this.showSpinner}\n                                                        hideSpinner={this.hideSpinner}\n                                                       />\n                                             }\n            />\n            <Route path=\"/userShowSelected/:id\" render={(props)=><UserShowSelected {...props}\n                                                                  loadUsers={this.loadUsers}\n                                                                  usersArray={this.state.usersArray}\n                                                                  setUsers={this.setUsers}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  admin={this.state.admin}\n                                                                  setErrorMessage={this.setErrorMessage}\n                                                                 />\n                                                       }\n            />\n            <Route path=\"/userQuizInstances\" render={(props)=><UserQuizInstances {...props}\n                                                                showSpinner={this.showSpinner}\n                                                                hideSpinner={this.hideSpinner}\n                                                                loggedInUser={this.state.loggedInUser}\n                                                              />\n                                                    }\n            />\n            <Route path=\"/coursesBrowse\" render={(props)=><CoursesBrowse\n                                                           coursesArray={this.state.coursesArray}\n                                                           loadCourses={this.loadCourses}\n                                                           currentPage={this.state.currentCoursesPage}\n                                                           pageArray={getPageArray(this.state.currentCoursesPage, this.state.coursesArray===undefined||this.state.coursesArray.length<this.state.pageSize)}\n                                                           nextPageClick={this.nextCoursesPageClick}\n                                                           prevPageClick={this.prevCoursesPageClick}\n                                                           setCoursesPage={this.setCoursesPage}\n                                                          />\n                                                }\n            />\n            <Route path=\"/coursesSearch\" render={(props)=><CoursesSearch {...props}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                            loadCourses={this.loadCourses}\n                                                            coursesArray={this.state.coursesArray}\n                                                           />\n                                                  }\n            />\n            <Route path=\"/courseInsert\" render={(props)=><CourseInsert {...props}\n                                                          coursesArray={this.state.coursesArray}\n                                                          setCourses={this.setCourses}\n                                                          showSpinner={this.showSpinner}\n                                                          hideSpinner={this.hideSpinner}\n                                                          loggedInUser={this.state.loggedInUser}\n                                                          />\n                                               }\n            />\n            <Route path=\"/CourseShowSelected/:id\" render={(props)=><CourseShowSelected {...props}\n                                                                    loadCourses={this.loadCourses}\n                                                                    coursesArray={this.state.coursesArray}\n                                                                    setCourses={this.setCourses}\n                                                                    showSpinner={this.showSpinner}\n                                                                    hideSpinner={this.hideSpinner}\n                                                                    loggedInUser={this.state.loggedInUser}\n                                                                    admin={this.state.admin}\n                                                                    setErrorMessage={this.setErrorMessage}\n                                                                  />\n                                                          }\n            />\n            {this.props.loggedInUser!==\"\" && <Route path=\"/videoChat\" render={(props)=><ChatHome {...props}\n                                                                    loggedInUser={this.state.loggedInUser}\n                                                                    loggedInUserFullName={this.state.loggedInUserFullName}\n                                                                    admin={this.state.admin}\n                                                                    setErrorMessage={this.setErrorMessage}\n                                             />\n                                             }\n            />\n            }\n            {\n            <Route path=\"/errorLogin\" render={(props)=><ErrorLogin {...props}\n                                                        loggedInUser={this.state.loggedInUser}\n                                                        />\n                                             }\n            />\n            }\n\n          </div>\n        </Router>\n      )\n    }\n\n\n}\n\nfunction ErrorLogin({loggedInUser, ...props}) {\n  let history = useHistory();\n  let location = useLocation();\n\n  let { from } = location.state || { from: { pathname: \"/usersBrowse\" } };\n\n  console.log(loggedInUser);\n\n  if(loggedInUser!==\"\"){\n    return <Redirect to={from}/>\n    // history.replace(from);\n  }\n  else {\n      return (\n        <div style={{color:\"red\", fontSize: \"1.5em\",\n            paddingTop:\"1%\",\n            textAlign:\"center\"}}>\n            Error: User not Logged In!\n        </div>\n      );\n }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}