{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar debug = require('debug')('socket.io-parser');\n\nvar Emitter = require('component-emitter');\n\nvar binary = require('./binary');\n\nvar isArray = require('isarray');\n\nvar isBuf = require('./is-buffer');\n/**\n * Protocol version.\n *\n * @api public\n */\n\n\nexports.protocol = 4;\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\nvar ERROR_PACKET = exports.ERROR + '\"encode error\"';\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function (obj, callback) {\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    encodeAsBinary(obj, callback);\n  } else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\n\nfunction encodeAsString(obj) {\n  // first is type\n  var str = '' + obj.type; // attachments if we have them\n\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    str += obj.attachments + '-';\n  } // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n\n\n  if (obj.nsp && '/' !== obj.nsp) {\n    str += obj.nsp + ',';\n  } // immediately followed by the id\n\n\n  if (null != obj.id) {\n    str += obj.id;\n  } // json data\n\n\n  if (null != obj.data) {\n    var payload = tryStringify(obj.data);\n\n    if (payload !== false) {\n      str += payload;\n    } else {\n      return ERROR_PACKET;\n    }\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\nfunction tryStringify(str) {\n  try {\n    return JSON.stringify(str);\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\n\nfunction encodeAsBinary(obj, callback) {\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n/**\n * Mix in `Emitter` with Decoder.\n */\n\n\nEmitter(Decoder.prototype);\n/**\n * Decodes an encoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function (obj) {\n  var packet;\n\n  if (typeof obj === 'string') {\n    packet = decodeString(obj);\n\n    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {\n      // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n      if (this.reconstructor.reconPack.attachments === 0) {\n        this.emit('decoded', packet);\n      }\n    } else {\n      // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  } else if (isBuf(obj) || obj.base64) {\n    // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n\n      if (packet) {\n        // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  } else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\n\nfunction decodeString(str) {\n  var i = 0; // look up type\n\n  var p = {\n    type: Number(str.charAt(0))\n  };\n\n  if (null == exports.types[p.type]) {\n    return error('unknown packet type ' + p.type);\n  } // look up attachments if type binary\n\n\n  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {\n    var buf = '';\n\n    while (str.charAt(++i) !== '-') {\n      buf += str.charAt(i);\n      if (i == str.length) break;\n    }\n\n    if (buf != Number(buf) || str.charAt(i) !== '-') {\n      throw new Error('Illegal attachments');\n    }\n\n    p.attachments = Number(buf);\n  } // look up namespace (if any)\n\n\n  if ('/' === str.charAt(i + 1)) {\n    p.nsp = '';\n\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' === c) break;\n      p.nsp += c;\n      if (i === str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  } // look up id\n\n\n  var next = str.charAt(i + 1);\n\n  if ('' !== next && Number(next) == next) {\n    p.id = '';\n\n    while (++i) {\n      var c = str.charAt(i);\n\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n\n      p.id += str.charAt(i);\n      if (i === str.length) break;\n    }\n\n    p.id = Number(p.id);\n  } // look up json data\n\n\n  if (str.charAt(++i)) {\n    var payload = tryParse(str.substr(i));\n    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));\n\n    if (isPayloadValid) {\n      p.data = payload;\n    } else {\n      return error('invalid payload');\n    }\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\n\nDecoder.prototype.destroy = function () {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\n\nBinaryReconstructor.prototype.takeBinaryData = function (binData) {\n  this.buffers.push(binData);\n\n  if (this.buffers.length === this.reconPack.attachments) {\n    // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n\n  return null;\n};\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\n\nBinaryReconstructor.prototype.finishedReconstruction = function () {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(msg) {\n  return {\n    type: exports.ERROR,\n    data: 'parser error: ' + msg\n  };\n}","map":{"version":3,"sources":["/home/mathew/javascript/ischools/node_modules/socket.io-parser/index.js"],"names":["debug","require","Emitter","binary","isArray","isBuf","exports","protocol","types","CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK","Encoder","Decoder","ERROR_PACKET","prototype","encode","obj","callback","type","encodeAsBinary","encoding","encodeAsString","str","attachments","nsp","id","data","payload","tryStringify","JSON","stringify","e","writeEncoding","bloblessData","deconstruction","deconstructPacket","pack","packet","buffers","unshift","removeBlobs","reconstructor","add","decodeString","BinaryReconstructor","reconPack","emit","base64","Error","takeBinaryData","i","p","Number","charAt","error","buf","length","c","next","tryParse","substr","isPayloadValid","parse","destroy","finishedReconstruction","binData","push","reconstructPacket","msg"],"mappings":"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","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('socket.io-parser');\nvar Emitter = require('component-emitter');\nvar binary = require('./binary');\nvar isArray = require('isarray');\nvar isBuf = require('./is-buffer');\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'ACK',\n  'ERROR',\n  'BINARY_EVENT',\n  'BINARY_ACK'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\nvar ERROR_PACKET = exports.ERROR + '\"encode error\"';\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function(obj, callback){\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    encodeAsBinary(obj, callback);\n  } else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n\n  // first is type\n  var str = '' + obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    str += obj.attachments + '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' !== obj.nsp) {\n    str += obj.nsp + ',';\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    var payload = tryStringify(obj.data);\n    if (payload !== false) {\n      str += payload;\n    } else {\n      return ERROR_PACKET;\n    }\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\nfunction tryStringify(str) {\n  try {\n    return JSON.stringify(str);\n  } catch(e){\n    return false;\n  }\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an encoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function(obj) {\n  var packet;\n  if (typeof obj === 'string') {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments === 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  } else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  } else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var i = 0;\n  // look up type\n  var p = {\n    type: Number(str.charAt(0))\n  };\n\n  if (null == exports.types[p.type]) {\n    return error('unknown packet type ' + p.type);\n  }\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {\n    var buf = '';\n    while (str.charAt(++i) !== '-') {\n      buf += str.charAt(i);\n      if (i == str.length) break;\n    }\n    if (buf != Number(buf) || str.charAt(i) !== '-') {\n      throw new Error('Illegal attachments');\n    }\n    p.attachments = Number(buf);\n  }\n\n  // look up namespace (if any)\n  if ('/' === str.charAt(i + 1)) {\n    p.nsp = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' === c) break;\n      p.nsp += c;\n      if (i === str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' !== next && Number(next) == next) {\n    p.id = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      p.id += str.charAt(i);\n      if (i === str.length) break;\n    }\n    p.id = Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    var payload = tryParse(str.substr(i));\n    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));\n    if (isPayloadValid) {\n      p.data = payload;\n    } else {\n      return error('invalid payload');\n    }\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch(e){\n    return false;\n  }\n}\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function() {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(msg) {\n  return {\n    type: exports.ERROR,\n    data: 'parser error: ' + msg\n  };\n}\n"]},"metadata":{},"sourceType":"script"}