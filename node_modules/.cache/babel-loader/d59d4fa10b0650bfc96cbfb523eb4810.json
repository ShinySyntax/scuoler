{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools/src/components/ProblemsSearch.js\";\nimport React from 'react';\nimport '../css/Browse.css';\nimport data from './data';\nimport { loadProblems } from '../stores/appStoreActions';\n\nclass ProblemsSearch extends React.Component {\n  componentDidMount() {\n    //this.props.loadProblems();\n    let dispatch = this.props.dispatch;\n    loadProblems(dispatch);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchKey: '',\n      searchResults: [],\n      problemObjectsFiltered: [],\n      icons: data.icons\n    };\n    this.searchKeyChange = this.searchKeyChange.bind(this); //this.handleSearchSubmit=this.handleSearchSubmit.bind(this);\n\n    this.checkStatic = this.checkStatic.bind(this);\n  }\n\n  async checkStatic(currentValue) {\n    if (currentValue === this.state.searchKey && currentValue !== '') {\n      //console.log('static value'+currentValue);\n      var reqBody = \"searchKey=\" + encodeURIComponent(this.state.searchKey);\n      let searchResults = await fetch(`/api/searchProblems`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      });\n      let searchJson = await searchResults.json(); //console.log(searchJson);\n\n      let searchResultsFiltered = searchJson.filter(val => {\n        return this.state.problemObjectsFiltered.every(val1 => val.id !== val1.id);\n      });\n      this.setState({\n        'searchResults': searchResultsFiltered\n      });\n    } else if (currentValue === '') {\n      this.setState({\n        problemObjectsFiltered: [],\n        searchResults: []\n      });\n    }\n  }\n\n  searchKeyChange(e) {\n    let globalState = this.props.state;\n    const strSearchKey = e.target.value;\n    var timer = setTimeout(() => {\n      this.checkStatic(strSearchKey);\n    }, 1000);\n    const problemObjectsFiltered = strSearchKey !== '' ? globalState.problemsArray.filter(val => (val.description.toUpperCase() + val.solution.toUpperCase()).includes(strSearchKey.toUpperCase())) : []; //console.log(problemObjectsFiltered);\n\n    this.setState({\n      searchKey: strSearchKey,\n      problemObjectsFiltered: problemObjectsFiltered\n    });\n  }\n  /*  async handleSearchSubmit(e){\n      if(this.state.searchKey===''){\n        alert('Search key is empty/invalid')\n      }\n      else{\n        this.props.showSpinner();\n        var reqBody=\"searchKey=\"+encodeURIComponent(this.state.searchKey);\n        let searchResults=await fetch(`/api/searchProblems`, {\n                headers:{\n                  'Accept':'application/json',\n                  'Content-type': 'application/x-www-form-urlencoded'\n                },\n                method: 'POST',\n                body: reqBody\n              });\n        let searchJson=await searchResults.json();\n        //console.log(searchJson);\n        this.setState({'searchResults':searchJson});\n        this.props.hideSpinner();\n      }\n    }*/\n\n\n  render() {\n    let augmentedSearchResults = [];\n    this.state.problemObjectsFiltered.forEach((item, i) => {\n      let itemCopy = Object.assign({}, item);\n      let desc = item.description;\n\n      if (desc.toUpperCase().includes(this.state.searchKey.toUpperCase())) {\n        let foundIndex = desc.toUpperCase().indexOf(this.state.searchKey.toUpperCase());\n        itemCopy.description = desc.substring(0, foundIndex) + '<strong>' + this.state.searchKey + '</strong>' + desc.substring(foundIndex + this.state.searchKey.length);\n      }\n\n      let sol = item.solution;\n\n      if (sol.toUpperCase().includes(this.state.searchKey.toUpperCase())) {\n        let foundIndex = sol.toUpperCase().indexOf(this.state.searchKey.toUpperCase());\n        itemCopy.solution = sol.substring(0, foundIndex) + '<strong>' + this.state.searchKey + '</strong>' + sol.substring(foundIndex + this.state.searchKey.length);\n      }\n\n      augmentedSearchResults.push(itemCopy);\n    });\n    augmentedSearchResults = augmentedSearchResults.concat(this.state.searchResults);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"HomeLink\",\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      class: \"homeIcon\",\n      src: this.state.icons.home,\n      alt: \"back to home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, \"Search Problems\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"searchKey\",\n      style: {\n        width: '50%'\n      },\n      onChange: this.searchKeyChange,\n      placeholder: \"type your search key here\",\n      value: this.state.searchKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }), augmentedSearchResults.map(obj => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: `par$,${obj.id}`,\n      className: \"probParent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 18\n      }\n    }, \"Problem Description: \"), /*#__PURE__*/React.createElement(\"a\", {\n      href: `./problemShowSelected/${obj.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: `problemDescription$,${obj.id}`,\n      dangerouslySetInnerHTML: {\n        __html: obj.description\n      },\n      className: \"Question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 22\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 18\n      }\n    }, \"Solution: \"), /*#__PURE__*/React.createElement(\"a\", {\n      href: `./problemShowSelected/${obj.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: `solution$,${obj.id}`,\n      dangerouslySetInnerHTML: {\n        __html: obj.solution\n      },\n      className: \"Question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 22\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 18\n      }\n    }, \"Author: \"), /*#__PURE__*/React.createElement(\"a\", {\n      href: `https://${window.location.hostname}:${window.location.port}/userShowSelected/${obj.author_id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: `author$,${obj.id}`,\n      style: {\n        marginLeft: '30px'\n      },\n      className: \"Quiz\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 20\n      }\n    }, obj.author_id)), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"hidden\",\n      id: `quizId$,'${obj.id}`,\n      value: obj.quiz_id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 18\n      }\n    })))));\n  }\n\n}\n\nexport default ProblemsSearch;","map":{"version":3,"sources":["/home/mathew/javascript/ischools/src/components/ProblemsSearch.js"],"names":["React","data","loadProblems","ProblemsSearch","Component","componentDidMount","dispatch","props","constructor","state","searchKey","searchResults","problemObjectsFiltered","icons","searchKeyChange","bind","checkStatic","currentValue","reqBody","encodeURIComponent","fetch","headers","method","body","searchJson","json","searchResultsFiltered","filter","val","every","val1","id","setState","e","globalState","strSearchKey","target","value","timer","setTimeout","problemsArray","description","toUpperCase","solution","includes","render","augmentedSearchResults","forEach","item","i","itemCopy","Object","assign","desc","foundIndex","indexOf","substring","length","sol","push","concat","home","textAlign","width","map","obj","__html","window","location","hostname","port","author_id","marginLeft","quiz_id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../css/Browse.css';\nimport data from './data';\nimport {loadProblems} from '../stores/appStoreActions';\n\nclass ProblemsSearch extends React.Component{\n\n  componentDidMount(){\n    //this.props.loadProblems();\n    let dispatch=this.props.dispatch;\n    loadProblems(dispatch);\n  }\n\n  constructor(props){\n    super(props);\n    this.state={\n      searchKey:'',\n      searchResults:[],\n      problemObjectsFiltered:[],\n      icons: data.icons\n    }\n    this.searchKeyChange=this.searchKeyChange.bind(this);\n    //this.handleSearchSubmit=this.handleSearchSubmit.bind(this);\n    this.checkStatic=this.checkStatic.bind(this);\n  }\n\n  async checkStatic(currentValue){\n    if(currentValue===this.state.searchKey&&currentValue!==''){\n      //console.log('static value'+currentValue);\n      var reqBody=\"searchKey=\"+encodeURIComponent(this.state.searchKey);\n      let searchResults=await fetch(`/api/searchProblems`, {\n              headers:{\n                'Accept':'application/json',\n                'Content-type': 'application/x-www-form-urlencoded'\n              },\n              method: 'POST',\n              body: reqBody\n            });\n      let searchJson=await searchResults.json();\n      //console.log(searchJson);\n\n      let searchResultsFiltered=searchJson.filter((val)=>{return this.state.problemObjectsFiltered.every((val1)=>val.id!==val1.id)});\n      this.setState({'searchResults':searchResultsFiltered});\n    }\n    else if(currentValue===''){\n      this.setState({problemObjectsFiltered:[], searchResults:[]});\n    }\n  }\n\n  searchKeyChange(e){\n    let globalState=this.props.state;\n    const strSearchKey=e.target.value;\n    var timer = setTimeout(() => {this.checkStatic(strSearchKey);}, 1000);\n    const problemObjectsFiltered=strSearchKey!==''?globalState.problemsArray.filter((val)=>(val.description.toUpperCase()+val.solution.toUpperCase()).includes(strSearchKey.toUpperCase())):[];\n    //console.log(problemObjectsFiltered);\n    this.setState({searchKey: strSearchKey, problemObjectsFiltered: problemObjectsFiltered});\n  }\n\n/*  async handleSearchSubmit(e){\n    if(this.state.searchKey===''){\n      alert('Search key is empty/invalid')\n    }\n    else{\n      this.props.showSpinner();\n      var reqBody=\"searchKey=\"+encodeURIComponent(this.state.searchKey);\n      let searchResults=await fetch(`/api/searchProblems`, {\n              headers:{\n                'Accept':'application/json',\n                'Content-type': 'application/x-www-form-urlencoded'\n              },\n              method: 'POST',\n              body: reqBody\n            });\n      let searchJson=await searchResults.json();\n      //console.log(searchJson);\n      this.setState({'searchResults':searchJson});\n      this.props.hideSpinner();\n    }\n  }*/\n\n  render(){\n    let augmentedSearchResults=[];\n    this.state.problemObjectsFiltered.forEach((item, i) => {\n      let itemCopy=Object.assign({},item);\n      let desc=item.description;\n      if(desc.toUpperCase().includes(this.state.searchKey.toUpperCase())){\n          let foundIndex=desc.toUpperCase().indexOf(this.state.searchKey.toUpperCase());\n          itemCopy.description=desc.substring(0, foundIndex)+'<strong>'+this.state.searchKey+'</strong>'+desc.substring(foundIndex+this.state.searchKey.length);\n      }\n      let sol=item.solution;\n      if(sol.toUpperCase().includes(this.state.searchKey.toUpperCase())){\n          let foundIndex=sol.toUpperCase().indexOf(this.state.searchKey.toUpperCase());\n          itemCopy.solution=sol.substring(0, foundIndex)+'<strong>'+this.state.searchKey+'</strong>'+sol.substring(foundIndex+this.state.searchKey.length);\n      }\n      augmentedSearchResults.push(itemCopy);\n    });\n    augmentedSearchResults=augmentedSearchResults.concat(this.state.searchResults);\n    return (\n      <div>\n      <a class=\"HomeLink\" href=\"/\">\n          <img class=\"homeIcon\" src={this.state.icons.home} alt=\"back to home\"/>\n      {/*back to home*/}\n      </a>\n          <div class=\"h1\">\n            Search Problems\n          </div>\n          <div style={{textAlign: 'center'}}>\n                <input type=\"text\" id=\"searchKey\" style={{width:'50%'}}\n                onChange={this.searchKeyChange}\n                placeholder=\"type your search key here\"\n                value={this.state.searchKey}></input>\n                 {/*<input type=\"button\" value=\"Search\" onClick={this.handleSearchSubmit}/>*/}\n           </div>\n           <br/><br/>\n           {\n            augmentedSearchResults.map(obj=>(\n             <>\n             <hr />\n             <div id={`par$,${obj.id}`} className=\"probParent\">\n                 <b>Problem Description: </b>\n                 <a href={`./problemShowSelected/${obj.id}`}>\n                     <div id={`problemDescription$,${obj.id}`}\n                     dangerouslySetInnerHTML={{__html: obj.description}}\n                     className=\"Question\"></div>\n                 </a>\n                 <br/>\n                 <b>Solution: </b>\n                 <a href={`./problemShowSelected/${obj.id}`}>\n                     <div id={`solution$,${obj.id}`}\n                     dangerouslySetInnerHTML={{__html: obj.solution}}\n                     className=\"Question\"></div>\n                 </a>\n                  <br/>\n                 {/*<b>Source: </b> <a target=\"_blank\" href={obj.source!==null?\"https://\"+obj.source:null}>{obj.source}</a>\n                 <br/>*/}\n                 <b>Author: </b>\n                 <a href={`https://${window.location.hostname}:${window.location.port}/userShowSelected/${obj.author_id}`}>\n                   <div id={`author$,${obj.id}`} style={{marginLeft:'30px'}} className=\"Quiz\">\n                   {obj.author_id}\n                   </div>\n                 </a>\n                 <input type=\"hidden\" id={`quizId$,'${obj.id}`} value={obj.quiz_id}/>\n               </div>\n               </>\n               )\n             )\n           }\n      </div>\n    )\n  }\n\n}\n\nexport default ProblemsSearch;\n"]},"metadata":{},"sourceType":"module"}