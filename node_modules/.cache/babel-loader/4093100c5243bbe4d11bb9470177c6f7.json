{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/QuizInsert.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nclass QuizInsert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      spinner: false,\n      duration_minutes: 30,\n      description: '',\n      courseId: null,\n      courseName: 'UnAssigned'\n    };\n    this.baseState = {\n      description: ''\n    };\n    this.descriptionChange = this.descriptionChange.bind(this);\n    this.selectChange = this.selectChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.durationChange = this.durationChange.bind(this);\n  }\n\n  handleSubmit() {\n    if (this.state.description === '') {\n      alert('Description cannot be empty');\n      return;\n    } else if (this.state.duration_minutes === '') {\n      alert('Duration cannot be empty');\n      return;\n    } else if (isNaN(this.state.duration_minutes)) {\n      alert('Duration has to be a number');\n      return;\n    } else {\n      this.props.showSpinner();\n      var reqBody = \"quizDescription=\" + encodeURIComponent(this.state.description);\n      reqBody += \"&duration_minutes=\" + encodeURIComponent(this.state.duration_minutes);\n      reqBody += \"&courseId=\" + encodeURIComponent(this.state.courseId);\n      reqBody += '&authorName=' + encodeURIComponent(this.props.loggedInUser);\n      fetch(`/api/insertQuizAction`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      }).then(res => res.json()).then(data => {\n        //if(data.updatestatus==\"ok\")\n        let quizesArrayCopy = [...this.props.quizesArray];\n        let obj = {\n          id: data.quizId,\n          description: this.state.description,\n          duration_minutes: this.state.duration_minutes,\n          name: this.state.courseName,\n          author_id: this.props.loggedInUser\n        };\n        quizesArrayCopy.push(obj);\n        this.props.setQuizes(quizesArrayCopy);\n        this.setState(this.baseState);\n        this.props.hideSpinner();\n        alert('Quiz inserted');\n        window.location.assign(\"http://\" + window.location.hostname + ':' + window.location.port + \"/quizesBrowse\");\n      });\n    }\n  }\n\n  durationChange(e) {\n    this.setState({\n      duration_minutes: e.target.value\n    });\n  }\n\n  descriptionChange(e) {\n    //console.log(this.state.courseId+' '+this.state.courseName);\n    const new_description = e.target.value; //console.log(e.target.value);\n\n    this.setState({\n      description: new_description\n    });\n  }\n\n  componentDidMount() {\n    this.props.loadCourses();\n    if (this.state.courseId === undefined && this.props.coursesArray.length > 0) this.setState({\n      courseId: this.props.coursesArray[0].id,\n      courseName: this.props.coursesArray[0].name\n    });\n  }\n\n  selectChange(e) {\n    //console.log(e.target.value);\n    var new_courseId = e.target.value;\n    var new_courseName = e.target.options[e.target.selectedIndex].text;\n    this.setState({\n      courseId: new_courseId,\n      courseName: new_courseName\n    });\n  }\n\n  render() {\n    if (this.props.loggedInUser === '') {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/errorLogin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"HomeLink\",\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, \"back to home\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, \"Insert Quiz\"), /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, \"Duration (minutes):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"durationMinutes\",\n      style: {\n        marginLeft: '23px'\n      },\n      onChange: this.durationChange,\n      value: this.state.duration_minutes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 53\n      }\n    }), \"Quiz Description:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"quizDescription\",\n      name: \"quizDescription\",\n      type: \"text\",\n      rows: \"10\",\n      style: {\n        width: '90%'\n      },\n      onChange: this.descriptionChange,\n      value: this.state.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }), \"Course Id:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      id: \"courseId\",\n      onChange: this.selectChange,\n      name: \"courseId\",\n      required: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, \"UnAssigned\"), this.props.coursesArray.map(obj => /*#__PURE__*/React.createElement(\"option\", {\n      value: obj.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, obj.name))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 16\n      }\n    }), \"Author:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"authorName\",\n      name: \"authorName\",\n      type: \"text\",\n      style: {\n        width: '100px',\n        textAlign: 'center'\n      },\n      required: \"true\",\n      value: this.props.loggedInUser,\n      readonly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 20\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 1\n      }\n    }), \"         \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Insert Quiz\",\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\nexport default QuizInsert;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/QuizInsert.js"],"names":["React","Redirect","QuizInsert","Component","constructor","props","state","spinner","duration_minutes","description","courseId","courseName","baseState","descriptionChange","bind","selectChange","handleSubmit","durationChange","alert","isNaN","showSpinner","reqBody","encodeURIComponent","loggedInUser","fetch","headers","method","body","then","res","json","data","quizesArrayCopy","quizesArray","obj","id","quizId","name","author_id","push","setQuizes","setState","hideSpinner","window","location","assign","hostname","port","e","target","value","new_description","componentDidMount","loadCourses","undefined","coursesArray","length","new_courseId","new_courseName","options","selectedIndex","text","render","marginLeft","width","map","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {  Redirect } from 'react-router-dom';\n\nclass QuizInsert extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state={\n      spinner:false,\n      duration_minutes:30,\n      description:'',\n      courseId:null,\n      courseName:'UnAssigned'\n    }\n    this.baseState={\n      description:''\n    }\n    this.descriptionChange=this.descriptionChange.bind(this);\n    this.selectChange=this.selectChange.bind(this);\n    this.handleSubmit=this.handleSubmit.bind(this);\n    this.durationChange=this.durationChange.bind(this);\n  }\n\n  handleSubmit(){\n    if(this.state.description===''){\n      alert('Description cannot be empty');\n      return;\n    }\n    else if(this.state.duration_minutes===''){\n      alert('Duration cannot be empty');\n      return;\n    }\n    else if(isNaN(this.state.duration_minutes)){\n      alert('Duration has to be a number');\n      return;\n    }\n    else{\n      this.props.showSpinner();\n      var reqBody=\"quizDescription=\"+encodeURIComponent(this.state.description);\n          reqBody+=\"&duration_minutes=\"+encodeURIComponent(this.state.duration_minutes);\n      reqBody+=\"&courseId=\"+encodeURIComponent(this.state.courseId);\n      reqBody+='&authorName='+encodeURIComponent(this.props.loggedInUser);\n\n      fetch(`/api/insertQuizAction`, {\n        headers:{\n          'Accept':'application/json',\n          'Content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'POST',\n        body: reqBody\n      })\n      .then(res=>res.json())\n      .then(data=>{\n          //if(data.updatestatus==\"ok\")\n              let quizesArrayCopy=[...this.props.quizesArray];\n              let obj={\n                id: data.quizId,\n                description: this.state.description,\n                duration_minutes: this.state.duration_minutes,\n                name:this.state.courseName,\n                author_id:this.props.loggedInUser\n              };\n              quizesArrayCopy.push(obj);\n              this.props.setQuizes(quizesArrayCopy);\n              this.setState(this.baseState);\n              this.props.hideSpinner();\n              alert('Quiz inserted');\n              window.location.assign(\"http://\"+window.location.hostname+':'+window.location.port+\"/quizesBrowse\");\n      })\n\n    }\n\n  }\n\n  durationChange(e){\n    this.setState({duration_minutes:e.target.value})\n  }\n\n  descriptionChange(e){\n    //console.log(this.state.courseId+' '+this.state.courseName);\n    const new_description=e.target.value;\n    //console.log(e.target.value);\n    this.setState({description:new_description});\n  }\n\n  componentDidMount(){\n    this.props.loadCourses();\n    if(this.state.courseId===undefined && this.props.coursesArray.length>0)\n        this.setState({courseId:this.props.coursesArray[0].id, courseName:this.props.coursesArray[0].name});\n  }\n\n  selectChange(e){\n    //console.log(e.target.value);\n    var new_courseId=e.target.value;\n    var new_courseName=e.target.options[e.target.selectedIndex].text;\n    this.setState({courseId:new_courseId, courseName:new_courseName});\n  }\n\n  render(){\n    if(this.props.loggedInUser===''){\n      return <Redirect to=\"/errorLogin\"/>\n    }\n    return (\n      <div>\n      <a class=\"HomeLink\" href=\"/\">back to home</a>\n      <div class=\"h1\">\n        Insert Quiz\n      </div>\n        <fieldset>\n        Duration (minutes):<br/>\n        <input type=\"text\" id=\"durationMinutes\" style={{marginLeft:'23px'}}\n        onChange={this.durationChange}\n        value={this.state.duration_minutes}></input><br/>\n          Quiz Description:<br/>\n          <textarea id=\"quizDescription\" name=\"quizDescription\" type=\"text\" rows=\"10\"\n          style={{width:'90%'}}\n          onChange={this.descriptionChange}\n          value={this.state.description}\n           >\n          </textarea>\n          <br/>\n          <br/>\n          Course Id:<br/>\n          <select id=\"courseId\" onChange={this.selectChange} name=\"courseId\" required=\"true\">\n              <option value=\"null\">UnAssigned</option>\n          {\n              this.props.coursesArray.map(obj=>(\n                <option value={obj.id}>{obj.name}</option>\n                )\n              )\n          }\n          </select>\n          <br/><br/>\n          Author:<br/>\n          <input id=\"authorName\" name=\"authorName\" type=\"text\" style={{width:'100px', textAlign: 'center'}}\n          required=\"true\" value={this.props.loggedInUser} readonly>\n          </input> <br/><br/>\n<br/>         <input type=\"button\" value=\"Insert Quiz\" onClick={this.handleSubmit}/>\n        </fieldset>\n      </div>\n    )\n  }\n\n}\n\nexport default QuizInsert;\n"]},"metadata":{},"sourceType":"module"}