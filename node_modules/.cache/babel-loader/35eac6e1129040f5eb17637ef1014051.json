{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar transports = require('./transports/index');\n\nvar Emitter = require('component-emitter');\n\nvar debug = require('debug')('engine.io-client:socket');\n\nvar index = require('indexof');\n\nvar parser = require('engine.io-parser');\n\nvar parseuri = require('parseuri');\n\nvar parseqs = require('parseqs');\n/**\n * Module exports.\n */\n\n\nmodule.exports = Socket;\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket(uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure : typeof location !== 'undefined' && 'https:' === location.protocol;\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname || (typeof location !== 'undefined' ? location.hostname : 'localhost');\n  this.port = opts.port || (typeof location !== 'undefined' && location.port ? location.port : this.secure ? 443 : 80);\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.withCredentials = false !== opts.withCredentials;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.transportOptions = opts.transportOptions || {};\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  } // SSL options for Node.js client\n\n\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode; // detect ReactNative environment\n\n  this.isReactNative = typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative'; // other options for Node.js or ReactNative client\n\n  if (typeof self === 'undefined' || this.isReactNative) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  } // set on handshake\n\n\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null; // set on heartbeat\n\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = require('./transport');\nSocket.transports = require('./transports/index');\nSocket.parser = require('engine.io-parser');\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query); // append engine.io protocol identifier\n\n  query.EIO = parser.protocol; // transport name\n\n  query.transport = name; // per-transport options\n\n  var options = this.transportOptions[name] || {}; // session id if we already have one\n\n  if (this.id) query.sid = this.id;\n  var transport = new transports[name]({\n    query: query,\n    socket: this,\n    agent: options.agent || this.agent,\n    hostname: options.hostname || this.hostname,\n    port: options.port || this.port,\n    secure: options.secure || this.secure,\n    path: options.path || this.path,\n    forceJSONP: options.forceJSONP || this.forceJSONP,\n    jsonp: options.jsonp || this.jsonp,\n    forceBase64: options.forceBase64 || this.forceBase64,\n    enablesXDR: options.enablesXDR || this.enablesXDR,\n    withCredentials: options.withCredentials || this.withCredentials,\n    timestampRequests: options.timestampRequests || this.timestampRequests,\n    timestampParam: options.timestampParam || this.timestampParam,\n    policyPort: options.policyPort || this.policyPort,\n    pfx: options.pfx || this.pfx,\n    key: options.key || this.key,\n    passphrase: options.passphrase || this.passphrase,\n    cert: options.cert || this.cert,\n    ca: options.ca || this.ca,\n    ciphers: options.ciphers || this.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,\n    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,\n    extraHeaders: options.extraHeaders || this.extraHeaders,\n    forceNode: options.forceNode || this.forceNode,\n    localAddress: options.localAddress || this.localAddress,\n    requestTimeout: options.requestTimeout || this.requestTimeout,\n    protocols: options.protocols || void 0,\n    isReactNative: this.isReactNative\n  });\n  return transport;\n};\n\nfunction clone(obj) {\n  var o = {};\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\n\n\nSocket.prototype.open = function () {\n  var transport;\n\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n\n  this.readyState = 'opening'; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  } // set up transport\n\n\n  this.transport = transport; // set up transport listeners\n\n  transport.on('drain', function () {\n    self.onDrain();\n  }).on('packet', function (packet) {\n    self.onPacket(packet);\n  }).on('error', function (e) {\n    self.onError(e);\n  }).on('close', function () {\n    self.onClose('transport close');\n  });\n};\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, {\n    probe: 1\n  });\n  var failed = false;\n  var self = this;\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen() {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n\n    if (failed) return;\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{\n      type: 'ping',\n      data: 'probe'\n    }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n          cleanup();\n          self.setTransport(transport);\n          transport.send([{\n            type: 'upgrade'\n          }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport() {\n    if (failed) return; // Any callback called by transport should be ignored since now\n\n    failed = true;\n    cleanup();\n    transport.close();\n    transport = null;\n  } // Handle any error that happens while probing\n\n\n  function onerror(err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n    freezeTransport();\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose() {\n    onerror('transport closed');\n  } // When the socket is closed while we're probing\n\n\n  function onclose() {\n    onerror('socket closed');\n  } // When the socket is upgraded while we're probing\n\n\n  function onupgrade(to) {\n    if (transport && to.name !== transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  } // Remove all listeners on the transport and on self\n\n\n  function cleanup() {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n  transport.open();\n};\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush(); // we check for `readyState` in case an `open`\n  // listener already closed the socket\n\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n/**\n * Handles a packet.\n *\n * @api private\n */\n\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n    this.emit('packet', packet); // Socket is live - any packet counts\n\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(JSON.parse(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen(); // In case open handler closes socket\n\n  if ('closed' === this.readyState) return;\n  this.setPing(); // Prolong liveness of socket on heartbeat\n\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || self.pingInterval + self.pingTimeout);\n};\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\n\nSocket.prototype.write = Socket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n/**\n * Closes the connection.\n *\n * @api private\n */\n\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close() {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose() {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade() {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n/**\n * Called upon transport error\n *\n * @api private\n */\n\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this; // clear timers\n\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n    this.transport.removeAllListeners('close'); // ensure transport won't stay open\n\n    this.transport.close(); // ignore further transport communication\n\n    this.transport.removeAllListeners(); // set ready state\n\n    this.readyState = 'closed'; // clear session id\n\n    this.id = null; // emit close event\n\n    this.emit('close', reason, desc); // clean buffers after, so users can still\n    // grab the buffers on `close` event\n\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n\n  return filteredUpgrades;\n};","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/node_modules/engine.io-client/lib/socket.js"],"names":["transports","require","Emitter","debug","index","parser","parseuri","parseqs","module","exports","Socket","uri","opts","hostname","host","secure","protocol","port","query","location","agent","decode","upgrade","path","replace","forceJSONP","jsonp","forceBase64","enablesXDR","withCredentials","timestampParam","timestampRequests","transportOptions","readyState","writeBuffer","prevBufferLen","policyPort","rememberUpgrade","binaryType","onlyBinaryUpgrades","perMessageDeflate","threshold","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","undefined","forceNode","isReactNative","navigator","product","toLowerCase","self","extraHeaders","Object","keys","length","localAddress","id","upgrades","pingInterval","pingTimeout","pingIntervalTimer","pingTimeoutTimer","open","priorWebsocketSuccess","prototype","Transport","createTransport","name","clone","EIO","transport","options","sid","socket","requestTimeout","protocols","obj","o","i","hasOwnProperty","indexOf","setTimeout","emit","e","shift","setTransport","removeAllListeners","on","onDrain","packet","onPacket","onError","onClose","probe","failed","onTransportOpen","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","close","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","onOpen","l","onHandshake","JSON","parse","setPing","code","filterUpgrades","onHeartbeat","timeout","clearTimeout","ping","sendPacket","splice","writable","write","fn","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","filteredUpgrades","j"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar transports = require('./transports/index');\nvar Emitter = require('component-emitter');\nvar debug = require('debug')('engine.io-client:socket');\nvar index = require('indexof');\nvar parser = require('engine.io-parser');\nvar parseuri = require('parseuri');\nvar parseqs = require('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket (uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure\n    : (typeof location !== 'undefined' && 'https:' === location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (typeof location !== 'undefined' ? location.hostname : 'localhost');\n  this.port = opts.port || (typeof location !== 'undefined' && location.port\n      ? location.port\n      : (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.withCredentials = false !== opts.withCredentials;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.transportOptions = opts.transportOptions || {};\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode;\n\n  // detect ReactNative environment\n  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');\n\n  // other options for Node.js or ReactNative client\n  if (typeof self === 'undefined' || this.isReactNative) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  }\n\n  // set on handshake\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null;\n\n  // set on heartbeat\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = require('./transport');\nSocket.transports = require('./transports/index');\nSocket.parser = require('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // per-transport options\n  var options = this.transportOptions[name] || {};\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    query: query,\n    socket: this,\n    agent: options.agent || this.agent,\n    hostname: options.hostname || this.hostname,\n    port: options.port || this.port,\n    secure: options.secure || this.secure,\n    path: options.path || this.path,\n    forceJSONP: options.forceJSONP || this.forceJSONP,\n    jsonp: options.jsonp || this.jsonp,\n    forceBase64: options.forceBase64 || this.forceBase64,\n    enablesXDR: options.enablesXDR || this.enablesXDR,\n    withCredentials: options.withCredentials || this.withCredentials,\n    timestampRequests: options.timestampRequests || this.timestampRequests,\n    timestampParam: options.timestampParam || this.timestampParam,\n    policyPort: options.policyPort || this.policyPort,\n    pfx: options.pfx || this.pfx,\n    key: options.key || this.key,\n    passphrase: options.passphrase || this.passphrase,\n    cert: options.cert || this.cert,\n    ca: options.ca || this.ca,\n    ciphers: options.ciphers || this.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,\n    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,\n    extraHeaders: options.extraHeaders || this.extraHeaders,\n    forceNode: options.forceNode || this.forceNode,\n    localAddress: options.localAddress || this.localAddress,\n    requestTimeout: options.requestTimeout || this.requestTimeout,\n    protocols: options.protocols || void (0),\n    isReactNative: this.isReactNative\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function () {\n    self.onDrain();\n  })\n  .on('packet', function (packet) {\n    self.onPacket(packet);\n  })\n  .on('error', function (e) {\n    self.onError(e);\n  })\n  .on('close', function () {\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, { probe: 1 });\n  var failed = false;\n  var self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen () {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport () {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  // Handle any error that happens while probing\n  function onerror (err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose () {\n    onerror('transport closed');\n  }\n\n  // When the socket is closed while we're probing\n  function onclose () {\n    onerror('socket closed');\n  }\n\n  // When the socket is upgraded while we're probing\n  function onupgrade (to) {\n    if (transport && to.name !== transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  // Remove all listeners on the transport and on self\n  function cleanup () {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState ||\n      'closing' === this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(JSON.parse(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if ('closed' === this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close () {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose () {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade () {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n"]},"metadata":{},"sourceType":"script"}