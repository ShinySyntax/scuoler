{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/chat/ChatHome.js\";\nimport React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport { Redirect } from 'react-router-dom';\nimport '../../css/Chat.css';\nimport VideoExt from './VideoExt';\nimport SocketExt from './SocketExt';\nimport PeerConnectionExt from './PeerConnectionExt'; //const ENDPOINT = \"http://localhost:5000\";\n\nconst ICE_SERVERS = [{\n  urls: 'turn:numb.viagenie.ca',\n  credential: 'muazkh',\n  username: 'webrtc@live.com'\n}, {\n  url: 'turn:192.158.29.39:3478?transport=tcp',\n  credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n  username: '28224511:1379330808'\n}, {\n  url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n  credential: 'webrtc',\n  username: 'webrtc'\n}, {\n  url: 'turn:13.250.13.83:3478?transport=tcp',\n  credential: 'YzYNCouZM1mhqhmseWk6',\n  username: 'YzYNCouZM1mhqhmseWk6'\n}, {\n  urls: 'stun:stun.l.google.com:19302'\n},\n/*{ urls: 'stun:stun1.l.google.com:19302' },\n{ urls: 'stun:stun2.l.google.com:19302' },\n{ urls: 'stun:stun3.l.google.com:19302' },\n{ urls: 'stun:stun4.l.google.com:19302' },*/\n{\n  urls: 'stun:stun.ekiga.net'\n}];\n\nclass ChatHome extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dualShareHandler = mediaStream => {\n      this.setState({\n        localStream: mediaStream\n      }, () => {\n        //mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track, mediaStream));\n        mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n      });\n    };\n\n    this.errorHandler = error => {\n      console.log(error.message);\n    };\n\n    this.shareScreenChange = async e => {\n      let isChecked = e.target.checked;\n      let {\n        localStream\n      } = this.state; //console.log(e.target.checked);\n      //console.log('value '+e.target.value);\n\n      let dualStream;\n\n      if (isChecked) {\n        dualStream = await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      } else {\n        dualStream = await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if (localStream === null) {\n        //dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track,dualStream));\n        dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n        this.setState({\n          localStream: dualStream,\n          shareScreen: isChecked\n        });\n      } else {\n        //console.log(dualStream);\n        //console.log(localStream.getTracks());\n\n        /*let vidTrack, audTrack;\n        if(dualStream.getVideoTracks())\n          vidTrack= dualStream.getVideoTracks()[0];\n        if(dualStream.getAudioTracks())\n          audTrack=dualStream.getAudioTracks()[0];*/\n        let trackArr = [...localStream.getTracks()];\n\n        for (let i = 0; i < trackArr.length; i++) await localStream.removeTrack(trackArr[i]); //\n\n\n        const senders = this.peerConnection.getSenders();\n\n        for (let i = 0; i < dualStream.getTracks().length; i++) {\n          await localStream.addTrack(dualStream.getTracks()[i]);\n          senders.forEach(sender => {\n            if (dualStream.getTracks()[i].kind === sender.track.kind) sender.replaceTrack(dualStream.getTracks()[i]); //this.peerConnection.removeTrack(sender)\n          }); //this.peerConnection.addTrack(dualStream.getTracks()[i]);\n        }\n\n        console.log(this.peerConnection.getSenders()); //localStream.addTrack(vidTrack)\n        //const transceiver = this.peerConnection.getTransceivers()[0];\n        //transceiver['sender'].replaceTrack(vidTrack);\n\n        this.setState({\n          shareScreen: isChecked\n        });\n      }\n    };\n\n    this.onSocketConnect = () => {\n      let globalState = this.props.state;\n      this.socket.emit(\"map\", {\n        userName: globalState.loggedInUserFullName,\n        userId: globalState.loggedInUser\n      });\n      console.log(this.socket.id + ' mapped to ' + globalState.loggedInUserFullName);\n    };\n\n    this.onUpdateUserList = data => {\n      let userIds = [...this.state.userIds];\n      let newUserIds = data.userIds;\n      newUserIds.forEach(id => {\n        if (!userIds.includes(id)) userIds.push(id);\n      });\n      console.log('In update user list');\n      console.log(userIds);\n      console.log(data.nameMap);\n      this.setState({\n        userIds,\n        userNameMap: data.nameMap\n      });\n    };\n\n    this.callUser = async (userId, e) => {\n      let globalState = this.props.state;\n      console.log('Call User ' + userId + ' ' + this.state.userNameMap[userId]);\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(offer));\n      console.log(JSON.stringify(offer)); //console.log(this.peerConnection);\n\n      this.socket.emit(\"call-user\", {\n        offer,\n        to: userId,\n        from: globalState.loggedInUser\n      });\n      this.setState({\n        message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`\n      });\n    };\n\n    this.sendAnswer = async data => {\n      let globalState = this.props.state;\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n      console.log('call received');\n      console.log('answer \\n' + JSON.stringify(answer)); //console.log(this.peerConnection);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.from,\n        from: globalState.loggedInUser\n      });\n      this.setState({\n        callRcvd: true\n      });\n    };\n\n    this.onCallRcvd = async data => {\n      let globalState = this.props.state;\n      console.log('callRcvd ' + this.state.callRcvd);\n\n      if (!this.state.callRcvd && !this.state.answerRcvd) {\n        const confirmed = window.confirm(`User : ${data.from}\" wants to call you. Do accept this call?`);\n\n        if (!confirmed) {\n          this.socket.emit(\"reject-call\", {\n            to: data.from,\n            from: globalState.loggedInUser\n          });\n        } else {\n          await this.sendAnswer(data);\n        }\n      } else {\n        await this.sendAnswer(data);\n      }\n    };\n\n    this.onAnswerRcvd = async data => {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));\n      console.log('on Answer Rcvd' + JSON.stringify(data.answer));\n\n      if (!this.state.answerRcvd && !this.state.callRcvd) {\n        console.log(this.peerConnection); //this.callUser(data.socket, null).then();\n\n        this.setState({\n          answerRcvd: true\n        });\n      } //if(this.state.remoteStream.getTracks().length<=0)\n\n\n      await this.AckCallee(data.from);\n    };\n\n    this.AckCallee = async userId => {\n      let globalState = this.props.state;\n      console.log('Ack Callee  ' + userId + ' ' + this.state.userNameMap[userId]); //console.log(JSON.stringify(offer));\n      //console.log(this.peerConnection);\n\n      this.socket.emit(\"ack-callee\", {\n        to: userId,\n        from: globalState.loggedInUser\n      }); //this.setState({message: `Talking with: user: ${userName} (${sockId})`});\n    };\n\n    this.onAckCalleeRcvd = data => {\n      console.log('on ack callee received, callAttempts ' + this.callAttempts + ' remotePlaying' + this.isRemotePlaying);\n      this.callAttempts++; //if(this.state.remoteStream.getTracks().length<=0 && this.callAttempts<3){\n\n      if (!this.isRemotePlaying && this.callAttempts < 3) {\n        this.callUser(data.from, null).then();\n      }\n    };\n\n    this.onCallRejected = data => {\n      alert(`User: ${this.state.userNameMap[data.from]} (${data.from}) rejected your call.`); //unselectUsersFromList();\n    };\n\n    this.onRemoveUser = ({\n      userId\n    }) => {\n      let userIds = this.state.userIds.filter(val => val !== userId);\n      let userNameMap = {};\n\n      for (let attr in this.state.userNameMap) {\n        if (userIds.includes(attr)) userNameMap[attr] = this.state.userNameMap[attr];\n      }\n\n      this.setState({\n        userNameMap,\n        userIds\n      });\n    };\n\n    this.handleOnIceEvent = rtcPeerConnectionIceEvent => {\n      console.log('ICE event handle');\n\n      if (rtcPeerConnectionIceEvent.candidate && this.peerConnection) {\n        const {\n          candidate\n        } = rtcPeerConnectionIceEvent;\n        this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n      }\n    };\n\n    this.handleIceCandidate = async data => {\n      //console.log('new ice candidate to add');\n      //console.log(data);\n      const candidate = JSON.parse(data);\n      const revCandidate = new RTCIceCandidate({\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        candidate: candidate.candidate\n      });\n      await this.peerConnection.addIceCandidate(revCandidate);\n    };\n\n    this.setRemoteStream = remoteStream => {\n      this.setState({\n        remoteStream: remoteStream\n      });\n    };\n\n    this.onRemoteVideoPlaying = e => {\n      this.isRemotePlaying = true;\n      console.log('remote video playing event');\n      console.log(e);\n    };\n\n    this.state = {\n      callRcvd: false,\n      answerRcvd: false,\n      localStream: null,\n      remoteStream: null,\n      shareScreen: false,\n      userIds: [],\n      userNameMap: {},\n      message: 'Select a user on the left menu to start sharing.'\n    };\n    this.isRemotePlaying = false;\n    this.peerConnection = new RTCPeerConnection({\n      iceServers: ICE_SERVERS\n    }); //this.socket = socketIOClient(ENDPOINT);\n\n    this.socket = socketIOClient(); //console.log(this.socket);\n\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions = {\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.callAttempts = 0;\n  }\n\n  componentDidMount() {\n    let globalState = this.props.state;\n\n    if (globalStateloggedInUserFullName !== '') {\n      if (this.state.shareScreen) {\n        navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      } else {\n        navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        ;\n      }\n\n      const remoteStream = new MediaStream(); //console.log(remoteStream.getTracks());\n\n      this.setState({\n        remoteStream\n      });\n    }\n  }\n\n  render() {\n    let globalState = this.props.state;\n\n    if (globalState.loggedInUserFullName === '') {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/errorLogin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(SocketExt, {\n        socket: this.socket,\n        onSocketConnect: this.onSocketConnect,\n        onUpdateUserList: this.onUpdateUserList,\n        onRemoveUser: this.onRemoveUser,\n        onCallRcvd: this.onCallRcvd,\n        onAckCalleeRcvd: this.onAckCalleeRcvd,\n        onAnswerRcvd: this.onAnswerRcvd,\n        onCallRejected: this.onCallRejected,\n        handleIceCandidate: this.handleIceCandidate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(PeerConnectionExt, {\n        peerConnection: this.peerConnection,\n        localStream: this.state.localStream,\n        remoteStream: this.state.remoteStream,\n        setRemoteStream: this.setRemoteStream,\n        handleOnIceEvent: this.handleOnIceEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"active-users-panel\",\n        id: \"active-user-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"panel-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 25\n        }\n      }, \"Callable Users:\"), this.state.userIds.map(val => /*#__PURE__*/React.createElement(\"div\", {\n        id: val,\n        key: val,\n        onClick: e => {\n          this.callUser(val, e).then();\n        },\n        className: \"active-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 55\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 59\n        }\n      }, this.state.userNameMap[val], \"(\", val, \")\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-chat-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"talk-info\",\n        id: \"talking-with-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 29\n        }\n      }, this.state.message), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 29\n        }\n      }, \"Share Screen: \", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"shareScreen\",\n        checked: this.state.shareScreen,\n        onChange: this.shareScreenChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        muted: \"muted\",\n        mediaStream: this.state.localStream,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        mediaStream: this.state.remoteStream,\n        onPlaying: this.onRemoteVideoPlaying,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 31\n        }\n      })))));\n    }\n  }\n\n}\n\nexport default ChatHome;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/chat/ChatHome.js"],"names":["React","socketIOClient","Redirect","VideoExt","SocketExt","PeerConnectionExt","ICE_SERVERS","urls","credential","username","url","ChatHome","Component","constructor","props","dualShareHandler","mediaStream","setState","localStream","getTracks","forEach","track","peerConnection","addTrack","errorHandler","error","console","log","message","shareScreenChange","e","isChecked","target","checked","state","dualStream","navigator","mediaDevices","getDisplayMedia","displayMediaOptions","getUserMedia","camMediaOptions","shareScreen","trackArr","i","length","removeTrack","senders","getSenders","sender","kind","replaceTrack","onSocketConnect","globalState","socket","emit","userName","loggedInUserFullName","userId","loggedInUser","id","onUpdateUserList","data","userIds","newUserIds","includes","push","nameMap","userNameMap","callUser","offer","createOffer","setLocalDescription","RTCSessionDescription","JSON","stringify","to","from","sendAnswer","setRemoteDescription","answer","createAnswer","callRcvd","onCallRcvd","answerRcvd","confirmed","window","confirm","onAnswerRcvd","AckCallee","onAckCalleeRcvd","callAttempts","isRemotePlaying","then","onCallRejected","alert","onRemoveUser","filter","val","attr","handleOnIceEvent","rtcPeerConnectionIceEvent","candidate","handleIceCandidate","parse","revCandidate","RTCIceCandidate","sdpMLineIndex","addIceCandidate","setRemoteStream","remoteStream","onRemoteVideoPlaying","RTCPeerConnection","iceServers","video","cursor","audio","echoCancellation","noiseSuppression","componentDidMount","globalStateloggedInUserFullName","catch","MediaStream","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport {  Redirect } from 'react-router-dom';\nimport '../../css/Chat.css';\nimport VideoExt from './VideoExt';\nimport SocketExt from './SocketExt';\nimport PeerConnectionExt from './PeerConnectionExt';\n//const ENDPOINT = \"http://localhost:5000\";\nconst ICE_SERVERS=[\n  {\n    urls: 'turn:numb.viagenie.ca',\n    credential: 'muazkh',\n    username: 'webrtc@live.com'\n  },\n  {\n      url: 'turn:192.158.29.39:3478?transport=tcp',\n      credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n      username: '28224511:1379330808'\n  },\n  {\n      url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n      credential: 'webrtc',\n      username: 'webrtc'\n  },\n  {\n      url: 'turn:13.250.13.83:3478?transport=tcp',\n      credential: 'YzYNCouZM1mhqhmseWk6',\n      username: 'YzYNCouZM1mhqhmseWk6'\n  },\n  { urls: 'stun:stun.l.google.com:19302' },\n  /*{ urls: 'stun:stun1.l.google.com:19302' },\n  { urls: 'stun:stun2.l.google.com:19302' },\n  { urls: 'stun:stun3.l.google.com:19302' },\n  { urls: 'stun:stun4.l.google.com:19302' },*/\n  { urls: 'stun:stun.ekiga.net'}\n];\n\nclass ChatHome extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      callRcvd: false,\n      answerRcvd: false,\n      localStream: null,\n      remoteStream: null,\n      shareScreen: false,\n      userIds:[],\n      userNameMap:{},\n      message: 'Select a user on the left menu to start sharing.'\n    }\n    this.isRemotePlaying=false;\n    this.peerConnection = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n    //this.socket = socketIOClient(ENDPOINT);\n    this.socket = socketIOClient();\n    //console.log(this.socket);\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n\n    this.camMediaOptions={\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.callAttempts=0;\n  }\n\n  dualShareHandler=(mediaStream)=>{\n    this.setState({localStream: mediaStream}, ()=>{\n      //mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track, mediaStream));\n      mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n    });\n  };\n\n  errorHandler=error => {\n    console.log(error.message);\n  };\n\n  shareScreenChange=async (e)=>{\n      let isChecked=e.target.checked;\n      let {localStream}=this.state;\n      //console.log(e.target.checked);\n      //console.log('value '+e.target.value);\n      let dualStream;\n      if(isChecked){\n          dualStream=await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      }\n      else{\n        dualStream=await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if(localStream===null){\n        //dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track,dualStream));\n        dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n        this.setState({localStream: dualStream, shareScreen: isChecked})\n      }\n      else{\n        //console.log(dualStream);\n        //console.log(localStream.getTracks());\n        /*let vidTrack, audTrack;\n        if(dualStream.getVideoTracks())\n          vidTrack= dualStream.getVideoTracks()[0];\n        if(dualStream.getAudioTracks())\n          audTrack=dualStream.getAudioTracks()[0];*/\n\n        let trackArr=[...localStream.getTracks()];\n        for(let i=0;i<trackArr.length;i++)\n            await localStream.removeTrack(trackArr[i]);\n\n        //\n        const senders = this.peerConnection.getSenders();\n        for(let i=0;i<dualStream.getTracks().length;i++){\n            await localStream.addTrack(dualStream.getTracks()[i]);\n            senders.forEach((sender) => {\n                                if(dualStream.getTracks()[i].kind===sender.track.kind)\n                                    sender.replaceTrack(dualStream.getTracks()[i]);\n                                  //this.peerConnection.removeTrack(sender)\n                              });\n            //this.peerConnection.addTrack(dualStream.getTracks()[i]);\n        }\n        console.log(this.peerConnection.getSenders());\n\n        //localStream.addTrack(vidTrack)\n        //const transceiver = this.peerConnection.getTransceivers()[0];\n        //transceiver['sender'].replaceTrack(vidTrack);\n        this.setState({shareScreen: isChecked});\n      }\n\n  }\n\n  componentDidMount(){\n    let globalState=this.props.state;\n    if(globalStateloggedInUserFullName!==''){\n        if(this.state.shareScreen){\n            navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        }\n        else{\n          navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);;\n        }\n        const remoteStream = new MediaStream();\n        //console.log(remoteStream.getTracks());\n        this.setState({remoteStream});\n   }\n  }\n\n  onSocketConnect=()=>{\n    let globalState=this.props.state;\n    this.socket.emit(\"map\", {\n      userName: globalState.loggedInUserFullName,\n      userId: globalState.loggedInUser\n    });\n    console.log(this.socket.id+' mapped to '+globalState.loggedInUserFullName);\n  }\n\n  onUpdateUserList=(data) => {\n    let userIds=[...this.state.userIds];\n    let newUserIds=data.userIds;\n    newUserIds.forEach(id=>{\n      if(!userIds.includes(id))\n        userIds.push(id);\n    });\n    console.log('In update user list');\n    console.log(userIds);\n    console.log(data.nameMap);\n    this.setState({userIds, userNameMap: data.nameMap});\n  };\n\n\n  callUser=async (userId, e)=>{\n    let globalState=this.props.state;\n    console.log('Call User '+userId+' '+this.state.userNameMap[userId]);\n    const offer = await this.peerConnection.createOffer();\n    await this.peerConnection.setLocalDescription(new RTCSessionDescription(offer));\n    console.log(JSON.stringify(offer));\n    //console.log(this.peerConnection);\n\n    this.socket.emit(\"call-user\", {\n      offer,\n      to: userId,\n      from: globalState.loggedInUser\n    });\n    this.setState({message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`});\n  }\n\n\n\n  sendAnswer=async (data)=>{\n      let globalState=this.props.state;\n      await this.peerConnection.setRemoteDescription(\n        new RTCSessionDescription(data.offer)\n      );\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n\n      console.log('call received');\n      console.log('answer \\n'+JSON.stringify(answer));\n      //console.log(this.peerConnection);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.from,\n        from: globalState.loggedInUser\n      });\n      this.setState({callRcvd: true});\n  }\n\n  onCallRcvd=async (data) => {\n    let globalState=this.props.state;\n    console.log('callRcvd '+this.state.callRcvd);\n\n    if (!this.state.callRcvd && !this.state.answerRcvd) {\n      const confirmed = window.confirm(\n        `User : ${data.from}\" wants to call you. Do accept this call?`\n      );\n      if (!confirmed) {\n        this.socket.emit(\"reject-call\", {\n          to: data.from,\n          from: globalState.loggedInUser\n        });\n      }\n      else{\n        await this.sendAnswer(data);\n      }\n    }\n    else{\n         await this.sendAnswer(data);\n    }\n\n  }\n\n  onAnswerRcvd=async (data) => {\n    await this.peerConnection.setRemoteDescription(\n      new RTCSessionDescription(data.answer)\n    );\n    console.log('on Answer Rcvd'+JSON.stringify(data.answer));\n    if (!this.state.answerRcvd && !this.state.callRcvd)\n    {\n      console.log(this.peerConnection);\n      //this.callUser(data.socket, null).then();\n      this.setState({answerRcvd: true});\n    }\n    //if(this.state.remoteStream.getTracks().length<=0)\n    await this.AckCallee(data.from);\n  }\n\n  AckCallee=async (userId)=>{\n    let globalState=this.props.state;\n    console.log('Ack Callee  '+userId+' '+ this.state.userNameMap[userId]);\n    //console.log(JSON.stringify(offer));\n    //console.log(this.peerConnection);\n\n    this.socket.emit(\"ack-callee\", {\n      to: userId,\n      from: globalState.loggedInUser\n    });\n    //this.setState({message: `Talking with: user: ${userName} (${sockId})`});\n  }\n\n  onAckCalleeRcvd=(data)=>{\n      console.log('on ack callee received, callAttempts '+this.callAttempts+' remotePlaying'+this.isRemotePlaying);\n     this.callAttempts++;\n     //if(this.state.remoteStream.getTracks().length<=0 && this.callAttempts<3){\n     if(!this.isRemotePlaying && this.callAttempts<3){\n        this.callUser(data.from, null).then();\n     }\n  }\n\n  onCallRejected=data => {\n    alert(`User: ${this.state.userNameMap[data.from]} (${data.from}) rejected your call.`);\n    //unselectUsersFromList();\n  }\n\n  onRemoveUser=({ userId }) => {\n    let userIds=this.state.userIds.filter((val)=>val!==userId);\n    let userNameMap={};\n    for(let attr in this.state.userNameMap){\n      if(userIds.includes(attr))\n        userNameMap[attr]=this.state.userNameMap[attr];\n    }\n    this.setState({userNameMap, userIds});\n  }\n\n\n  handleOnIceEvent = (rtcPeerConnectionIceEvent) => {\n    console.log('ICE event handle')\n    if (rtcPeerConnectionIceEvent.candidate && this.peerConnection) {\n      const { candidate } = rtcPeerConnectionIceEvent;\n      this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n    }\n  }\n\n  handleIceCandidate = async (data) => {\n    //console.log('new ice candidate to add');\n    //console.log(data);\n   const candidate = JSON.parse(data);\n   const revCandidate=new RTCIceCandidate({\n     sdpMLineIndex: candidate.sdpMLineIndex,\n     candidate: candidate.candidate\n   });\n   await this.peerConnection.addIceCandidate(revCandidate);\n  }\n\n  setRemoteStream=(remoteStream) => {\n    this.setState({ remoteStream: remoteStream });\n  }\n\n  onRemoteVideoPlaying=(e)=>{\n    this.isRemotePlaying= true;\n    console.log('remote video playing event');\n    console.log(e);\n  }\n\n\n  render(){\n    let globalState=this.props.state;\n    if(globalState.loggedInUserFullName===''){\n      return <Redirect to=\"/errorLogin\"/>\n    }\n    else\n    {\n        return(\n          <div>\n                <SocketExt\n                  socket={this.socket}\n                  onSocketConnect={this.onSocketConnect}\n                  onUpdateUserList={this.onUpdateUserList}\n                  onRemoveUser={this.onRemoveUser}\n                  onCallRcvd={this.onCallRcvd}\n                  onAckCalleeRcvd={this.onAckCalleeRcvd}\n                  onAnswerRcvd={this.onAnswerRcvd}\n                  onCallRejected={this.onCallRejected}\n                  handleIceCandidate={this.handleIceCandidate}\n                />\n                <PeerConnectionExt\n                 peerConnection={this.peerConnection}\n                 localStream={this.state.localStream}\n                 remoteStream={this.state.remoteStream}\n                 setRemoteStream={this.setRemoteStream}\n                 handleOnIceEvent={this.handleOnIceEvent}\n                />\n                <div className=\"content-container\">\n                      <div className=\"active-users-panel\"  id=\"active-user-container\">\n                        <h3 className=\"panel-title\">Callable Users:</h3>\n                        {this.state.userIds.map(val=>(<div id={val} key={val} onClick={(e)=>{this.callUser(val, e).then()}} className=\"active-user\">\n                                                          <p className=\"username\">\n                                                            {this.state.userNameMap[val]}({val})\n                                                          </p>\n                                                         </div>\n                                                         )\n                                              )}\n                      </div>\n                      <div className=\"video-chat-container\">\n                            {/*<h2>Logged In User: {this.props.loggedInUserFullName}</h2>*/}\n                            <h2 className=\"talk-info\" id=\"talking-with-info\">\n                              {this.state.message}\n                            </h2>\n                            <div className=\"video-container\">\n                              Share Screen: <input type=\"checkbox\" id=\"shareScreen\" checked={this.state.shareScreen}\n                                              onChange={this.shareScreenChange}/>\n                              <br/>\n                              <VideoExt\n                              controls={true}\n                              muted=\"muted\"\n                              mediaStream={this.state.localStream} />\n                              <VideoExt\n                              controls\n                              mediaStream={this.state.remoteStream}\n                              onPlaying={this.onRemoteVideoPlaying}\n                              />\n                            </div>\n                      </div>\n                </div>\n          </div>\n        )\n      }\n  }\n}\n\nexport default ChatHome;\n"]},"metadata":{},"sourceType":"module"}