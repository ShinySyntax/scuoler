{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/MeetingShowSelected.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport socketIOClient from \"socket.io-client\";\nimport data from \"./data\";\nimport '../css/Chat.css';\nimport VideoExt from './chat/VideoExt';\nimport SocketX from './chat/SocketX';\nimport PeerConnectionExt from './chat/PeerConnectionExt';\nconst ICE_SERVERS = [{\n  urls: 'turn:numb.viagenie.ca',\n  credential: 'muazkh',\n  username: 'webrtc@live.com'\n}, {\n  url: 'turn:192.158.29.39:3478?transport=tcp',\n  credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n  username: '28224511:1379330808'\n}, {\n  url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n  credential: 'webrtc',\n  username: 'webrtc'\n}, {\n  url: 'turn:13.250.13.83:3478?transport=tcp',\n  credential: 'YzYNCouZM1mhqhmseWk6',\n  username: 'YzYNCouZM1mhqhmseWk6'\n}, {\n  urls: 'stun:stun.l.google.com:19302'\n},\n/*{ urls: 'stun:stun1.l.google.com:19302' },\n{ urls: 'stun:stun2.l.google.com:19302' },\n{ urls: 'stun:stun3.l.google.com:19302' },\n{ urls: 'stun:stun4.l.google.com:19302' },*/\n{\n  urls: 'stun:stun.ekiga.net'\n}];\n\nclass MeetingShowSelected extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dualShareHandler = mediaStream => {\n      console.log('in dual share handler');\n      this.setState({\n        localStream: mediaStream\n      }, () => {\n        for (let key in this.peerConnections) this.addLocalStreamToPeerCon(key);\n      });\n      /*if(this.props.loggedInUser===this.organiserId){\n        this.invokeCallOrganiser();\n      }*/\n    };\n\n    this.errorHandler = error => {\n      console.log(error.message);\n    };\n\n    this.shareScreenChange = async e => {\n      let isChecked = e.target.checked;\n      let {\n        localStream\n      } = this.state;\n      let dualStream;\n\n      if (isChecked) {\n        dualStream = await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      } else {\n        dualStream = await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if (localStream === null) {\n        for (let key in this.peerConnections) dualStream.getTracks().forEach(track => this.peerConnections[key].addTrack(track));\n\n        this.setState({\n          localStream: dualStream,\n          shareScreen: isChecked\n        });\n      } else {\n        let trackArr = [...localStream.getTracks()];\n\n        for (let i = 0; i < trackArr.length; i++) await localStream.removeTrack(trackArr[i]);\n\n        for (let i = 0; i < dualStream.getTracks().length; i++) {\n          await localStream.addTrack(dualStream.getTracks()[i]);\n\n          for (let key in this.peerConnections) {\n            const senders = this.peerConnections[key].getSenders();\n            senders.forEach(sender => {\n              if (dualStream.getTracks()[i].kind === sender.track.kind) sender.replaceTrack(dualStream.getTracks()[i]);\n            });\n          }\n        }\n\n        this.setState({\n          localStream,\n          shareScreen: isChecked\n        });\n      }\n    };\n\n    this.onSocketConnect = () => {\n      if (this.socket) {\n        this.socket.emit(\"map\", {\n          userName: this.props.loggedInUserFullName,\n          userId: this.props.loggedInUser\n        });\n        console.log(this.socket.id + ' mapped to ' + this.props.loggedInUser);\n      }\n    };\n\n    this.addLocalStreamToPeerCon = sourceId => {\n      if (this.state.localStream && this.isLocalStreamAdded[sourceId] !== true) {\n        console.log('local stream tracks length ' + this.state.localStream.getTracks().length);\n        this.state.localStream.getTracks().forEach(track => this.peerConnections[sourceId].addTrack(track));\n        this.isLocalStreamAdded[sourceId] = true;\n      }\n    };\n\n    this.onUpdateUserList = data => {\n      console.log('In update user list');\n      let userIds = [...this.state.userIds];\n      let newUserIds = data.userIds;\n      let remoteStreams = Object.assign({}, this.state.remoteStreams);\n      newUserIds.forEach(id => {\n        if (!userIds.includes(id)) {\n          userIds.push(id);\n          this.peerConnections[id] = new RTCPeerConnection({\n            iceServers: ICE_SERVERS\n          });\n          this.isLocalStreamAdded[id] = false;\n          this.callAttempts[id] = 0;\n          this.isRemotePlaying[id] = false;\n          this.addLocalStreamToPeerCon(id);\n          remoteStreams[id] = new MediaStream();\n\n          if (this.props.loggedInUser !== this.organiserId && this.organiserId === id) {\n            this.peerConnections[this.organiserId] = new RTCPeerConnection({\n              iceServers: ICE_SERVERS\n            });\n            this.isLocalStreamAdded[this.organiserId] = false;\n            this.callAttempts[this.organiserId] = 0;\n            this.isRemotePlaying[this.organiserId] = false;\n            this.addLocalStreamToPeerCon(this.organiserId);\n            remoteStreams[this.organiserId] = new MediaStream();\n            this.setState({\n              remoteStreams,\n              userIds,\n              userNameMap: data.nameMap\n            });\n          }\n        }\n      });\n      console.log(userIds);\n      console.log(data.nameMap);\n      this.setState({\n        remoteStreams,\n        userIds,\n        userNameMap: data.nameMap\n      }, () => {\n        /*if(this.props.loggedInUser===this.organiserId){\n              this.invokeCallOrganiser();\n        }*/\n      });\n    };\n\n    this.callUser = async userId => {\n      console.log('Call User ' + userId + ' ' + this.state.userNameMap[userId]); //if(this.isRemotePlaying[userId]===undefined)\n      //  this.isRemotePlaying[userId]=false;\n\n      if (this.callAttempts[userId] === undefined) this.callAttempts[userId] = 1;else this.callAttempts[userId]++;\n      console.log('remoteStreams');\n      console.log(this.state.remoteStreams[userId]);\n      console.log(this.peerConnections[userId]);\n\n      if (this.peerConnections[userId] === undefined) {\n        this.peerConnections[userId] = new RTCPeerConnection({\n          iceServers: ICE_SERVERS\n        });\n        this.isLocalStreamAdded[userId] = false;\n      }\n\n      this.addLocalStreamToPeerCon(userId);\n\n      if (this.state.remoteStreams[userId] === undefined) {\n        let remoteStreams = Object.assign({}, this.state.remoteStreams);\n        remoteStreams[userId] = new MediaStream();\n        this.setState({\n          remoteStreams\n        });\n      } //console.log(this.peerConnection);\n\n\n      console.log('Call Attempts ' + this.callAttempts[userId]);\n      const offer = await this.peerConnections[userId].createOffer();\n      await this.peerConnections[userId].setLocalDescription(new RTCSessionDescription(offer));\n      this.socket.emit(\"call-user\", {\n        offer,\n        to: userId,\n        from: this.props.loggedInUser\n      });\n      this.setState({\n        message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`\n      });\n    };\n\n    this.onCallRcvd = async data => {\n      console.log('callRcvd ');\n      console.log('remoteStreams');\n      console.log(this.state.remoteStreams[data.from]);\n      console.log(this.peerConnections[data.from]);\n\n      if (this.peerConnections[data.from] === undefined) {\n        this.peerConnections[data.from] = new RTCPeerConnection({\n          iceServers: ICE_SERVERS\n        });\n        this.isLocalStreamAdded[data.from] = false;\n      }\n\n      this.addLocalStreamToPeerCon(data.from);\n\n      if (this.state.remoteStreams[data.from] === undefined) {\n        let remoteStreams = Object.assign({}, this.state.remoteStreams);\n        remoteStreams[data.from] = new MediaStream();\n        this.setState({\n          remoteStreams\n        });\n      }\n\n      await this.peerConnections[data.from].setRemoteDescription(new RTCSessionDescription(data.offer));\n      const answer = await this.peerConnections[data.from].createAnswer();\n      console.log('answer \\n' + JSON.stringify(answer));\n      await this.peerConnections[data.from].setLocalDescription(new RTCSessionDescription(answer)); //console.log(this.peerConnections[data.from]);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.from,\n        from: this.props.loggedInUser\n      });\n    };\n\n    this.onAnswerRcvd = async data => {\n      console.log('on Answer Rcvd' + JSON.stringify(data.answer));\n      console.log(this.state.remoteStreams[data.from]);\n      console.log(this.peerConnections[data.from]);\n      this.addLocalStreamToPeerCon(data.from);\n\n      if (this.peerConnections[data.from].signalingState !== \"stable\") {\n        await this.peerConnections[data.from].setRemoteDescription(new RTCSessionDescription(data.answer));\n      }\n\n      this.socket.emit(\"ack-callee\", {\n        to: data.from,\n        from: this.props.loggedInUser\n      });\n    };\n\n    this.onAckCalleeRcvd = data => {\n      console.log('remoteStreams');\n      console.log(this.state.remoteStreams[data.from]);\n      console.log(this.peerConnections[data.from]);\n      console.log('on ack callee received, callAttempts ' + this.callAttempts[data.from] + ' remotePlaying' + this.isRemotePlaying[data.from]); //if(this.state.remoteStreams[data.from].getVideoTracks().length<=0 && this.state.remoteStreams[data.from].getAudioTracks().length<=0 && this.callAttempts[data.from]<3)\n\n      if (!this.isRemotePlaying[data.from] && this.callAttempts[data.from] < 4) {\n        this.callUser(data.from).then();\n      }\n    };\n\n    this.onRemoveUser = ({\n      userId\n    }) => {\n      console.log('removing user ' + userId);\n      let userIds = this.state.userIds.filter(val => val !== userId);\n      let userNameMap = {};\n\n      for (let attr in this.state.userNameMap) {\n        if (userIds.includes(attr)) userNameMap[attr] = this.state.userNameMap[attr];\n      }\n\n      delete this.peerConnections[userId];\n      let remoteStreams = Object.assign({}, this.state.remoteStreams);\n      delete remoteStreams[userId];\n      this.isLocalStreamAdded[userId] = false;\n      this.callAttempts[userId] = 0;\n      this.isRemotePlaying[userId] = false;\n      if (userId === this.organiserId) this.setState({\n        userNameMap,\n        remoteStreams,\n        userIds\n      }); //, callMadeByNonOrganiser: false\n      else this.setState({\n          userNameMap,\n          remoteStreams,\n          userIds\n        });\n    };\n\n    this.handleIceCandidate = async data => {\n      const candidate = JSON.parse(data);\n      const revCandidate = new RTCIceCandidate({\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        candidate: candidate.candidate\n      });\n\n      for (let key in this.peerConnections) {\n        if (this.peerConnections[key].remoteDescription) await this.peerConnections[key].addIceCandidate(revCandidate);\n      }\n    };\n\n    this.handleOnIceEvent = rtcPeerConnectionIceEvent => {\n      console.log('ICE event handle');\n\n      if (rtcPeerConnectionIceEvent.candidate && this.peerConnections) {\n        const {\n          candidate\n        } = rtcPeerConnectionIceEvent;\n        this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n      }\n    };\n\n    this.onRemoteVideoPlaying = (e, key) => {\n      this.isRemotePlaying[key] = true;\n      console.log('remote video playing event for remote user ' + key);\n      console.log(e);\n    };\n\n    this.state = {\n      localStream: null,\n      remoteStreams: {},\n      shareScreen: false,\n      //peerConnections: {},\n      icons: data.icons,\n      userIds: [],\n      userNameMap: {},\n      message: 'Select a user on the left menu to start sharing.'\n    };\n    const {\n      params\n    } = this.props.match;\n    this.meetingId = params.id;\n    this.organiserId = params.organiserId;\n    this.peerConnections = {};\n    this.callAttempts = {};\n    this.isRemotePlaying = {};\n    this.isLocalStreamAdded = {}; //this.socket = socketIOClient(ENDPOINT);\n\n    this.socket = socketIOClient(\"/\" + this.meetingId);\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions = {\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.loggedInUserFullName !== '') {\n      if (this.state.shareScreen) {\n        navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      } else {\n        navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      }\n    }\n  }\n\n  render() {\n    if (this.props.loggedInUserFullName === '') {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/errorLogin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 16\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }\n      }, \"Meeting Show Selected\", /*#__PURE__*/React.createElement(SocketX, {\n        socket: this.socket,\n        onSocketConnect: this.onSocketConnect,\n        onUpdateUserList: this.onUpdateUserList,\n        onRemoveUser: this.onRemoveUser,\n        onCallRcvd: this.onCallRcvd,\n        onAnswerRcvd: this.onAnswerRcvd,\n        onAckCalleeRcvd: this.onAckCalleeRcvd,\n        handleIceCandidate: this.handleIceCandidate\n        /*handleCallOrganiser={this.handleCallOrganiser}*/\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 14\n        }\n      }), Object.keys(this.state.remoteStreams).map(key => /*#__PURE__*/React.createElement(PeerConnectionExt, {\n        peerConnection: this.peerConnections[key],\n        localStream: this.state.localStream,\n        remoteStream: this.state.remoteStreams[key],\n        handleOnIceEvent: this.handleOnIceEvent,\n        userId: key,\n        callUser: this.callUser,\n        organiserId: this.organiserId,\n        loggedInUser: this.props.loggedInUser\n        /*invokeCallOrganiser={this.invokeCallOrganiser}*/\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"active-users-panel\",\n        id: \"active-user-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"panel-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 23\n        }\n      }, \"Callable Users:\"), this.state.userIds.map(val => /*#__PURE__*/React.createElement(\"div\", {\n        id: val,\n        key: val,\n        className: \"active-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 57\n        }\n      }, this.state.userNameMap[val], \"(\", val, \")\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-chat-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"talk-info\",\n        id: \"talking-with-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 27\n        }\n      }, this.state.message), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 27\n        }\n      }, \"Share Screen: \", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"shareScreen\",\n        checked: this.state.shareScreen,\n        onChange: this.shareScreenChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 43\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        muted: \"muted\",\n        mediaStream: this.state.localStream,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 29\n        }\n      }), Object.keys(this.state.remoteStreams).map(key => /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        mediaStream: this.state.remoteStreams[key],\n        onPlaying: e => this.onRemoteVideoPlaying(e, key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 32\n        }\n      }))))));\n    }\n  }\n\n}\n\nexport default MeetingShowSelected;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/MeetingShowSelected.js"],"names":["React","Redirect","socketIOClient","data","VideoExt","SocketX","PeerConnectionExt","ICE_SERVERS","urls","credential","username","url","MeetingShowSelected","Component","constructor","props","dualShareHandler","mediaStream","console","log","setState","localStream","key","peerConnections","addLocalStreamToPeerCon","errorHandler","error","message","shareScreenChange","e","isChecked","target","checked","state","dualStream","navigator","mediaDevices","getDisplayMedia","displayMediaOptions","getUserMedia","camMediaOptions","getTracks","forEach","track","addTrack","shareScreen","trackArr","i","length","removeTrack","senders","getSenders","sender","kind","replaceTrack","onSocketConnect","socket","emit","userName","loggedInUserFullName","userId","loggedInUser","id","sourceId","isLocalStreamAdded","onUpdateUserList","userIds","newUserIds","remoteStreams","Object","assign","includes","push","RTCPeerConnection","iceServers","callAttempts","isRemotePlaying","MediaStream","organiserId","userNameMap","nameMap","callUser","undefined","offer","createOffer","setLocalDescription","RTCSessionDescription","to","from","onCallRcvd","setRemoteDescription","answer","createAnswer","JSON","stringify","onAnswerRcvd","signalingState","onAckCalleeRcvd","then","onRemoveUser","filter","val","attr","handleIceCandidate","candidate","parse","revCandidate","RTCIceCandidate","sdpMLineIndex","remoteDescription","addIceCandidate","handleOnIceEvent","rtcPeerConnectionIceEvent","onRemoteVideoPlaying","icons","params","match","meetingId","video","cursor","audio","echoCancellation","noiseSuppression","componentDidMount","catch","render","keys","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {  Redirect } from 'react-router-dom';\nimport socketIOClient from \"socket.io-client\";\nimport data from \"./data\";\nimport '../css/Chat.css';\nimport VideoExt from './chat/VideoExt';\nimport SocketX from './chat/SocketX';\nimport PeerConnectionExt from './chat/PeerConnectionExt';\n\nconst ICE_SERVERS=[\n  {\n    urls: 'turn:numb.viagenie.ca',\n    credential: 'muazkh',\n    username: 'webrtc@live.com'\n  },\n  {\n      url: 'turn:192.158.29.39:3478?transport=tcp',\n      credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n      username: '28224511:1379330808'\n  },\n  {\n      url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n      credential: 'webrtc',\n      username: 'webrtc'\n  },\n  {\n      url: 'turn:13.250.13.83:3478?transport=tcp',\n      credential: 'YzYNCouZM1mhqhmseWk6',\n      username: 'YzYNCouZM1mhqhmseWk6'\n  },\n  { urls: 'stun:stun.l.google.com:19302' },\n  /*{ urls: 'stun:stun1.l.google.com:19302' },\n  { urls: 'stun:stun2.l.google.com:19302' },\n  { urls: 'stun:stun3.l.google.com:19302' },\n  { urls: 'stun:stun4.l.google.com:19302' },*/\n  { urls: 'stun:stun.ekiga.net'}\n];\n\nclass MeetingShowSelected extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      localStream: null,\n      remoteStreams: {},\n      shareScreen: false,\n      //peerConnections: {},\n      icons: data.icons,\n      userIds:[],\n      userNameMap:{},\n      message: 'Select a user on the left menu to start sharing.'\n    }\n    const {params}= this.props.match;\n\n    this.meetingId=params.id;\n    this.organiserId=params.organiserId;\n\n    this.peerConnections={};\n    this.callAttempts={};\n    this.isRemotePlaying={};\n    this.isLocalStreamAdded={};\n\n    //this.socket = socketIOClient(ENDPOINT);\n    this.socket = socketIOClient(\"/\"+this.meetingId);\n\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions={\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  dualShareHandler=(mediaStream)=>{\n    console.log('in dual share handler');\n    this.setState({localStream: mediaStream}, ()=>{\n       for(let key in this.peerConnections)\n          this.addLocalStreamToPeerCon(key);\n    });\n\n    /*if(this.props.loggedInUser===this.organiserId){\n      this.invokeCallOrganiser();\n    }*/\n  }\n\n\n  errorHandler=error => {\n    console.log(error.message);\n  }\n\n  shareScreenChange=async (e)=>{\n    let isChecked=e.target.checked;\n    let {localStream}=this.state;\n    let dualStream;\n    if(isChecked){\n        dualStream=await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n    }\n    else{\n      dualStream=await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n    }\n    if(localStream===null){\n      for(let key in this.peerConnections)\n          dualStream.getTracks().forEach(track => this.peerConnections[key].addTrack(track));\n\n      this.setState({localStream: dualStream, shareScreen: isChecked})\n    }\n    else{\n      let trackArr=[...localStream.getTracks()];\n      for(let i=0;i<trackArr.length;i++)\n          await localStream.removeTrack(trackArr[i]);\n\n      for(let i=0;i<dualStream.getTracks().length;i++){\n          await localStream.addTrack(dualStream.getTracks()[i]);\n          for(let key in this.peerConnections){\n              const senders = this.peerConnections[key].getSenders();\n              senders.forEach((sender) => {\n                                  if(dualStream.getTracks()[i].kind===sender.track.kind)\n                                      sender.replaceTrack(dualStream.getTracks()[i]);\n                                });\n          }\n\n      }\n      this.setState({localStream, shareScreen: isChecked});\n    }\n  }\n\n  componentDidMount(){\n    if(this.props.loggedInUserFullName!==''){\n        if(this.state.shareScreen){\n            navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        }\n        else{\n          navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        }\n   }\n  }\n\n  onSocketConnect=()=>{\n    if(this.socket){\n      this.socket.emit(\"map\", {\n        userName: this.props.loggedInUserFullName,\n        userId: this.props.loggedInUser\n      });\n      console.log(this.socket.id+' mapped to '+this.props.loggedInUser);\n    }\n  }\n\n  addLocalStreamToPeerCon=(sourceId)=>{\n    if(this.state.localStream && this.isLocalStreamAdded[sourceId]!==true){\n      console.log('local stream tracks length '+this.state.localStream.getTracks().length);\n      this.state.localStream.getTracks().forEach(track => this.peerConnections[sourceId].addTrack(track));\n      this.isLocalStreamAdded[sourceId]=true;\n    }\n  }\n\n  onUpdateUserList=(data) => {\n    console.log('In update user list');\n    let userIds=[...this.state.userIds];\n    let newUserIds=data.userIds;\n    let remoteStreams=Object.assign({}, this.state.remoteStreams);\n    newUserIds.forEach(id=>{\n      if(!userIds.includes(id)){\n        userIds.push(id);\n        this.peerConnections[id] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n        this.isLocalStreamAdded[id] = false;\n        this.callAttempts[id]=0;\n        this.isRemotePlaying[id]=false;\n        this.addLocalStreamToPeerCon(id);\n        remoteStreams[id] = new MediaStream();\n        if(this.props.loggedInUser!==this.organiserId && this.organiserId===id){\n           this.peerConnections[this.organiserId] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n           this.isLocalStreamAdded[this.organiserId] = false;\n           this.callAttempts[this.organiserId]=0;\n           this.isRemotePlaying[this.organiserId]=false;\n           this.addLocalStreamToPeerCon(this.organiserId);\n           remoteStreams[this.organiserId] = new MediaStream();\n           this.setState({remoteStreams, userIds, userNameMap: data.nameMap});\n       }\n      }\n    });\n    console.log(userIds);\n    console.log(data.nameMap);\n    this.setState({remoteStreams, userIds, userNameMap: data.nameMap}, ()=>{\n      /*if(this.props.loggedInUser===this.organiserId){\n            this.invokeCallOrganiser();\n      }*/\n    });\n  };\n\n  /*invokeCallOrganiser=()=>{\n      this.socket.emit(\"call-organiser\", {});\n  }*/\n\n/*  handleCallOrganiser=()=>{\n    console.log('handle call organiser');\n    if(this.state.userIds.includes(this.organiserId)){\n        this.callAttempts[this.organiserId]=0;\n        this.isRemotePlaying[this.organiserId]=false;\n        //this.callUser(this.organiserId).then();\n    }\n  }*/\n\n\n  callUser=async (userId)=>{\n    console.log('Call User '+userId+' '+this.state.userNameMap[userId]);\n    //if(this.isRemotePlaying[userId]===undefined)\n    //  this.isRemotePlaying[userId]=false;\n\n    if(this.callAttempts[userId]===undefined)\n      this.callAttempts[userId]=1;\n    else\n      this.callAttempts[userId]++;\n\n    console.log('remoteStreams');\n    console.log(this.state.remoteStreams[userId]);\n    console.log(this.peerConnections[userId]);\n\n    if(this.peerConnections[userId]===undefined){\n        this.peerConnections[userId] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n        this.isLocalStreamAdded[userId]=false;\n    }\n    this.addLocalStreamToPeerCon(userId);\n\n    if(this.state.remoteStreams[userId]===undefined){\n      let remoteStreams=Object.assign({}, this.state.remoteStreams);\n      remoteStreams[userId] = new MediaStream();\n      this.setState({remoteStreams});\n    }\n\n    //console.log(this.peerConnection);\n\n    console.log('Call Attempts '+this.callAttempts[userId]);\n    const offer = await this.peerConnections[userId].createOffer();\n    await this.peerConnections[userId].setLocalDescription(new RTCSessionDescription(offer));\n    this.socket.emit(\"call-user\", {\n      offer,\n      to: userId,\n      from: this.props.loggedInUser\n    });\n    this.setState({message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`});\n\n  }\n\n  onCallRcvd=async (data) => {\n    console.log('callRcvd ');\n    console.log('remoteStreams');\n    console.log(this.state.remoteStreams[data.from]);\n    console.log(this.peerConnections[data.from]);\n\n    if(this.peerConnections[data.from]===undefined){\n        this.peerConnections[data.from] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n        this.isLocalStreamAdded[data.from] = false;\n    }\n    this.addLocalStreamToPeerCon(data.from);\n\n    if(this.state.remoteStreams[data.from]===undefined){\n      let remoteStreams=Object.assign({}, this.state.remoteStreams);\n      remoteStreams[data.from]= new MediaStream();\n      this.setState({remoteStreams});\n    }\n\n    await this.peerConnections[data.from].setRemoteDescription(\n      new RTCSessionDescription(data.offer)\n    );\n    const answer = await this.peerConnections[data.from].createAnswer();\n    console.log('answer \\n'+JSON.stringify(answer));\n    await this.peerConnections[data.from].setLocalDescription(new RTCSessionDescription(answer));\n    //console.log(this.peerConnections[data.from]);\n    this.socket.emit(\"make-answer\", {\n      answer,\n      to: data.from,\n      from: this.props.loggedInUser\n    });\n  }\n\n  onAnswerRcvd=async (data) => {\n     console.log('on Answer Rcvd'+JSON.stringify(data.answer));\n     console.log(this.state.remoteStreams[data.from])\n     console.log(this.peerConnections[data.from])\n     this.addLocalStreamToPeerCon(data.from);\n     if(this.peerConnections[data.from].signalingState!== \"stable\"){\n       await this.peerConnections[data.from].setRemoteDescription(\n          new RTCSessionDescription(data.answer)\n       );\n     }\n     this.socket.emit(\"ack-callee\", {\n        to: data.from,\n        from: this.props.loggedInUser\n     });\n  }\n\n  onAckCalleeRcvd=(data)=>{\n    console.log('remoteStreams');\n    console.log(this.state.remoteStreams[data.from]);\n    console.log(this.peerConnections[data.from]);\n    console.log('on ack callee received, callAttempts '+this.callAttempts[data.from]+' remotePlaying'+this.isRemotePlaying[data.from]);\n    //if(this.state.remoteStreams[data.from].getVideoTracks().length<=0 && this.state.remoteStreams[data.from].getAudioTracks().length<=0 && this.callAttempts[data.from]<3)\n    if(!this.isRemotePlaying[data.from] && this.callAttempts[data.from]<4){\n      this.callUser(data.from).then();\n    }\n  }\n\n\n  onRemoveUser=({ userId }) => {\n    console.log('removing user '+userId);\n    let userIds=this.state.userIds.filter((val)=>val!==userId);\n    let userNameMap={};\n    for(let attr in this.state.userNameMap){\n      if(userIds.includes(attr))\n        userNameMap[attr]=this.state.userNameMap[attr];\n    }\n    delete this.peerConnections[userId];\n    let remoteStreams=Object.assign({}, this.state.remoteStreams);\n    delete remoteStreams[userId];\n    this.isLocalStreamAdded[userId] = false;\n    this.callAttempts[userId]=0;\n    this.isRemotePlaying[userId]=false;\n\n    if(userId===this.organiserId)\n      this.setState({userNameMap, remoteStreams, userIds}); //, callMadeByNonOrganiser: false\n    else\n      this.setState({userNameMap, remoteStreams, userIds});\n  }\n\n  handleIceCandidate = async (data) => {\n    const candidate = JSON.parse(data);\n    const revCandidate=new RTCIceCandidate({\n      sdpMLineIndex: candidate.sdpMLineIndex,\n      candidate: candidate.candidate\n    });\n    for(let key in this.peerConnections){\n      if(this.peerConnections[key].remoteDescription)\n        await this.peerConnections[key].addIceCandidate(revCandidate);\n    }\n  }\n\n  handleOnIceEvent = (rtcPeerConnectionIceEvent) => {\n    console.log('ICE event handle');\n    if (rtcPeerConnectionIceEvent.candidate && this.peerConnections) {\n        const { candidate } = rtcPeerConnectionIceEvent;\n        this.socket.emit(\"ice-candidate\",  JSON.stringify(candidate));\n    }\n  }\n\n  onRemoteVideoPlaying=(e, key)=>{\n    this.isRemotePlaying[key]=true;\n    console.log('remote video playing event for remote user '+key);\n    console.log(e);\n  }\n\n\n  render(){\n      if(this.props.loggedInUserFullName===''){\n        return <Redirect to=\"/errorLogin\"/>\n      }\n      else\n      {\n          return (\n            <div>\n            Meeting Show Selected\n             <SocketX\n              socket={this.socket}\n              onSocketConnect={this.onSocketConnect}\n              onUpdateUserList={this.onUpdateUserList}\n              onRemoveUser={this.onRemoveUser}\n              onCallRcvd={this.onCallRcvd}\n              onAnswerRcvd={this.onAnswerRcvd}\n              onAckCalleeRcvd={this.onAckCalleeRcvd}\n              handleIceCandidate={this.handleIceCandidate}\n              /*handleCallOrganiser={this.handleCallOrganiser}*/\n              />\n              {Object.keys(this.state.remoteStreams).map((key)=>(\n                <PeerConnectionExt\n                 peerConnection={this.peerConnections[key]}\n                 localStream={this.state.localStream}\n                 remoteStream={this.state.remoteStreams[key]}\n                 handleOnIceEvent={this.handleOnIceEvent}\n                 userId={key}\n                 callUser={this.callUser}\n                 organiserId={this.organiserId}\n                 loggedInUser={this.props.loggedInUser}\n                 /*invokeCallOrganiser={this.invokeCallOrganiser}*/\n                />\n              ))\n              }\n              <div className=\"content-container\">\n                    <div className=\"active-users-panel\"  id=\"active-user-container\">\n                      <h3 className=\"panel-title\">Callable Users:</h3>\n                      {this.state.userIds.map(val=>(<div id={val} key={val}    className=\"active-user\">\n                                                        <p className=\"username\">\n                                                          {this.state.userNameMap[val]}({val})\n                                                        </p>\n                                                       </div>\n                                                       )\n                                            )}\n                    </div>\n                    <div className=\"video-chat-container\">\n                          {/*<h2>Logged In User: {this.props.loggedInUserFullName}</h2>*/}\n                          <h2 className=\"talk-info\" id=\"talking-with-info\">\n                            {this.state.message}\n                          </h2>\n                          <div className=\"video-container\">\n                            Share Screen: <input type=\"checkbox\" id=\"shareScreen\" checked={this.state.shareScreen}\n                                            onChange={this.shareScreenChange}/>\n                            <br/>\n                            <VideoExt\n                             controls={true}\n                             muted=\"muted\"\n                             mediaStream={this.state.localStream} />\n                             {Object.keys(this.state.remoteStreams).map(key=>(\n                               <VideoExt\n                               controls\n                               mediaStream={this.state.remoteStreams[key]}\n                               onPlaying={(e)=>this.onRemoteVideoPlaying(e, key)}\n                               />\n                             ))}\n\n                          </div>\n                    </div>\n              </div>\n            </div>\n          )\n      }\n  }\n}\n\nexport default MeetingShowSelected;\n"]},"metadata":{},"sourceType":"module"}