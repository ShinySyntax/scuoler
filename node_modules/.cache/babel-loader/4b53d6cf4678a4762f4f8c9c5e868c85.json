{"ast":null,"code":"/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function () {\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // Use a lookup table to find the index.\n\n  var lookup = new Uint8Array(256);\n\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function (arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n        i,\n        len = bytes.length,\n        base64 = \"\";\n\n    for (i = 0; i < len; i += 3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if (len % 3 === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode = function (base64) {\n    var bufferLength = base64.length * 0.75,\n        len = base64.length,\n        i,\n        p = 0,\n        encoded1,\n        encoded2,\n        encoded3,\n        encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i + 1)];\n      encoded3 = lookup[base64.charCodeAt(i + 2)];\n      encoded4 = lookup[base64.charCodeAt(i + 3)];\n      bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n\n    return arraybuffer;\n  };\n})();","map":{"version":3,"sources":["/home/mathew/javascript/ischools/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js"],"names":["chars","lookup","Uint8Array","i","length","charCodeAt","exports","encode","arraybuffer","bytes","len","base64","substring","decode","bufferLength","p","encoded1","encoded2","encoded3","encoded4","ArrayBuffer"],"mappings":"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","sourcesContent":["/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n"]},"metadata":{},"sourceType":"script"}