{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/App.js\";\nimport React from 'react';\nimport './css/App.css';\nimport Header from './components/Header';\nimport ImageSlider from './components/ImageSlider';\nimport DropdownMenuHover from './components/DropdownMenuHover';\nimport ProblemsBrowse from './components/ProblemsBrowse';\nimport ProblemsSearch from './components/ProblemsSearch';\nimport ProblemInsert from './components/ProblemInsert';\nimport ProblemShowSelected from './components/ProblemShowSelected';\nimport QuizesBrowse from './components/QuizesBrowse';\nimport QuizesSearch from './components/QuizesSearch';\nimport QuizInsert from './components/QuizInsert';\nimport QuizShowSelected from './components/QuizShowSelected';\nimport QuizInstances from './components/QuizInstances';\nimport UsersBrowse from './components/UsersBrowse';\nimport UsersSearch from './components/UsersSearch';\nimport UserInsert from './components/UserInsert';\nimport UserShowSelected from './components/UserShowSelected';\nimport UserQuizInstances from './components/UserQuizInstances';\nimport CoursesBrowse from './components/CoursesBrowse';\nimport CourseInsert from './components/CourseInsert';\nimport CoursesSearch from './components/CoursesSearch';\nimport CourseShowSelected from './components/CourseShowSelected';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport { getMinutesRemaining, getCurrentTimestampString, getPageArray } from './utils/utils';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      spinner: false,\n      userId: null,\n      password: null,\n      loggedInUser: localStorage.getItem('loggedInUser') || '',\n      admin: localStorage.getItem('admin') || \"0\",\n      errorMessage: null,\n      coursesArray: [],\n      problemsArray: [],\n      currentProblemsPage: 1,\n      currentQuizesPage: 1,\n      currentCoursesPage: 1,\n      currentUsersPage: 1,\n      pageSize: 30,\n      quizesArray: [],\n      usersArray: [],\n      startedQuiz: localStorage.getItem('startedQuiz') ? JSON.parse(localStorage.getItem('startedQuiz')) : null,\n      startedQuizAnswers: localStorage.getItem('startedQuizAnswers') ? JSON.parse(localStorage.getItem('startedQuizAnswers')) : null\n    };\n    this.userIdChange = this.userIdChange.bind(this);\n    this.passwordChange = this.passwordChange.bind(this);\n    this.handleLoginSubmit = this.handleLoginSubmit.bind(this);\n    this.logoutUser = this.logoutUser.bind(this);\n    this.setErrorMessage = this.setErrorMessage.bind(this);\n    this.setCourses = this.setCourses.bind(this);\n    this.setProblems = this.setProblems.bind(this);\n    this.setQuizes = this.setQuizes.bind(this);\n    this.setUsers = this.setUsers.bind(this);\n    this.loadCourses = this.loadCourses.bind(this);\n    this.loadProblems = this.loadProblems.bind(this);\n    this.loadQuizes = this.loadQuizes.bind(this);\n    this.loadUsers = this.loadUsers.bind(this);\n    this.showSpinner = this.showSpinner.bind(this);\n    this.hideSpinner = this.hideSpinner.bind(this);\n    this.startQuiz = this.startQuiz.bind(this);\n    this.isQuizStarted = this.isQuizStarted.bind(this);\n    this.startedQuizOptionChange = this.startedQuizOptionChange.bind(this);\n    this.startedQuizSolutionChange = this.startedQuizSolutionChange.bind(this);\n    this.startedQuizSubmit = this.startedQuizSubmit.bind(this);\n    this.nextProblemsPageClick = this.nextProblemsPageClick.bind(this);\n    this.prevProblemsPageClick = this.prevProblemsPageClick.bind(this);\n    this.setProblemsPage = this.setProblemsPage.bind(this);\n    this.nextQuizesPageClick = this.nextQuizesPageClick.bind(this);\n    this.prevQuizesPageClick = this.prevQuizesPageClick.bind(this);\n    this.setQuizesPage = this.setQuizesPage.bind(this);\n    this.nextCoursesPageClick = this.nextCoursesPageClick.bind(this);\n    this.prevCoursesPageClick = this.prevCoursesPageClick.bind(this);\n    this.setCoursesPage = this.setCoursesPage.bind(this);\n    this.nextUsersPageClick = this.nextUsersPageClick.bind(this);\n    this.prevUsersPageClick = this.prevUsersPageClick.bind(this);\n    this.setUsersPage = this.setUsersPage.bind(this);\n  }\n\n  componentDidMount() {\n    var timer = setInterval(() => {\n      this.reviseQuizMinsRemaining();\n    }, 60000);\n  }\n\n  loadCourses() {\n    this.setState({\n      spinner: true\n    });\n    let url = '/api/getCourses';\n\n    if (this.state.currentCoursesPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentCoursesPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      //console.log(data);\n      this.setState({\n        coursesArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setCourses(arr) {\n    this.setState({\n      coursesArray: arr\n    });\n  }\n\n  setCoursesPage(page) {\n    this.setState({\n      currentCoursesPage: page\n    }, () => {\n      this.loadCourses();\n    });\n  }\n\n  nextCoursesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentCoursesPage, this.state.coursesArray === undefined || this.state.coursesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentCoursesPage + 1)) {\n      this.setState({\n        currentCoursesPage: this.state.currentCoursesPage + 1\n      }, () => {\n        this.loadCourses();\n      });\n    }\n  }\n\n  prevCoursesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentCoursesPage, this.state.coursesArray === undefined || this.state.coursesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentCoursesPage - 1)) {\n      this.setState({\n        currentCoursesPage: this.state.currentCoursesPage - 1\n      }, () => {\n        this.loadCourses();\n      });\n    }\n  }\n\n  startedQuizOptionChange(problemId, optionSelectedValue) {\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId] = optionSelectedValue;\n    this.setState({\n      startedQuizAnswers: copied\n    }); //console.log(copied);\n\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startedQuizSolutionChange(problemId, e) {\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId] = e.target.value;\n    this.setState({\n      startedQuizAnswers: copied\n    });\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startQuiz(quizObj) {\n    if (this.state.startedQuiz === null) {\n      if (window.confirm('Are you sure you want to start the quiz:\\r\\n' + quizObj.description) === true) {\n        quizObj['start_time'] = getCurrentTimestampString();\n        var reqBody = \"quizId=\" + encodeURIComponent(quizObj.id);\n        reqBody += '&startTime=' + encodeURIComponent(quizObj.start_time);\n        reqBody += '&userId=' + encodeURIComponent(this.state.loggedInUser);\n        fetch(`/api/quizStart`, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        }).then(res => res.json()).then(data => {\n          console.log(data);\n\n          if (data.insertstatus === \"ok\") {\n            quizObj['quizInstanceId'] = data.quizInstanceId;\n            this.setState({\n              startedQuiz: quizObj\n            });\n            localStorage.setItem('startedQuiz', JSON.stringify(quizObj));\n          } else {\n            alert('An error occurred in connecting to the server to start the quiz');\n          }\n        });\n      }\n    } else {\n      alert('There is already a started quiz:\\r\\n' + this.state.startedQuiz.description + '\\r\\n Please submit this quiz to start a new quiz');\n    }\n\n    console.log(this.state.startedQuiz);\n  }\n\n  startedQuizSubmit() {\n    //console.log(this.state.startedQuizAnswers);\n    //console.log(this.state.startedQuiz);\n    var reqBody = \"quizId=\" + encodeURIComponent(this.state.startedQuiz.id);\n    reqBody += \"&quizType=\" + encodeURIComponent(this.state.startedQuiz.type);\n    reqBody += '&quizInstanceId=' + encodeURIComponent(this.state.startedQuiz.quizInstanceId);\n    reqBody += '&answersObject=' + encodeURIComponent(JSON.stringify(this.state.startedQuizAnswers));\n    fetch(`/api/quizAnwersSubmit`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    }).then(res => res.json()).then(data => {\n      //console.log(data);\n      if (data.insertstatus === \"ok\") {\n        localStorage.removeItem('startedQuiz');\n        localStorage.removeItem('startedQuizAnswers');\n        this.setState({\n          startedQuiz: null,\n          startedQuizAnswers: null\n        });\n        alert('Quiz Submitted');\n      }\n    });\n  }\n\n  reviseQuizMinsRemaining() {\n    if (this.state.startedQuiz !== null) {\n      var mins_remaining = getMinutesRemaining(this.state.startedQuiz.start_time, this.state.startedQuiz.duration_minutes);\n\n      if (mins_remaining > 0) {\n        console.log(mins_remaining);\n        const copied = Object.assign({}, this.state.startedQuiz); //copied['mins_remaining']=mins_remaining;\n\n        this.setState({\n          startedQuiz: copied\n        });\n        localStorage.setItem('startedQuiz', JSON.stringify(copied));\n      } else {\n        this.startedQuizSubmit();\n      }\n    }\n  }\n\n  isQuizStarted(quizId) {\n    if (this.state.startedQuiz !== null && this.state.startedQuiz.id === quizId) return true;else return false;\n  }\n\n  loadProblems() {\n    let url = '/api/getProblems';\n\n    if (this.state.currentProblemsPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentProblemsPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    this.setState({\n      spinner: true\n    });\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        problemsArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setProblems(arr) {\n    this.setState({\n      problemsArray: arr\n    });\n  }\n\n  setProblemsPage(page) {\n    this.setState({\n      currentProblemsPage: page\n    }, () => {\n      this.loadProblems();\n    });\n  }\n\n  nextProblemsPageClick(e) {\n    let pageArray = getPageArray(this.state.currentProblemsPage, this.state.problemsArray === undefined || this.state.problemsArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentProblemsPage + 1)) {\n      this.setState({\n        currentProblemsPage: this.state.currentProblemsPage + 1\n      }, () => {\n        this.loadProblems();\n      });\n    }\n  }\n\n  prevProblemsPageClick(e) {\n    let pageArray = getPageArray(this.state.currentProblemsPage, this.state.problemsArray === undefined || this.state.problemsArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentProblemsPage - 1)) {\n      this.setState({\n        currentProblemsPage: this.state.currentProblemsPage - 1\n      }, () => {\n        this.loadProblems();\n      });\n    }\n  }\n\n  loadQuizes() {\n    this.setState({\n      spinner: true\n    });\n    let url = '/api/getQuizes';\n\n    if (this.state.currentQuizesPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentQuizesPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      //console.log(data);\n      this.setState({\n        quizesArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setQuizes(arr) {\n    this.setState({\n      quizesArray: arr\n    });\n  }\n\n  setQuizesPage(page) {\n    this.setState({\n      currentQuizesPage: page\n    }, () => {\n      this.loadQuizes();\n    });\n  }\n\n  nextQuizesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentQuizesPage, this.state.quizesArray === undefined || this.state.quizesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentQuizesPage + 1)) {\n      this.setState({\n        currentQuizesPage: this.state.currentQuizesPage + 1\n      }, () => {\n        this.loadQuizes();\n      });\n    }\n  }\n\n  prevQuizesPageClick(e) {\n    let pageArray = getPageArray(this.state.currentQuizesPage, this.state.quizesArray === undefined || this.state.quizesArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentQuizesPage - 1)) {\n      this.setState({\n        currentQuizesPage: this.state.currentQuizesPage - 1\n      }, () => {\n        this.loadQuizes();\n      });\n    }\n  }\n\n  loadUsers() {\n    this.setState({\n      spinner: true\n    });\n    let url = '/api/getUsers';\n\n    if (this.state.currentUsersPage !== undefined && this.state.pageSize !== undefined) {\n      url += '?currentPage=' + this.state.currentUsersPage + '&pageSize=' + this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        usersArray: data,\n        spinner: false\n      });\n    });\n  }\n\n  setUsers(arr) {\n    this.setState({\n      usersArray: arr\n    });\n  }\n\n  setUsersPage(page) {\n    this.setState({\n      currentUsersPage: page\n    }, () => {\n      this.loadUsers();\n    });\n  }\n\n  nextUsersPageClick(e) {\n    let pageArray = getPageArray(this.state.currentUsersPage, this.state.usersArray === undefined || this.state.usersArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentUsersPage + 1)) {\n      this.setState({\n        currentUsersPage: this.state.currentUsersPage + 1\n      }, () => {\n        this.loadUsers();\n      });\n    }\n  }\n\n  prevUsersPageClick(e) {\n    let pageArray = getPageArray(this.state.currentUsersPage, this.state.usersArray === undefined || this.state.usersArray.length < this.state.pageSize);\n\n    if (pageArray.includes(this.state.currentUsersPage - 1)) {\n      this.setState({\n        currentUsersPage: this.state.currentUsersPage - 1\n      }, () => {\n        this.loadUsers();\n      });\n    }\n  }\n\n  showSpinner() {\n    this.setState({\n      spinner: true\n    });\n  }\n\n  hideSpinner() {\n    this.setState({\n      spinner: false\n    });\n  }\n\n  handleLoginSubmit(event) {\n    if (this.state.userId === null || this.state.password === null || this.state.password.length === 0 || this.state.userId.length === 0) {\n      event.preventDefault();\n      this.setState({\n        errorMessage: \"UserId/password cannot be empty\"\n      });\n      return;\n    }\n\n    var reqBody = \"userId=\" + encodeURIComponent(this.state.userId);\n    reqBody += '&password=' + encodeURIComponent(this.state.password);\n    fetch(`/api/login`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: reqBody\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.login === \"ok\") {\n        localStorage.setItem('loggedInUser', this.state.userId);\n        localStorage.setItem('admin', data.admin);\n        this.setState({\n          errorMessage: null,\n          loggedInUser: this.state.userId,\n          admin: data.admin\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Login Failed: UserId/password Mismatch\"\n        });\n      }\n    });\n    event.preventDefault();\n  }\n\n  userIdChange(e) {\n    const newUserId = e.target.value;\n    this.setState({\n      userId: newUserId\n    });\n  }\n\n  passwordChange(e) {\n    const newPassword = e.target.value;\n    this.setState({\n      password: newPassword\n    });\n  }\n\n  logoutUser(e) {\n    //e.preventDefault();\n    let confirmMsg = 'Are you sure you want to logout?';\n\n    if (this.state.startedQuiz !== null) {\n      confirmMsg += 'There is an unsubmitted quiz: \\r\\n' + this.state.startedQuiz.description;\n    }\n\n    let b = window.confirm(confirmMsg);\n\n    if (b === true) {\n      if (this.state.startedQuiz !== null) this.startedQuizSubmit();\n      localStorage.setItem('loggedInUser', '');\n      localStorage.setItem('admin', \"0\");\n      localStorage.removeItem('startedQuiz');\n      localStorage.removeItem('startedQuizAnswers');\n      this.setState({\n        errorMessage: null,\n        loggedInUser: '',\n        admin: \"0\",\n        startedQuiz: null,\n        startedQuizAnswers: null\n      });\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  setErrorMessage(errMsg) {\n    this.setState({\n      errorMessage: errMsg\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: props => /*#__PURE__*/React.createElement(Header, Object.assign({}, props, {\n        userId: this.state.userId,\n        password: this.state.password,\n        errorMessage: this.state.errorMessage,\n        passwordChange: this.passwordChange,\n        userIdChange: this.userIdChange,\n        handleSubmit: this.handleLoginSubmit,\n        logoutUser: this.logoutUser,\n        loggedInUser: this.state.loggedInUser,\n        startedQuiz: this.state.startedQuiz,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 46\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: props => /*#__PURE__*/React.createElement(DropdownMenuHover, Object.assign({}, props, {\n        loggedInUser: this.state.loggedInUser,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 46\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 13\n      }\n    }), this.state.spinner === true ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"spinner\",\n      className: \"loadingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 43\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 90\n      }\n    })) : null, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: ImageSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemsBrowse\",\n      render: props => /*#__PURE__*/React.createElement(ProblemsBrowse, Object.assign({}, props, {\n        problemsArray: this.state.problemsArray,\n        quizesArray: this.state.quizesArray,\n        loadProblems: this.loadProblems,\n        setProblems: this.setProblems,\n        loadQuizes: this.loadQuizes,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        currentPage: this.state.currentProblemsPage,\n        pageArray: getPageArray(this.state.currentProblemsPage, this.state.problemsArray === undefined || this.state.problemsArray.length < this.state.pageSize),\n        nextPageClick: this.nextProblemsPageClick,\n        prevPageClick: this.prevProblemsPageClick,\n        setProblemsPage: this.setProblemsPage,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 60\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemsSearch\",\n      render: props => /*#__PURE__*/React.createElement(ProblemsSearch, Object.assign({}, props, {\n        loadProblems: this.loadProblems,\n        problemsArray: this.state.problemsArray,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 60\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemInsert\",\n      render: props => /*#__PURE__*/React.createElement(ProblemInsert, Object.assign({}, props, {\n        problemsArray: this.state.problemsArray,\n        quizesArray: this.state.quizesArray,\n        loadQuizes: this.loadQuizes,\n        setProblems: this.setProblems,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/problemShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(ProblemShowSelected, Object.assign({}, props, {\n        loadProblems: this.loadProblems,\n        problemsArray: this.state.problemsArray,\n        setProblems: this.setProblems,\n        loadQuizes: this.loadQuizes,\n        quizesArray: this.state.quizesArray,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 69\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizesBrowse\",\n      render: props => /*#__PURE__*/React.createElement(QuizesBrowse, {\n        quizesArray: this.state.quizesArray,\n        loadQuizes: this.loadQuizes,\n        currentPage: this.state.currentQuizesPage,\n        pageArray: getPageArray(this.state.currentQuizesPage, this.state.quizesArray === undefined || this.state.quizesArray.length < this.state.pageSize),\n        nextPageClick: this.nextQuizesPageClick,\n        prevPageClick: this.prevQuizesPageClick,\n        setQuizesPage: this.setQuizesPage,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 58\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizesSearch\",\n      render: props => /*#__PURE__*/React.createElement(QuizesSearch, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loadQuizes: this.loadQuizes,\n        quizesArray: this.state.quizesArray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizInsert\",\n      render: props => /*#__PURE__*/React.createElement(QuizInsert, Object.assign({}, props, {\n        quizesArray: this.state.quizesArray,\n        coursesArray: this.state.coursesArray,\n        loadCourses: this.loadCourses,\n        setQuizes: this.setQuizes,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 56\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(QuizShowSelected, Object.assign({}, props, {\n        loadQuizes: this.loadQuizes,\n        quizesArray: this.state.quizesArray,\n        setQuizes: this.setQuizes,\n        loadCourses: this.loadCourses,\n        coursesArray: this.state.coursesArray,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        startQuiz: this.startQuiz,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        isQuizStarted: this.isQuizStarted,\n        optionChange: this.startedQuizOptionChange,\n        solutionChange: this.startedQuizSolutionChange,\n        submitQuiz: this.startedQuizSubmit,\n        startedQuizAnswers: this.state.startedQuizAnswers,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 66\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/quizInstances/:id\",\n      render: props => /*#__PURE__*/React.createElement(QuizInstances, Object.assign({}, props, {\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 63\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/usersBrowse\",\n      render: props => /*#__PURE__*/React.createElement(UsersBrowse, Object.assign({}, props, {\n        usersArray: this.state.usersArray,\n        loadUsers: this.loadUsers,\n        currentPage: this.state.currentUsersPage,\n        pageArray: getPageArray(this.state.currentUsersPage, this.state.usersArray === undefined || this.state.usersArray.length < this.state.pageSize),\n        nextPageClick: this.nextUsersPageClick,\n        prevPageClick: this.prevUsersPageClick,\n        setUsersPage: this.setUsersPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 57\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/usersSearch\",\n      render: props => /*#__PURE__*/React.createElement(UsersSearch, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loadUsers: this.loadUsers,\n        usersArray: this.state.usersArray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 57\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/userInsert\",\n      render: props => /*#__PURE__*/React.createElement(UserInsert, Object.assign({}, props, {\n        usersArray: this.state.usersArray,\n        setUsers: this.setUsers,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 56\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/userShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(UserShowSelected, Object.assign({}, props, {\n        loadUsers: this.loadUsers,\n        usersArray: this.state.usersArray,\n        setUsers: this.setUsers,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 66\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/userQuizInstances\",\n      render: props => /*#__PURE__*/React.createElement(UserQuizInstances, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 63\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/coursesBrowse\",\n      render: props => /*#__PURE__*/React.createElement(CoursesBrowse, {\n        coursesArray: this.state.coursesArray,\n        loadCourses: this.loadCourses,\n        currentPage: this.state.currentCoursesPage,\n        pageArray: getPageArray(this.state.currentCoursesPage, this.state.coursesArray === undefined || this.state.coursesArray.length < this.state.pageSize),\n        nextPageClick: this.nextCoursesPageClick,\n        prevPageClick: this.prevCoursesPageClick,\n        setCoursesPage: this.setCoursesPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 59\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/coursesSearch\",\n      render: props => /*#__PURE__*/React.createElement(CoursesSearch, Object.assign({}, props, {\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loadCourses: this.loadCourses,\n        coursesArray: this.state.coursesArray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/courseInsert\",\n      render: props => /*#__PURE__*/React.createElement(CourseInsert, Object.assign({}, props, {\n        coursesArray: this.state.coursesArray,\n        setCourses: this.setCourses,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 58\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/CourseShowSelected/:id\",\n      render: props => /*#__PURE__*/React.createElement(CourseShowSelected, Object.assign({}, props, {\n        loadCourses: this.loadCourses,\n        coursesArray: this.state.coursesArray,\n        setCourses: this.setCourses,\n        showSpinner: this.showSpinner,\n        hideSpinner: this.hideSpinner,\n        loggedInUser: this.state.loggedInUser,\n        admin: this.state.admin,\n        setErrorMessage: this.setErrorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 68\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 13\n      }\n    }), this.state.loggedInUser === \"\" && /*#__PURE__*/React.createElement(Route, {\n      path: \"/errorLogin\",\n      render: props => /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"red\",\n          fontSize: \"1.5em\",\n          paddingTop: \"1%\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 89\n        }\n      }, \"Error: User not Logged In!\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 45\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/App.js"],"names":["React","Header","ImageSlider","DropdownMenuHover","ProblemsBrowse","ProblemsSearch","ProblemInsert","ProblemShowSelected","QuizesBrowse","QuizesSearch","QuizInsert","QuizShowSelected","QuizInstances","UsersBrowse","UsersSearch","UserInsert","UserShowSelected","UserQuizInstances","CoursesBrowse","CourseInsert","CoursesSearch","CourseShowSelected","Route","BrowserRouter","Router","getMinutesRemaining","getCurrentTimestampString","getPageArray","App","Component","constructor","props","state","spinner","userId","password","loggedInUser","localStorage","getItem","admin","errorMessage","coursesArray","problemsArray","currentProblemsPage","currentQuizesPage","currentCoursesPage","currentUsersPage","pageSize","quizesArray","usersArray","startedQuiz","JSON","parse","startedQuizAnswers","userIdChange","bind","passwordChange","handleLoginSubmit","logoutUser","setErrorMessage","setCourses","setProblems","setQuizes","setUsers","loadCourses","loadProblems","loadQuizes","loadUsers","showSpinner","hideSpinner","startQuiz","isQuizStarted","startedQuizOptionChange","startedQuizSolutionChange","startedQuizSubmit","nextProblemsPageClick","prevProblemsPageClick","setProblemsPage","nextQuizesPageClick","prevQuizesPageClick","setQuizesPage","nextCoursesPageClick","prevCoursesPageClick","setCoursesPage","nextUsersPageClick","prevUsersPageClick","setUsersPage","componentDidMount","timer","setInterval","reviseQuizMinsRemaining","setState","url","undefined","fetch","headers","then","res","json","data","arr","page","e","pageArray","length","includes","problemId","optionSelectedValue","copied","Object","assign","setItem","stringify","target","value","quizObj","window","confirm","description","reqBody","encodeURIComponent","id","start_time","method","body","console","log","insertstatus","quizInstanceId","alert","type","removeItem","mins_remaining","duration_minutes","quizId","event","preventDefault","login","newUserId","newPassword","confirmMsg","b","errMsg","render","color","fontSize","paddingTop","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './css/App.css';\nimport Header from './components/Header';\nimport ImageSlider from './components/ImageSlider';\nimport DropdownMenuHover from './components/DropdownMenuHover';\nimport ProblemsBrowse from './components/ProblemsBrowse';\nimport ProblemsSearch from './components/ProblemsSearch';\nimport ProblemInsert from './components/ProblemInsert';\nimport ProblemShowSelected from './components/ProblemShowSelected';\nimport QuizesBrowse from './components/QuizesBrowse';\nimport QuizesSearch from './components/QuizesSearch';\nimport QuizInsert from './components/QuizInsert';\nimport QuizShowSelected from './components/QuizShowSelected';\nimport QuizInstances from './components/QuizInstances';\nimport UsersBrowse from './components/UsersBrowse';\nimport UsersSearch from './components/UsersSearch';\nimport UserInsert from './components/UserInsert';\nimport UserShowSelected from './components/UserShowSelected';\nimport UserQuizInstances from './components/UserQuizInstances';\nimport CoursesBrowse from './components/CoursesBrowse';\nimport CourseInsert from './components/CourseInsert';\nimport CoursesSearch from './components/CoursesSearch';\nimport CourseShowSelected from './components/CourseShowSelected';\nimport { Route, BrowserRouter as Router} from 'react-router-dom';\nimport {getMinutesRemaining, getCurrentTimestampString, getPageArray} from './utils/utils';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      spinner:false,\n      userId:null,\n      password:null,\n      loggedInUser:localStorage.getItem('loggedInUser') || '',\n      admin:localStorage.getItem('admin')||\"0\",\n      errorMessage:null,\n      coursesArray:[],\n      problemsArray:[],\n      currentProblemsPage:1,\n      currentQuizesPage:1,\n      currentCoursesPage:1,\n      currentUsersPage:1,\n      pageSize:30,\n      quizesArray:[],\n      usersArray:[],\n      startedQuiz:localStorage.getItem('startedQuiz')?JSON.parse(localStorage.getItem('startedQuiz')):null,\n      startedQuizAnswers:localStorage.getItem('startedQuizAnswers')?JSON.parse(localStorage.getItem('startedQuizAnswers')):null\n    }\n    this.userIdChange=this.userIdChange.bind(this);\n    this.passwordChange=this.passwordChange.bind(this);\n    this.handleLoginSubmit=this.handleLoginSubmit.bind(this);\n    this.logoutUser=this.logoutUser.bind(this);\n    this.setErrorMessage=this.setErrorMessage.bind(this);\n    this.setCourses=this.setCourses.bind(this);\n    this.setProblems=this.setProblems.bind(this);\n    this.setQuizes=this.setQuizes.bind(this);\n    this.setUsers=this.setUsers.bind(this);\n    this.loadCourses=this.loadCourses.bind(this);\n    this.loadProblems=this.loadProblems.bind(this);\n    this.loadQuizes=this.loadQuizes.bind(this);\n    this.loadUsers=this.loadUsers.bind(this);\n    this.showSpinner=this.showSpinner.bind(this);\n    this.hideSpinner=this.hideSpinner.bind(this);\n    this.startQuiz=this.startQuiz.bind(this);\n    this.isQuizStarted=this.isQuizStarted.bind(this);\n    this.startedQuizOptionChange=this.startedQuizOptionChange.bind(this);\n    this.startedQuizSolutionChange=this.startedQuizSolutionChange.bind(this);\n    this.startedQuizSubmit=this.startedQuizSubmit.bind(this);\n    this.nextProblemsPageClick=this.nextProblemsPageClick.bind(this);\n    this.prevProblemsPageClick=this.prevProblemsPageClick.bind(this);\n    this.setProblemsPage=this.setProblemsPage.bind(this);\n    this.nextQuizesPageClick=this.nextQuizesPageClick.bind(this);\n    this.prevQuizesPageClick=this.prevQuizesPageClick.bind(this);\n    this.setQuizesPage=this.setQuizesPage.bind(this);\n    this.nextCoursesPageClick=this.nextCoursesPageClick.bind(this);\n    this.prevCoursesPageClick=this.prevCoursesPageClick.bind(this);\n    this.setCoursesPage=this.setCoursesPage.bind(this);\n    this.nextUsersPageClick=this.nextUsersPageClick.bind(this);\n    this.prevUsersPageClick=this.prevUsersPageClick.bind(this);\n    this.setUsersPage=this.setUsersPage.bind(this);\n  }\n\n  componentDidMount() {\n    var timer = setInterval(() => {this.reviseQuizMinsRemaining();}, 60000)\n  }\n\n\n\n\n\n\n  loadCourses(){\n    this.setState({spinner:true});\n\n    let url='/api/getCourses';\n\n    if(this.state.currentCoursesPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentCoursesPage+'&pageSize='+this.state.pageSize;\n    }\n\n\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n      //console.log(data);\n      this.setState({coursesArray: data, spinner: false});\n    })\n  }\n\n  setCourses(arr){\n    this.setState({coursesArray:arr});\n  }\n\n  setCoursesPage(page){\n    this.setState({currentCoursesPage:page}, ()=>{this.loadCourses();});\n  }\n\n  nextCoursesPageClick(e){\n    let pageArray=getPageArray(this.state.currentCoursesPage, this.state.coursesArray===undefined||this.state.coursesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentCoursesPage+1)){\n        this.setState({currentCoursesPage:this.state.currentCoursesPage+1}, ()=>{this.loadCourses()});\n    }\n  }\n\n  prevCoursesPageClick(e){\n    let pageArray=getPageArray(this.state.currentCoursesPage, this.state.coursesArray===undefined||this.state.coursesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentCoursesPage-1)){\n        this.setState({currentCoursesPage:this.state.currentCoursesPage-1}, ()=>{this.loadCourses()});\n    }\n  }\n\n\n  startedQuizOptionChange(problemId, optionSelectedValue){\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId]=optionSelectedValue;\n    this.setState({startedQuizAnswers:copied});\n    //console.log(copied);\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startedQuizSolutionChange(problemId, e){\n    const copied = Object.assign({}, this.state.startedQuizAnswers);\n    copied[problemId]=e.target.value;\n    this.setState({startedQuizAnswers:copied});\n    localStorage.setItem('startedQuizAnswers', JSON.stringify(copied));\n  }\n\n  startQuiz(quizObj){\n    if(this.state.startedQuiz===null){\n      if(window.confirm('Are you sure you want to start the quiz:\\r\\n'+quizObj.description)===true){\n        quizObj['start_time']=getCurrentTimestampString();\n        var reqBody=\"quizId=\"+encodeURIComponent(quizObj.id);\n            reqBody+='&startTime='+encodeURIComponent(quizObj.start_time);\n            reqBody+='&userId='+encodeURIComponent(this.state.loggedInUser);\n\n        fetch(`/api/quizStart`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        })\n        .then(res=>res.json())\n        .then(\n          data=>{\n            console.log(data);\n            if(data.insertstatus=== \"ok\"){\n              quizObj['quizInstanceId']=data.quizInstanceId;\n              this.setState({startedQuiz:quizObj});\n              localStorage.setItem('startedQuiz', JSON.stringify(quizObj));\n            }\n            else{\n              alert('An error occurred in connecting to the server to start the quiz');\n            }\n          });\n      }\n    }\n    else{\n      alert('There is already a started quiz:\\r\\n'+\n             this.state.startedQuiz.description+\n            '\\r\\n Please submit this quiz to start a new quiz')\n    }\n     console.log(this.state.startedQuiz);\n  }\n\n  startedQuizSubmit(){\n    //console.log(this.state.startedQuizAnswers);\n    //console.log(this.state.startedQuiz);\n\n    var reqBody=\"quizId=\"+encodeURIComponent(this.state.startedQuiz.id);\n        reqBody+=\"&quizType=\"+encodeURIComponent(this.state.startedQuiz.type);\n        reqBody+='&quizInstanceId='+encodeURIComponent(this.state.startedQuiz.quizInstanceId);\n        reqBody+='&answersObject='+encodeURIComponent(JSON.stringify(this.state.startedQuizAnswers));\n\n        fetch(`/api/quizAnwersSubmit`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        })\n        .then(res=>res.json())\n        .then(\n          data=>{\n            //console.log(data);\n            if(data.insertstatus=== \"ok\"){\n              localStorage.removeItem('startedQuiz');\n              localStorage.removeItem('startedQuizAnswers');\n              this.setState({startedQuiz:null, startedQuizAnswers:null});\n              alert('Quiz Submitted');\n            }\n          }\n        );\n  }\n\n  reviseQuizMinsRemaining(){\n    if(this.state.startedQuiz!==null){\n          var mins_remaining= getMinutesRemaining(this.state.startedQuiz.start_time, this.state.startedQuiz.duration_minutes);\n\n          if(mins_remaining>0){\n            console.log(mins_remaining);\n            const copied = Object.assign({}, this.state.startedQuiz);\n            //copied['mins_remaining']=mins_remaining;\n            this.setState({startedQuiz:copied});\n            localStorage.setItem('startedQuiz', JSON.stringify(copied));\n         }\n         else{\n           this.startedQuizSubmit();\n         }\n    }\n  }\n\n\n\n  isQuizStarted(quizId){\n    if(this.state.startedQuiz!==null&&this.state.startedQuiz.id===quizId)\n        return true;\n    else\n        return false;\n  }\n\n\n  loadProblems(){\n    let url='/api/getProblems';\n\n    if(this.state.currentProblemsPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentProblemsPage+'&pageSize='+this.state.pageSize;\n    }\n\n    this.setState({spinner:true});\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n        this.setState({problemsArray: data, spinner: false});\n    })\n  }\n\n  setProblems(arr){\n    this.setState({problemsArray:arr});\n  }\n\n  setProblemsPage(page){\n    this.setState({currentProblemsPage:page}, ()=>{this.loadProblems();});\n  }\n\n  nextProblemsPageClick(e){\n    let pageArray=getPageArray(this.state.currentProblemsPage, this.state.problemsArray===undefined||this.state.problemsArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentProblemsPage+1)){\n        this.setState({currentProblemsPage:this.state.currentProblemsPage+1}, ()=>{this.loadProblems()});\n    }\n  }\n\n  prevProblemsPageClick(e){\n    let pageArray=getPageArray(this.state.currentProblemsPage, this.state.problemsArray===undefined||this.state.problemsArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentProblemsPage-1)){\n        this.setState({currentProblemsPage:this.state.currentProblemsPage-1}, ()=>{this.loadProblems()});\n    }\n  }\n\n\n  loadQuizes(){\n    this.setState({spinner:true});\n    let url='/api/getQuizes';\n\n    if(this.state.currentQuizesPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentQuizesPage+'&pageSize='+this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n      //console.log(data);\n      this.setState({ quizesArray: data, spinner: false});\n    })\n  }\n\n  setQuizes(arr){\n    this.setState({quizesArray:arr});\n  }\n\n  setQuizesPage(page){\n    this.setState({currentQuizesPage:page}, ()=>{this.loadQuizes();});\n  }\n\n  nextQuizesPageClick(e){\n    let pageArray=getPageArray(this.state.currentQuizesPage, this.state.quizesArray===undefined||this.state.quizesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentQuizesPage+1)){\n        this.setState({currentQuizesPage:this.state.currentQuizesPage+1}, ()=>{this.loadQuizes()});\n    }\n  }\n\n  prevQuizesPageClick(e){\n    let pageArray=getPageArray(this.state.currentQuizesPage, this.state.quizesArray===undefined||this.state.quizesArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentQuizesPage-1)){\n        this.setState({currentQuizesPage:this.state.currentQuizesPage-1}, ()=>{this.loadQuizes()});\n    }\n  }\n\n  loadUsers(){\n    this.setState({spinner:true});\n    let url='/api/getUsers';\n\n    if(this.state.currentUsersPage!==undefined&&this.state.pageSize!==undefined){\n      url+='?currentPage='+this.state.currentUsersPage+'&pageSize='+this.state.pageSize;\n    }\n\n    fetch(url, {\n      headers:{\n        'Accept':'application/json'\n      }\n    })\n    .then(res=>res.json())\n    .then(data=>{\n      this.setState({usersArray: data, spinner:false});\n    })\n  }\n\n  setUsers(arr){\n    this.setState({usersArray:arr});\n  }\n\n  setUsersPage(page){\n    this.setState({currentUsersPage:page}, ()=>{this.loadUsers();});\n  }\n\n  nextUsersPageClick(e){\n    let pageArray=getPageArray(this.state.currentUsersPage, this.state.usersArray===undefined||this.state.usersArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentUsersPage+1)){\n        this.setState({currentUsersPage:this.state.currentUsersPage+1}, ()=>{this.loadUsers()});\n    }\n  }\n\n  prevUsersPageClick(e){\n    let pageArray=getPageArray(this.state.currentUsersPage, this.state.usersArray===undefined||this.state.usersArray.length<this.state.pageSize);\n    if(pageArray.includes(this.state.currentUsersPage-1)){\n        this.setState({currentUsersPage:this.state.currentUsersPage-1}, ()=>{this.loadUsers()});\n    }\n  }\n\n  showSpinner(){\n    this.setState({spinner:true});\n  }\n\n  hideSpinner(){\n    this.setState({spinner:false});\n  }\n\n  handleLoginSubmit(event){\n    if(this.state.userId===null\n        ||this.state.password===null\n        ||this.state.password.length===0\n        ||this.state.userId.length===0)\n    {\n      event.preventDefault();\n      this.setState({errorMessage: \"UserId/password cannot be empty\"})\n      return;\n    }\n    var reqBody=\"userId=\"+encodeURIComponent(this.state.userId);\n        reqBody+='&password='+encodeURIComponent(this.state.password);\n\n        fetch(`/api/login`, {\n          headers:{\n            'Accept':'application/json',\n            'Content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          body: reqBody\n        })\n        .then(res=>res.json())\n        .then(\n          data=>{\n            console.log(data);\n            if(data.login===\"ok\"){\n              localStorage.setItem('loggedInUser', this.state.userId);\n              localStorage.setItem('admin', data.admin);\n              this.setState({errorMessage:null, loggedInUser: this.state.userId, admin: data.admin});\n            }\n            else{\n              this.setState({errorMessage: \"Login Failed: UserId/password Mismatch\"});\n            }\n          }\n        );\n    event.preventDefault();\n\n  }\n\n  userIdChange(e){\n    const newUserId=e.target.value;\n    this.setState({userId: newUserId});\n  }\n\n  passwordChange(e){\n    const newPassword=e.target.value;\n    this.setState({password: newPassword});\n  }\n\n  logoutUser(e){\n    //e.preventDefault();\n    let confirmMsg='Are you sure you want to logout?';\n    if(this.state.startedQuiz!==null){\n        confirmMsg+='There is an unsubmitted quiz: \\r\\n'+this.state.startedQuiz.description;\n    }\n    let b=window.confirm(confirmMsg)\n    if(b===true){\n      if(this.state.startedQuiz!==null)\n         this.startedQuizSubmit();\n      localStorage.setItem('loggedInUser', '');\n      localStorage.setItem('admin', \"0\");\n      localStorage.removeItem('startedQuiz');\n      localStorage.removeItem('startedQuizAnswers');\n      this.setState({errorMessage:null, loggedInUser: '', admin:\"0\",\n                      startedQuiz:null, startedQuizAnswers:null});\n    }\n    else{\n      e.preventDefault();\n    }\n  }\n\n  setErrorMessage(errMsg){\n    this.setState({errorMessage:errMsg});\n  }\n\n\n    render(){\n      return (\n        <Router>\n          <div>\n            <Route path=\"/\" render={(props)=><Header\n                                                {...props}\n                                                userId={this.state.userId}\n                                                password={this.state.password}\n                                                errorMessage={this.state.errorMessage}\n                                                passwordChange={this.passwordChange}\n                                                userIdChange={this.userIdChange}\n                                                handleSubmit={this.handleLoginSubmit}\n                                                logoutUser={this.logoutUser}\n                                                loggedInUser={this.state.loggedInUser}\n                                                startedQuiz={this.state.startedQuiz}\n                                              />}\n            />\n            <Route path=\"/\" render={(props)=><DropdownMenuHover\n                                              {...props}\n                                               loggedInUser={this.state.loggedInUser}\n                                               setErrorMessage={this.setErrorMessage}\n                                              />\n                                    }\n             />\n             {\n               this.state.spinner===true?(<div id=\"spinner\" className=\"loadingContainer\"><div className=\"loading\"></div></div>):null\n             }\n            <Route exact path=\"/\" component={ImageSlider} />\n            <Route path=\"/problemsBrowse\" render={(props)=><ProblemsBrowse {...props}\n                                                            problemsArray={this.state.problemsArray}\n                                                            quizesArray={this.state.quizesArray}\n                                                            loadProblems={this.loadProblems}\n                                                            setProblems={this.setProblems}\n                                                            loadQuizes={this.loadQuizes}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                            currentPage={this.state.currentProblemsPage}\n                                                            pageArray={getPageArray(this.state.currentProblemsPage, this.state.problemsArray===undefined||this.state.problemsArray.length<this.state.pageSize)}\n                                                            nextPageClick={this.nextProblemsPageClick}\n                                                            prevPageClick={this.prevProblemsPageClick}\n                                                            setProblemsPage={this.setProblemsPage}\n                                                            loggedInUser={this.state.loggedInUser}\n                                                            admin={this.state.admin}\n                                                            />\n                                                 }\n            />\n            <Route path=\"/problemsSearch\" render={(props)=><ProblemsSearch {...props}\n                                                            loadProblems={this.loadProblems}\n                                                            problemsArray={this.state.problemsArray}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                           />\n                                                  }\n            />\n            <Route path=\"/problemInsert\" render={(props)=><ProblemInsert {...props}\n                                                           problemsArray={this.state.problemsArray}\n                                                           quizesArray={this.state.quizesArray}\n                                                           loadQuizes={this.loadQuizes}\n                                                           setProblems={this.setProblems}\n                                                           showSpinner={this.showSpinner}\n                                                           hideSpinner={this.hideSpinner}\n                                                           loggedInUser={this.state.loggedInUser}\n                                                          />\n                                                }\n            />\n            <Route path=\"/problemShowSelected/:id\" render={(props)=><ProblemShowSelected {...props}\n                                                                  loadProblems={this.loadProblems}\n                                                                  problemsArray={this.state.problemsArray}\n                                                                  setProblems={this.setProblems}\n                                                                  loadQuizes={this.loadQuizes}\n                                                                  quizesArray={this.state.quizesArray}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  admin={this.state.admin}\n                                                                  setErrorMessage={this.setErrorMessage}\n                                                                 />\n                                                       }\n            />\n            <Route path=\"/quizesBrowse\" render={(props)=><QuizesBrowse\n                                                          quizesArray={this.state.quizesArray}\n                                                          loadQuizes={this.loadQuizes}\n                                                          currentPage={this.state.currentQuizesPage}\n                                                          pageArray={getPageArray(this.state.currentQuizesPage, this.state.quizesArray===undefined||this.state.quizesArray.length<this.state.pageSize)}\n                                                          nextPageClick={this.nextQuizesPageClick}\n                                                          prevPageClick={this.prevQuizesPageClick}\n                                                          setQuizesPage={this.setQuizesPage}\n                                                          loggedInUser={this.state.loggedInUser}\n                                                          admin={this.state.admin}\n                                                        />\n                                               }\n             />\n             <Route path=\"/quizesSearch\" render={(props)=><QuizesSearch {...props}\n                                                             showSpinner={this.showSpinner}\n                                                             hideSpinner={this.hideSpinner}\n                                                             loadQuizes={this.loadQuizes}\n                                                             quizesArray={this.state.quizesArray}\n                                                            />\n                                                   }\n             />\n            <Route path=\"/quizInsert\" render={(props)=><QuizInsert {...props}\n                                                        quizesArray={this.state.quizesArray}\n                                                        coursesArray={this.state.coursesArray}\n                                                        loadCourses={this.loadCourses}\n                                                        setQuizes={this.setQuizes}\n                                                        showSpinner={this.showSpinner}\n                                                        hideSpinner={this.hideSpinner}\n                                                        loggedInUser={this.state.loggedInUser}\n                                                       />\n                                             }\n            />\n            <Route path=\"/quizShowSelected/:id\" render={(props)=><QuizShowSelected {...props}\n                                                                  loadQuizes={this.loadQuizes}\n                                                                  quizesArray={this.state.quizesArray}\n                                                                  setQuizes={this.setQuizes}\n                                                                  loadCourses={this.loadCourses}\n                                                                  coursesArray={this.state.coursesArray}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  startQuiz={this.startQuiz}\n                                                                  admin={this.state.admin}\n                                                                  setErrorMessage={this.setErrorMessage}\n                                                                  isQuizStarted={this.isQuizStarted}\n                                                                  optionChange={this.startedQuizOptionChange}\n                                                                  solutionChange={this.startedQuizSolutionChange}\n                                                                  submitQuiz={this.startedQuizSubmit}\n                                                                  startedQuizAnswers={this.state.startedQuizAnswers}\n                                                                 />\n                                                       }\n            />\n            <Route path=\"/quizInstances/:id\" render={(props)=><QuizInstances {...props}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  admin={this.state.admin}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                              />\n                                                    }\n            />\n            <Route path=\"/usersBrowse\" render={(props)=><UsersBrowse {...props}\n                                                          usersArray={this.state.usersArray}\n                                                          loadUsers={this.loadUsers}\n                                                          currentPage={this.state.currentUsersPage}\n                                                          pageArray={getPageArray(this.state.currentUsersPage, this.state.usersArray===undefined||this.state.usersArray.length<this.state.pageSize)}\n                                                          nextPageClick={this.nextUsersPageClick}\n                                                          prevPageClick={this.prevUsersPageClick}\n                                                          setUsersPage={this.setUsersPage}\n                                                        />\n                                              }\n            />\n            <Route path=\"/usersSearch\" render={(props)=><UsersSearch {...props}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                            loadUsers={this.loadUsers}\n                                                            usersArray={this.state.usersArray}\n                                                           />\n                                                  }\n            />\n            <Route path=\"/userInsert\" render={(props)=><UserInsert {...props}\n                                                        usersArray={this.state.usersArray}\n                                                        setUsers={this.setUsers}\n                                                        showSpinner={this.showSpinner}\n                                                        hideSpinner={this.hideSpinner}\n                                                       />\n                                             }\n            />\n            <Route path=\"/userShowSelected/:id\" render={(props)=><UserShowSelected {...props}\n                                                                  loadUsers={this.loadUsers}\n                                                                  usersArray={this.state.usersArray}\n                                                                  setUsers={this.setUsers}\n                                                                  showSpinner={this.showSpinner}\n                                                                  hideSpinner={this.hideSpinner}\n                                                                  loggedInUser={this.state.loggedInUser}\n                                                                  admin={this.state.admin}\n                                                                  setErrorMessage={this.setErrorMessage}\n                                                                 />\n                                                       }\n            />\n            <Route path=\"/userQuizInstances\" render={(props)=><UserQuizInstances {...props}\n                                                                showSpinner={this.showSpinner}\n                                                                hideSpinner={this.hideSpinner}\n                                                                loggedInUser={this.state.loggedInUser}\n                                                              />\n                                                    }\n            />\n            <Route path=\"/coursesBrowse\" render={(props)=><CoursesBrowse\n                                                           coursesArray={this.state.coursesArray}\n                                                           loadCourses={this.loadCourses}\n                                                           currentPage={this.state.currentCoursesPage}\n                                                           pageArray={getPageArray(this.state.currentCoursesPage, this.state.coursesArray===undefined||this.state.coursesArray.length<this.state.pageSize)}\n                                                           nextPageClick={this.nextCoursesPageClick}\n                                                           prevPageClick={this.prevCoursesPageClick}\n                                                           setCoursesPage={this.setCoursesPage}\n                                                          />\n                                                }\n            />\n            <Route path=\"/coursesSearch\" render={(props)=><CoursesSearch {...props}\n                                                            showSpinner={this.showSpinner}\n                                                            hideSpinner={this.hideSpinner}\n                                                            loadCourses={this.loadCourses}\n                                                            coursesArray={this.state.coursesArray}\n                                                           />\n                                                  }\n            />\n            <Route path=\"/courseInsert\" render={(props)=><CourseInsert {...props}\n                                                          coursesArray={this.state.coursesArray}\n                                                          setCourses={this.setCourses}\n                                                          showSpinner={this.showSpinner}\n                                                          hideSpinner={this.hideSpinner}\n                                                          loggedInUser={this.state.loggedInUser}\n                                                          />\n                                               }\n            />\n            <Route path=\"/CourseShowSelected/:id\" render={(props)=><CourseShowSelected {...props}\n                                                                    loadCourses={this.loadCourses}\n                                                                    coursesArray={this.state.coursesArray}\n                                                                    setCourses={this.setCourses}\n                                                                    showSpinner={this.showSpinner}\n                                                                    hideSpinner={this.hideSpinner}\n                                                                    loggedInUser={this.state.loggedInUser}\n                                                                    admin={this.state.admin}\n                                                                    setErrorMessage={this.setErrorMessage}\n                                                                  />\n                                                          }\n            />\n            {\n            this.state.loggedInUser===\"\" && <Route path=\"/errorLogin\" render={(props)=>(<div\n                                                           style={{color:\"red\", fontSize: \"1.5em\",\n                                                             paddingTop:\"1%\",\n                                                            textAlign:\"center\"}}>\n                                                            Error: User not Logged In!\n                                                       </div>\n                                                       )\n                                              }\n           />\n           }\n\n          </div>\n        </Router>\n      )\n    }\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}