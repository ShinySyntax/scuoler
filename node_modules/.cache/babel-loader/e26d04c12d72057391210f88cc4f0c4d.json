{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/chat/ChatHome.js\";\nimport React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport '../../css/Chat.css';\nimport VideoExt from './VideoExt';\nimport SocketExt from './SocketExt';\nimport PeerConnectionExt from './PeerConnectionExt';\nconst ENDPOINT = \"https://10.0.0.168:5000\";\n\nclass ChatHome extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dualShareHandler = mediaStream => {\n      this.setState({\n        localStream: mediaStream\n      }, () => {\n        //mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track, mediaStream));\n        mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n      });\n    };\n\n    this.errorHandler = error => {\n      console.log(error.message);\n    };\n\n    this.shareScreenChange = async e => {\n      let isChecked = e.target.checked;\n      let {\n        localStream,\n        peerConnection\n      } = this.state; //console.log(e.target.checked);\n      //console.log('value '+e.target.value);\n\n      let dualStream;\n\n      if (isChecked) {\n        dualStream = await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      } else {\n        dualStream = await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if (localStream === null) {\n        //dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track,dualStream));\n        dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n        this.setState({\n          localStream: dualStream,\n          shareScreen: isChecked\n        });\n      } else {\n        //console.log(dualStream);\n        //console.log(localStream.getTracks());\n\n        /*let vidTrack, audTrack;\n        if(dualStream.getVideoTracks())\n          vidTrack= dualStream.getVideoTracks()[0];\n        if(dualStream.getAudioTracks())\n          audTrack=dualStream.getAudioTracks()[0];*/\n        let trackArr = [...localStream.getTracks()];\n\n        for (let i = 0; i < trackArr.length; i++) await localStream.removeTrack(trackArr[i]); //\n\n\n        const senders = this.peerConnection.getSenders();\n\n        for (let i = 0; i < dualStream.getTracks().length; i++) {\n          await localStream.addTrack(dualStream.getTracks()[i]);\n          senders.forEach(sender => {\n            if (dualStream.getTracks()[i].kind === sender.track.kind) sender.replaceTrack(dualStream.getTracks()[i]); //this.peerConnection.removeTrack(sender)\n          }); //this.peerConnection.addTrack(dualStream.getTracks()[i]);\n        }\n\n        console.log(this.peerConnection.getSenders()); //localStream.addTrack(vidTrack)\n        //const transceiver = this.peerConnection.getTransceivers()[0];\n        //transceiver['sender'].replaceTrack(vidTrack);\n\n        this.setState({\n          shareScreen: isChecked\n        });\n      }\n    };\n\n    this.onSocketConnect = () => {\n      this.socket.emit(\"map\", {\n        user: this.props.userName\n      });\n      console.log(this.socket.id + ' mapped to ' + this.props.userName);\n    };\n\n    this.onUpdateUserList = data => {\n      let sockIds = [...this.state.userSockIds];\n      let newSockIds = data.users;\n      newSockIds.forEach(sockId => {\n        if (!sockIds.includes(sockId)) sockIds.push(sockId);\n      });\n      console.log(data.socketMap);\n      console.log(sockIds);\n      this.setState({\n        userSockIds: sockIds,\n        socketMap: data.socketMap\n      });\n    };\n\n    this.callUser = async (sockId, userName, e) => {\n      console.log(sockId + ' ' + userName);\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(offer)); //console.log(this.peerConnection);\n\n      this.socket.emit(\"call-user\", {\n        offer,\n        to: sockId\n      });\n      this.setState({\n        message: `Talking with: user: ${userName} (${sockId})`\n      });\n    };\n\n    this.sendAnswer = async data => {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n      console.log('call made'); //console.log(this.peerConnection);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.socket\n      });\n      this.setState({\n        getCalled: true\n      });\n    };\n\n    this.onCallMade = async data => {\n      console.log('getCalled ' + this.state.getCalled);\n\n      if (this.state.getCalled) {\n        const confirmed = window.confirm(`User \"Socket: ${data.socket}\" wants to call you. Do accept this call?`);\n\n        if (!confirmed) {\n          this.socket.emit(\"reject-call\", {\n            from: data.socket\n          });\n        } else {\n          await this.sendAnswer(data);\n        }\n      } else {\n        await this.sendAnswer(data);\n      }\n    };\n\n    this.onCallRejected = data => {\n      alert(`User: ${this.state.socketMap[data.socket]} (${data.socket}) rejected your call.`); //unselectUsersFromList();\n    };\n\n    this.onRemoveUser = ({\n      socketId\n    }) => {\n      let userSockIds = this.state.userSockIds.filter(val => val !== socketId);\n      let socketMap = Object.assign({}, this.state.socketMap);\n      delete socketMap[socketId];\n      this.setState({\n        socketMap,\n        userSockIds\n      });\n    };\n\n    this.onAnswerMade = async data => {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));\n\n      if (!this.state.isAlreadyCalling) {\n        console.log('on Answer Made');\n        console.log(this.peerConnection);\n        this.callUser(data.socket, this.state.socketMap[data.socket], null).then();\n        this.setState({\n          isAlreadyCalling: true\n        });\n      }\n    };\n\n    this.setRemoteStream = remoteStream => {\n      this.setState({\n        remoteStream: remoteStream\n      });\n    };\n\n    this.state = {\n      getCalled: false,\n      isAlreadyCalling: false,\n      localStream: null,\n      remoteStream: null,\n      shareScreen: false,\n      userSockIds: [],\n      socketMap: {},\n      message: 'Select a user on the left menu to start sharing.'\n    };\n    this.peerConnection = new RTCPeerConnection(); //this.socket = socketIOClient(ENDPOINT);\n\n    this.socket = socketIOClient();\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions = {\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.shareScreen) {\n      navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n    } else {\n      navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      ;\n    }\n\n    const remoteStream = new MediaStream();\n    this.setState({\n      remoteStream\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SocketExt, {\n      socket: this.socket,\n      onSocketConnect: this.onSocketConnect,\n      onUpdateUserList: this.onUpdateUserList,\n      onRemoveUser: this.onRemoveUser,\n      onCallMade: this.onCallMade,\n      onAnswerMade: this.onAnswerMade,\n      onCallRejected: this.onCallRejected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(PeerConnectionExt, {\n      peerConnection: this.peerConnection,\n      localStream: this.state.localStream,\n      remoteStream: this.state.remoteStream,\n      setRemoteStream: this.setRemoteStream,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"active-users-panel\",\n      id: \"active-user-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"panel-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }\n    }, \"Callable Users:\"), this.state.userSockIds.map(val => /*#__PURE__*/React.createElement(\"div\", {\n      id: this.state.socketMap[val],\n      key: val,\n      onClick: e => {\n        this.callUser(val, this.state.socketMap[val], e).then();\n      },\n      className: \"active-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 55\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 55\n      }\n    }, this.state.socketMap[val], \"(\", val, \")\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-chat-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"talk-info\",\n      id: \"talking-with-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, this.state.message), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }\n    }, \"Share Screen: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"shareScreen\",\n      checked: this.state.shareScreen,\n      onChange: this.shareScreenChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(VideoExt, {\n      controls: true,\n      muted: \"muted\",\n      mediaStream: this.state.localStream,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(VideoExt, {\n      controls: true,\n      mediaStream: this.state.remoteStream,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 27\n      }\n    })))));\n  }\n\n}\n\nexport default ChatHome;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/chat/ChatHome.js"],"names":["React","socketIOClient","VideoExt","SocketExt","PeerConnectionExt","ENDPOINT","ChatHome","Component","constructor","props","dualShareHandler","mediaStream","setState","localStream","getTracks","forEach","track","peerConnection","addTrack","errorHandler","error","console","log","message","shareScreenChange","e","isChecked","target","checked","state","dualStream","navigator","mediaDevices","getDisplayMedia","displayMediaOptions","getUserMedia","camMediaOptions","shareScreen","trackArr","i","length","removeTrack","senders","getSenders","sender","kind","replaceTrack","onSocketConnect","socket","emit","user","userName","id","onUpdateUserList","data","sockIds","userSockIds","newSockIds","users","sockId","includes","push","socketMap","callUser","offer","createOffer","setLocalDescription","RTCSessionDescription","to","sendAnswer","setRemoteDescription","answer","createAnswer","getCalled","onCallMade","confirmed","window","confirm","from","onCallRejected","alert","onRemoveUser","socketId","filter","val","Object","assign","onAnswerMade","isAlreadyCalling","then","setRemoteStream","remoteStream","RTCPeerConnection","video","cursor","audio","echoCancellation","noiseSuppression","componentDidMount","catch","MediaStream","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport '../../css/Chat.css';\nimport VideoExt from './VideoExt';\nimport SocketExt from './SocketExt';\nimport PeerConnectionExt from './PeerConnectionExt';\nconst ENDPOINT = \"https://10.0.0.168:5000\";\n\nclass ChatHome extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      getCalled: false,\n      isAlreadyCalling: false,\n      localStream: null,\n      remoteStream: null,\n      shareScreen: false,\n      userSockIds:[],\n      socketMap:{},\n      message: 'Select a user on the left menu to start sharing.'\n    }\n    this.peerConnection = new RTCPeerConnection();\n    //this.socket = socketIOClient(ENDPOINT);\n    this.socket = socketIOClient();\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions={\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  dualShareHandler=(mediaStream)=>{\n    this.setState({localStream: mediaStream}, ()=>{\n      //mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track, mediaStream));\n      mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n    });\n  };\n\n  errorHandler=error => {\n    console.log(error.message);\n  };\n\n  shareScreenChange=async (e)=>{\n      let isChecked=e.target.checked;\n      let {localStream, peerConnection}=this.state;\n      //console.log(e.target.checked);\n      //console.log('value '+e.target.value);\n      let dualStream;\n      if(isChecked){\n          dualStream=await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      }\n      else{\n        dualStream=await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if(localStream===null){\n        //dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track,dualStream));\n        dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n        this.setState({localStream: dualStream, shareScreen: isChecked})\n      }\n      else{\n        //console.log(dualStream);\n        //console.log(localStream.getTracks());\n        /*let vidTrack, audTrack;\n        if(dualStream.getVideoTracks())\n          vidTrack= dualStream.getVideoTracks()[0];\n        if(dualStream.getAudioTracks())\n          audTrack=dualStream.getAudioTracks()[0];*/\n\n        let trackArr=[...localStream.getTracks()];\n        for(let i=0;i<trackArr.length;i++)\n            await localStream.removeTrack(trackArr[i]);\n\n        //\n        const senders = this.peerConnection.getSenders();\n        for(let i=0;i<dualStream.getTracks().length;i++){\n            await localStream.addTrack(dualStream.getTracks()[i]);\n            senders.forEach((sender) => {\n                                if(dualStream.getTracks()[i].kind===sender.track.kind)\n                                    sender.replaceTrack(dualStream.getTracks()[i]);\n                                  //this.peerConnection.removeTrack(sender)\n                              });\n            //this.peerConnection.addTrack(dualStream.getTracks()[i]);\n        }\n        console.log(this.peerConnection.getSenders());\n\n        //localStream.addTrack(vidTrack)\n        //const transceiver = this.peerConnection.getTransceivers()[0];\n        //transceiver['sender'].replaceTrack(vidTrack);\n        this.setState({shareScreen: isChecked});\n      }\n\n  }\n\n  componentDidMount(){\n    if(this.state.shareScreen){\n        navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n    }\n    else{\n      navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);;\n    }\n    const remoteStream = new MediaStream();\n    this.setState({remoteStream});\n  }\n\n  onSocketConnect=()=>{\n    this.socket.emit(\"map\", {\n      user: this.props.userName\n    });\n    console.log(this.socket.id+' mapped to '+this.props.userName);\n  }\n\n  onUpdateUserList=(data) => {\n    let sockIds=[...this.state.userSockIds];\n    let newSockIds=data.users;\n    newSockIds.forEach(sockId=>{\n      if(!sockIds.includes(sockId))\n        sockIds.push(sockId);\n    })\n    console.log(data.socketMap);\n    console.log(sockIds);\n    this.setState({userSockIds: sockIds, socketMap: data.socketMap});\n  };\n\n\n  callUser=async (sockId, userName, e)=>{\n    console.log(sockId+' '+userName);\n    const offer = await this.peerConnection.createOffer();\n    await this.peerConnection.setLocalDescription(new RTCSessionDescription(offer));\n    //console.log(this.peerConnection);\n\n    this.socket.emit(\"call-user\", {\n      offer,\n      to: sockId\n    });\n    this.setState({message: `Talking with: user: ${userName} (${sockId})`});\n  }\n\n  sendAnswer=async (data)=>{\n      await this.peerConnection.setRemoteDescription(\n        new RTCSessionDescription(data.offer)\n      );\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n\n      console.log('call made');\n      //console.log(this.peerConnection);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.socket\n      });\n      this.setState({getCalled: true});\n  }\n\n  onCallMade=async (data) => {\n    console.log('getCalled '+this.state.getCalled);\n\n    if (this.state.getCalled) {\n      const confirmed = window.confirm(\n        `User \"Socket: ${data.socket}\" wants to call you. Do accept this call?`\n      );\n      if (!confirmed) {\n        this.socket.emit(\"reject-call\", {\n          from: data.socket\n        });\n      }\n      else{\n        await this.sendAnswer(data);\n      }\n    }\n    else{\n         await this.sendAnswer(data);\n    }\n\n  }\n\n  onCallRejected=data => {\n    alert(`User: ${this.state.socketMap[data.socket]} (${data.socket}) rejected your call.`);\n    //unselectUsersFromList();\n  }\n\n  onRemoveUser=({ socketId }) => {\n    let userSockIds=this.state.userSockIds.filter((val)=>val!==socketId);\n    let socketMap=Object.assign({}, this.state.socketMap);\n    delete socketMap[socketId];\n    this.setState({socketMap, userSockIds});\n  }\n\n\n\n  onAnswerMade=async (data) => {\n    await this.peerConnection.setRemoteDescription(\n      new RTCSessionDescription(data.answer)\n    );\n\n    if (!this.state.isAlreadyCalling) {\n      console.log('on Answer Made');\n      console.log(this.peerConnection);\n      this.callUser(data.socket, this.state.socketMap[data.socket], null).then();\n      this.setState({isAlreadyCalling: true});\n    }\n  }\n\n  setRemoteStream=(remoteStream) => {\n    this.setState({ remoteStream: remoteStream });\n  }\n\n\n  render(){\n    return(\n      <div>\n            <SocketExt\n              socket={this.socket}\n              onSocketConnect={this.onSocketConnect}\n              onUpdateUserList={this.onUpdateUserList}\n              onRemoveUser={this.onRemoveUser}\n              onCallMade={this.onCallMade}\n              onAnswerMade={this.onAnswerMade}\n              onCallRejected={this.onCallRejected}\n            />\n            <PeerConnectionExt\n             peerConnection={this.peerConnection}\n             localStream={this.state.localStream}\n             remoteStream={this.state.remoteStream}\n             setRemoteStream={this.setRemoteStream}\n            />\n            <div className=\"content-container\">\n                  <div className=\"active-users-panel\"  id=\"active-user-container\">\n                    <h3 className=\"panel-title\">Callable Users:</h3>\n                    {this.state.userSockIds.map(val=>(<div id={this.state.socketMap[val]} key={val} onClick={(e)=>{this.callUser(val, this.state.socketMap[val], e).then()}} className=\"active-user\">\n                                                      <p className=\"username\">\n                                                        {this.state.socketMap[val]}({val})\n                                                      </p>\n                                                     </div>\n                                                     )\n                                          )}\n                  </div>\n                  <div className=\"video-chat-container\">\n                        <h2 className=\"talk-info\" id=\"talking-with-info\">\n                          {this.state.message}\n                        </h2>\n                        <div className=\"video-container\">\n                          Share Screen: <input type=\"checkbox\" id=\"shareScreen\" checked={this.state.shareScreen}\n                                          onChange={this.shareScreenChange}/>\n                          <br/>\n                          <VideoExt\n                          controls={true}\n                          muted=\"muted\"\n                          mediaStream={this.state.localStream} />\n                          <VideoExt\n                          controls\n                          mediaStream={this.state.remoteStream} />\n                        </div>\n                  </div>\n            </div>\n      </div>\n    )\n  }\n}\n\nexport default ChatHome;\n"]},"metadata":{},"sourceType":"module"}