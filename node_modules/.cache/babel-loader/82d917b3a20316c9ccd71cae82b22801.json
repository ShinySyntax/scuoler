{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/chat/ChatHome.js\";\nimport React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport { Redirect } from 'react-router-dom';\nimport '../../css/Chat.css';\nimport VideoExt from './VideoExt';\nimport SocketExt from './SocketExt';\nimport PeerConnectionExt from './PeerConnectionExt'; //const ENDPOINT = \"http://localhost:5000\";\n\nconst ICE_SERVERS = [{\n  urls: 'stun:stun.l.google.com:19302'\n},\n/*{ urls: 'stun:stun1.l.google.com:19302' },\n{ urls: 'stun:stun2.l.google.com:19302' },\n{ urls: 'stun:stun3.l.google.com:19302' },\n{ urls: 'stun:stun4.l.google.com:19302' },*/\n{\n  urls: 'stun:stun.ekiga.net'\n}, {\n  urls: 'turn:numb.viagenie.ca',\n  credential: 'muazkh',\n  username: 'webrtc@live.com'\n}, {\n  url: 'turn:192.158.29.39:3478?transport=tcp',\n  credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n  username: '28224511:1379330808'\n}, {\n  url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n  credential: 'webrtc',\n  username: 'webrtc'\n}, {\n  url: 'turn:13.250.13.83:3478?transport=tcp',\n  credential: 'YzYNCouZM1mhqhmseWk6',\n  username: 'YzYNCouZM1mhqhmseWk6'\n}];\n\nclass ChatHome extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dualShareHandler = mediaStream => {\n      this.setState({\n        localStream: mediaStream\n      }, () => {\n        //mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track, mediaStream));\n        mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n      });\n    };\n\n    this.errorHandler = error => {\n      console.log(error.message);\n    };\n\n    this.shareScreenChange = async e => {\n      let isChecked = e.target.checked;\n      let {\n        localStream,\n        peerConnection\n      } = this.state; //console.log(e.target.checked);\n      //console.log('value '+e.target.value);\n\n      let dualStream;\n\n      if (isChecked) {\n        dualStream = await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      } else {\n        dualStream = await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if (localStream === null) {\n        //dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track,dualStream));\n        dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n        this.setState({\n          localStream: dualStream,\n          shareScreen: isChecked\n        });\n      } else {\n        //console.log(dualStream);\n        //console.log(localStream.getTracks());\n\n        /*let vidTrack, audTrack;\n        if(dualStream.getVideoTracks())\n          vidTrack= dualStream.getVideoTracks()[0];\n        if(dualStream.getAudioTracks())\n          audTrack=dualStream.getAudioTracks()[0];*/\n        let trackArr = [...localStream.getTracks()];\n\n        for (let i = 0; i < trackArr.length; i++) await localStream.removeTrack(trackArr[i]); //\n\n\n        const senders = this.peerConnection.getSenders();\n\n        for (let i = 0; i < dualStream.getTracks().length; i++) {\n          await localStream.addTrack(dualStream.getTracks()[i]);\n          senders.forEach(sender => {\n            if (dualStream.getTracks()[i].kind === sender.track.kind) sender.replaceTrack(dualStream.getTracks()[i]); //this.peerConnection.removeTrack(sender)\n          }); //this.peerConnection.addTrack(dualStream.getTracks()[i]);\n        }\n\n        console.log(this.peerConnection.getSenders()); //localStream.addTrack(vidTrack)\n        //const transceiver = this.peerConnection.getTransceivers()[0];\n        //transceiver['sender'].replaceTrack(vidTrack);\n\n        this.setState({\n          shareScreen: isChecked\n        });\n      }\n    };\n\n    this.onSocketConnect = () => {\n      this.socket.emit(\"map\", {\n        user: this.props.loggedInUserFullName\n      });\n      console.log(this.socket.id + ' mapped to ' + this.props.loggedInUserFullName);\n    };\n\n    this.onUpdateUserList = data => {\n      let sockIds = [...this.state.userSockIds];\n      let newSockIds = data.users;\n      newSockIds.forEach(sockId => {\n        if (!sockIds.includes(sockId)) sockIds.push(sockId);\n      });\n      console.log(data.socketMap);\n      console.log(sockIds);\n      this.setState({\n        userSockIds: sockIds,\n        socketMap: data.socketMap\n      });\n    };\n\n    this.callUser = async (sockId, e) => {\n      console.log('Call User ' + sockId + ' ' + this.state.socketMap[sockId]);\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(offer)); //console.log(JSON.stringify(offer));\n      //console.log(this.peerConnection);\n\n      this.socket.emit(\"call-user\", {\n        offer,\n        to: sockId\n      });\n      this.setState({\n        message: `Talking with: user: ${userName} (${sockId})`\n      });\n    };\n\n    this.handleOnIceEvent = rtcPeerConnectionIceEvent => {\n      console.log('ICE event handle');\n\n      if (rtcPeerConnectionIceEvent.candidate && this.peerConnection) {\n        const {\n          candidate\n        } = rtcPeerConnectionIceEvent;\n        this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n      }\n    };\n\n    this.handleIceCandidate = async data => {\n      //console.log('new ice candidate to add');\n      //console.log(data);\n      const candidate = JSON.parse(data);\n      const revCandidate = new RTCIceCandidate({\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        candidate: candidate.candidate\n      });\n      await this.peerConnection.addIceCandidate(revCandidate);\n    };\n\n    this.sendAnswer = async data => {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n      console.log('call received'); //console.log(this.peerConnection);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.socket\n      });\n      this.setState({\n        callRcvd: true\n      });\n    };\n\n    this.onCallRcvd = async data => {\n      console.log('callRcvd ' + this.state.callRcvd);\n\n      if (!this.state.callRcvd && !this.state.answerRcvd) {\n        const confirmed = window.confirm(`User \"Socket: ${data.socket}\" wants to call you. Do accept this call?`);\n\n        if (!confirmed) {\n          this.socket.emit(\"reject-call\", {\n            from: data.socket\n          });\n        } else {\n          await this.sendAnswer(data);\n        }\n      } else {\n        await this.sendAnswer(data);\n      }\n    };\n\n    this.AckCallee = async sockId => {\n      console.log('Ack Callee  ' + sockId + ' ' + this.state.socketMap[sockId]); //console.log(JSON.stringify(offer));\n      //console.log(this.peerConnection);\n\n      this.socket.emit(\"ack-callee\", {\n        to: sockId\n      }); //this.setState({message: `Talking with: user: ${userName} (${sockId})`});\n    };\n\n    this.onAckCalleeRcvd = async data => {\n      console.log('on ack callee received ');\n      this.callAttempt++;\n\n      if (this.state.remoteStream.getTracks().length <= 0 && this.callAttempt < 3) {}\n    };\n\n    this.onCallRejected = data => {\n      alert(`User: ${this.state.socketMap[data.socket]} (${data.socket}) rejected your call.`); //unselectUsersFromList();\n    };\n\n    this.onRemoveUser = ({\n      socketId\n    }) => {\n      let userSockIds = this.state.userSockIds.filter(val => val !== socketId);\n      let socketMap = Object.assign({}, this.state.socketMap);\n      delete socketMap[socketId];\n      this.setState({\n        socketMap,\n        userSockIds\n      });\n    };\n\n    this.onAnswerRcvd = async data => {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));\n      console.log('on Answer Rcvd');\n\n      if (!this.state.answerRcvd && !this.state.callRcvd) {\n        console.log(this.peerConnection); //this.callUser(data.socket, null).then();\n\n        this.setState({\n          answerRcvd: true\n        });\n      } //if(this.state.remoteStream.getTracks().length<=0)\n\n\n      this.AckCallee(data.socket);\n    };\n\n    this.setRemoteStream = remoteStream => {\n      this.setState({\n        remoteStream: remoteStream\n      });\n    };\n\n    this.state = {\n      callRcvd: false,\n      answerRcvd: false,\n      localStream: null,\n      remoteStream: null,\n      shareScreen: false,\n      userSockIds: [],\n      socketMap: {},\n      message: 'Select a user on the left menu to start sharing.'\n    };\n    this.peerConnection = new RTCPeerConnection({\n      iceServers: ICE_SERVERS\n    }); //this.socket = socketIOClient(ENDPOINT);\n\n    this.socket = socketIOClient(); //console.log(this.socket);\n\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions = {\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.callAttempt = 0;\n  }\n\n  componentDidMount() {\n    if (this.props.loggedInUserFullName !== '') {\n      if (this.state.shareScreen) {\n        navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      } else {\n        navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        ;\n      }\n\n      const remoteStream = new MediaStream(); //console.log(remoteStream.getTracks());\n\n      this.setState({\n        remoteStream\n      });\n    }\n  }\n\n  render() {\n    if (this.props.loggedInUserFullName === '') {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/errorLogin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(SocketExt, {\n        socket: this.socket,\n        onSocketConnect: this.onSocketConnect,\n        onUpdateUserList: this.onUpdateUserList,\n        onRemoveUser: this.onRemoveUser,\n        onCallRcvd: this.onCallRcvd,\n        onAckCalleeRcvd: this.onAckCalleeRcvd,\n        onAnswerRcvd: this.onAnswerRcvd,\n        onCallRejected: this.onCallRejected,\n        handleIceCandidate: this.handleIceCandidate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(PeerConnectionExt, {\n        peerConnection: this.peerConnection,\n        localStream: this.state.localStream,\n        remoteStream: this.state.remoteStream,\n        setRemoteStream: this.setRemoteStream,\n        handleOnIceEvent: this.handleOnIceEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"active-users-panel\",\n        id: \"active-user-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"panel-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 25\n        }\n      }, \"Callable Users:\"), this.state.userSockIds.map(val => /*#__PURE__*/React.createElement(\"div\", {\n        id: this.state.socketMap[val],\n        key: val,\n        onClick: e => {\n          this.callUser(val, this.state.socketMap[val], e).then();\n        },\n        className: \"active-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 59\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 59\n        }\n      }, this.state.socketMap[val], \"(\", val, \")\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-chat-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"talk-info\",\n        id: \"talking-with-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 29\n        }\n      }, this.state.message), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 29\n        }\n      }, \"Share Screen: \", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"shareScreen\",\n        checked: this.state.shareScreen,\n        onChange: this.shareScreenChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        muted: \"muted\",\n        mediaStream: this.state.localStream,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        mediaStream: this.state.remoteStream,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 31\n        }\n      })))));\n    }\n  }\n\n}\n\nexport default ChatHome;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/chat/ChatHome.js"],"names":["React","socketIOClient","Redirect","VideoExt","SocketExt","PeerConnectionExt","ICE_SERVERS","urls","credential","username","url","ChatHome","Component","constructor","props","dualShareHandler","mediaStream","setState","localStream","getTracks","forEach","track","peerConnection","addTrack","errorHandler","error","console","log","message","shareScreenChange","e","isChecked","target","checked","state","dualStream","navigator","mediaDevices","getDisplayMedia","displayMediaOptions","getUserMedia","camMediaOptions","shareScreen","trackArr","i","length","removeTrack","senders","getSenders","sender","kind","replaceTrack","onSocketConnect","socket","emit","user","loggedInUserFullName","id","onUpdateUserList","data","sockIds","userSockIds","newSockIds","users","sockId","includes","push","socketMap","callUser","offer","createOffer","setLocalDescription","RTCSessionDescription","to","userName","handleOnIceEvent","rtcPeerConnectionIceEvent","candidate","JSON","stringify","handleIceCandidate","parse","revCandidate","RTCIceCandidate","sdpMLineIndex","addIceCandidate","sendAnswer","setRemoteDescription","answer","createAnswer","callRcvd","onCallRcvd","answerRcvd","confirmed","window","confirm","from","AckCallee","onAckCalleeRcvd","callAttempt","remoteStream","onCallRejected","alert","onRemoveUser","socketId","filter","val","Object","assign","onAnswerRcvd","setRemoteStream","RTCPeerConnection","iceServers","video","cursor","audio","echoCancellation","noiseSuppression","componentDidMount","then","catch","MediaStream","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport {  Redirect } from 'react-router-dom';\nimport '../../css/Chat.css';\nimport VideoExt from './VideoExt';\nimport SocketExt from './SocketExt';\nimport PeerConnectionExt from './PeerConnectionExt';\n//const ENDPOINT = \"http://localhost:5000\";\nconst ICE_SERVERS=[\n  { urls: 'stun:stun.l.google.com:19302' },\n  /*{ urls: 'stun:stun1.l.google.com:19302' },\n  { urls: 'stun:stun2.l.google.com:19302' },\n  { urls: 'stun:stun3.l.google.com:19302' },\n  { urls: 'stun:stun4.l.google.com:19302' },*/\n  { urls: 'stun:stun.ekiga.net'},\n  {\n    urls: 'turn:numb.viagenie.ca',\n    credential: 'muazkh',\n    username: 'webrtc@live.com'\n  },\n  {\n      url: 'turn:192.158.29.39:3478?transport=tcp',\n      credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n      username: '28224511:1379330808'\n  },\n  {\n      url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n      credential: 'webrtc',\n      username: 'webrtc'\n  },\n  {\n      url: 'turn:13.250.13.83:3478?transport=tcp',\n      credential: 'YzYNCouZM1mhqhmseWk6',\n      username: 'YzYNCouZM1mhqhmseWk6'\n  }\n];\n\nclass ChatHome extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      callRcvd: false,\n      answerRcvd: false,\n      localStream: null,\n      remoteStream: null,\n      shareScreen: false,\n      userSockIds:[],\n      socketMap:{},\n      message: 'Select a user on the left menu to start sharing.'\n    }\n    this.peerConnection = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n    //this.socket = socketIOClient(ENDPOINT);\n    this.socket = socketIOClient();\n    //console.log(this.socket);\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n\n    this.camMediaOptions={\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.callAttempt=0;\n  }\n\n  dualShareHandler=(mediaStream)=>{\n    this.setState({localStream: mediaStream}, ()=>{\n      //mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track, mediaStream));\n      mediaStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n    });\n  };\n\n  errorHandler=error => {\n    console.log(error.message);\n  };\n\n  shareScreenChange=async (e)=>{\n      let isChecked=e.target.checked;\n      let {localStream, peerConnection}=this.state;\n      //console.log(e.target.checked);\n      //console.log('value '+e.target.value);\n      let dualStream;\n      if(isChecked){\n          dualStream=await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      }\n      else{\n        dualStream=await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if(localStream===null){\n        //dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track,dualStream));\n        dualStream.getTracks().forEach(track => this.peerConnection.addTrack(track));\n        this.setState({localStream: dualStream, shareScreen: isChecked})\n      }\n      else{\n        //console.log(dualStream);\n        //console.log(localStream.getTracks());\n        /*let vidTrack, audTrack;\n        if(dualStream.getVideoTracks())\n          vidTrack= dualStream.getVideoTracks()[0];\n        if(dualStream.getAudioTracks())\n          audTrack=dualStream.getAudioTracks()[0];*/\n\n        let trackArr=[...localStream.getTracks()];\n        for(let i=0;i<trackArr.length;i++)\n            await localStream.removeTrack(trackArr[i]);\n\n        //\n        const senders = this.peerConnection.getSenders();\n        for(let i=0;i<dualStream.getTracks().length;i++){\n            await localStream.addTrack(dualStream.getTracks()[i]);\n            senders.forEach((sender) => {\n                                if(dualStream.getTracks()[i].kind===sender.track.kind)\n                                    sender.replaceTrack(dualStream.getTracks()[i]);\n                                  //this.peerConnection.removeTrack(sender)\n                              });\n            //this.peerConnection.addTrack(dualStream.getTracks()[i]);\n        }\n        console.log(this.peerConnection.getSenders());\n\n        //localStream.addTrack(vidTrack)\n        //const transceiver = this.peerConnection.getTransceivers()[0];\n        //transceiver['sender'].replaceTrack(vidTrack);\n        this.setState({shareScreen: isChecked});\n      }\n\n  }\n\n  componentDidMount(){\n    if(this.props.loggedInUserFullName!==''){\n        if(this.state.shareScreen){\n            navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        }\n        else{\n          navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);;\n        }\n        const remoteStream = new MediaStream();\n        //console.log(remoteStream.getTracks());\n        this.setState({remoteStream});\n   }\n  }\n\n  onSocketConnect=()=>{\n    this.socket.emit(\"map\", {\n      user: this.props.loggedInUserFullName\n    });\n    console.log(this.socket.id+' mapped to '+this.props.loggedInUserFullName);\n  }\n\n  onUpdateUserList=(data) => {\n    let sockIds=[...this.state.userSockIds];\n    let newSockIds=data.users;\n    newSockIds.forEach(sockId=>{\n      if(!sockIds.includes(sockId))\n        sockIds.push(sockId);\n    })\n    console.log(data.socketMap);\n    console.log(sockIds);\n    this.setState({userSockIds: sockIds, socketMap: data.socketMap});\n  };\n\n\n  callUser=async (sockId, e)=>{\n    console.log('Call User '+sockId+' '+this.state.socketMap[sockId]);\n    const offer = await this.peerConnection.createOffer();\n    await this.peerConnection.setLocalDescription(new RTCSessionDescription(offer));\n    //console.log(JSON.stringify(offer));\n    //console.log(this.peerConnection);\n\n    this.socket.emit(\"call-user\", {\n      offer,\n      to: sockId\n    });\n    this.setState({message: `Talking with: user: ${userName} (${sockId})`});\n  }\n\n\n handleOnIceEvent = (rtcPeerConnectionIceEvent) => {\n   console.log('ICE event handle')\n   if (rtcPeerConnectionIceEvent.candidate && this.peerConnection) {\n     const { candidate } = rtcPeerConnectionIceEvent;\n     this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n   }\n }\n\n handleIceCandidate = async (data) => {\n   //console.log('new ice candidate to add');\n   //console.log(data);\n  const candidate = JSON.parse(data);\n  const revCandidate=new RTCIceCandidate({\n    sdpMLineIndex: candidate.sdpMLineIndex,\n    candidate: candidate.candidate\n  });\n  await this.peerConnection.addIceCandidate(revCandidate);\n }\n\n  sendAnswer=async (data)=>{\n      await this.peerConnection.setRemoteDescription(\n        new RTCSessionDescription(data.offer)\n      );\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n\n      console.log('call received');\n      //console.log(this.peerConnection);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.socket\n      });\n      this.setState({callRcvd: true});\n  }\n\n  onCallRcvd=async (data) => {\n    console.log('callRcvd '+this.state.callRcvd);\n\n    if (!this.state.callRcvd && !this.state.answerRcvd) {\n      const confirmed = window.confirm(\n        `User \"Socket: ${data.socket}\" wants to call you. Do accept this call?`\n      );\n      if (!confirmed) {\n        this.socket.emit(\"reject-call\", {\n          from: data.socket\n        });\n      }\n      else{\n        await this.sendAnswer(data);\n      }\n    }\n    else{\n         await this.sendAnswer(data);\n    }\n\n  }\n\n  AckCallee=async (sockId)=>{\n    console.log('Ack Callee  '+sockId+' '+ this.state.socketMap[sockId]);\n    //console.log(JSON.stringify(offer));\n    //console.log(this.peerConnection);\n\n    this.socket.emit(\"ack-callee\", {\n      to: sockId\n    });\n    //this.setState({message: `Talking with: user: ${userName} (${sockId})`});\n  }\n\n  onAckCalleeRcvd=async (data)=>{\n      console.log('on ack callee received ');\n      this.callAttempt++;\n     if(this.state.remoteStream.getTracks().length<=0 && this.callAttempt<3){\n\n     }\n  }\n\n  onCallRejected=data => {\n    alert(`User: ${this.state.socketMap[data.socket]} (${data.socket}) rejected your call.`);\n    //unselectUsersFromList();\n  }\n\n  onRemoveUser=({ socketId }) => {\n    let userSockIds=this.state.userSockIds.filter((val)=>val!==socketId);\n    let socketMap=Object.assign({}, this.state.socketMap);\n    delete socketMap[socketId];\n    this.setState({socketMap, userSockIds});\n  }\n\n\n\n  onAnswerRcvd=async (data) => {\n    await this.peerConnection.setRemoteDescription(\n      new RTCSessionDescription(data.answer)\n    );\n      console.log('on Answer Rcvd');\n    if (!this.state.answerRcvd && !this.state.callRcvd)\n    {\n      console.log(this.peerConnection);\n      //this.callUser(data.socket, null).then();\n      this.setState({answerRcvd: true});\n    }\n    //if(this.state.remoteStream.getTracks().length<=0)\n      this.AckCallee(data.socket);\n  }\n\n  setRemoteStream=(remoteStream) => {\n    this.setState({ remoteStream: remoteStream });\n  }\n\n\n  render(){\n    if(this.props.loggedInUserFullName===''){\n      return <Redirect to=\"/errorLogin\"/>\n    }\n    else\n    {\n        return(\n          <div>\n                <SocketExt\n                  socket={this.socket}\n                  onSocketConnect={this.onSocketConnect}\n                  onUpdateUserList={this.onUpdateUserList}\n                  onRemoveUser={this.onRemoveUser}\n                  onCallRcvd={this.onCallRcvd}\n                  onAckCalleeRcvd={this.onAckCalleeRcvd}\n                  onAnswerRcvd={this.onAnswerRcvd}\n                  onCallRejected={this.onCallRejected}\n                  handleIceCandidate={this.handleIceCandidate}\n                />\n                <PeerConnectionExt\n                 peerConnection={this.peerConnection}\n                 localStream={this.state.localStream}\n                 remoteStream={this.state.remoteStream}\n                 setRemoteStream={this.setRemoteStream}\n                 handleOnIceEvent={this.handleOnIceEvent}\n                />\n                <div className=\"content-container\">\n                      <div className=\"active-users-panel\"  id=\"active-user-container\">\n                        <h3 className=\"panel-title\">Callable Users:</h3>\n                        {this.state.userSockIds.map(val=>(<div id={this.state.socketMap[val]} key={val} onClick={(e)=>{this.callUser(val, this.state.socketMap[val], e).then()}} className=\"active-user\">\n                                                          <p className=\"username\">\n                                                            {this.state.socketMap[val]}({val})\n                                                          </p>\n                                                         </div>\n                                                         )\n                                              )}\n                      </div>\n                      <div className=\"video-chat-container\">\n                            {/*<h2>Logged In User: {this.props.loggedInUserFullName}</h2>*/}\n                            <h2 className=\"talk-info\" id=\"talking-with-info\">\n                              {this.state.message}\n                            </h2>\n                            <div className=\"video-container\">\n                              Share Screen: <input type=\"checkbox\" id=\"shareScreen\" checked={this.state.shareScreen}\n                                              onChange={this.shareScreenChange}/>\n                              <br/>\n                              <VideoExt\n                              controls={true}\n                              muted=\"muted\"\n                              mediaStream={this.state.localStream} />\n                              <VideoExt\n                              controls\n                              mediaStream={this.state.remoteStream} />\n                            </div>\n                      </div>\n                </div>\n          </div>\n        )\n      }\n  }\n}\n\nexport default ChatHome;\n"]},"metadata":{},"sourceType":"module"}