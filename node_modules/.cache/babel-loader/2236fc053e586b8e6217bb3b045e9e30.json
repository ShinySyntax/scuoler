{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar keys = require('./keys');\n\nvar hasBinary = require('has-binary2');\n\nvar sliceBuffer = require('arraybuffer.slice');\n\nvar after = require('after');\n\nvar utf8 = require('./utf8');\n\nvar base64encoder;\n\nif (typeof ArrayBuffer !== 'undefined') {\n  base64encoder = require('base64-arraybuffer');\n}\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\n\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\n\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\n\nvar dontSendBlobs = isAndroid || isPhantomJS;\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n  open: 0 // non-ws\n  ,\n  close: 1 // non-ws\n  ,\n  ping: 2,\n  pong: 3,\n  message: 4,\n  upgrade: 5,\n  noop: 6\n};\nvar packetslist = keys(packets);\n/**\n * Premade error packet.\n */\n\nvar err = {\n  type: 'error',\n  data: 'parser error'\n};\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = require('blob');\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;\n\n  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  } // might be an object with { base64: true, data: dataAsBase64String }\n\n\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  } // Sending data as a utf-8 string\n\n\n  var encoded = packets[packet.type]; // data fragment is optional\n\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), {\n      strict: false\n    }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n/**\n * Encode packet helpers for binary types\n */\n\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n  resultBuffer[0] = packets[packet.type];\n\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i + 1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n\n  fr.onload = function () {\n    exports.encodePacket({\n      type: packet.type,\n      data: fr.result\n    }, supportsBinary, true, callback);\n  };\n\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n  return callback(blob);\n}\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\n\nexports.encodeBase64Packet = function (packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n\n  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {\n    var fr = new FileReader();\n\n    fr.onload = function () {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n\n  message += btoa(b64data);\n  return callback(message);\n};\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  } // String data\n\n\n  if (typeof data === 'string') {\n    if (data.charAt(0) === 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n\n      if (data === false) {\n        return err;\n      }\n    }\n\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return {\n        type: packetslist[type],\n        data: data.substring(1)\n      };\n    } else {\n      return {\n        type: packetslist[type]\n      };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n\n  return {\n    type: packetslist[type],\n    data: rest\n  };\n};\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, {\n      strict: false\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return data;\n}\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\n\nexports.decodeBase64Packet = function (msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n\n  if (!base64encoder) {\n    return {\n      type: type,\n      data: {\n        base64: true,\n        data: msg.substr(1)\n      }\n    };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return {\n    type: type,\n    data: data\n  };\n};\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function (err, results) {\n    return callback(results.join(''));\n  });\n};\n/**\n * Async array map using after\n */\n\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function (i, el, cb) {\n    each(el, function (error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data !== 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '',\n      n,\n      msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    }\n\n    if (length === '' || length != (n = Number(length))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = exports.decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var ret = callback(packet, i + n, l);\n      if (false === ret) return;\n    } // advance cursor\n\n\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n};\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\n\nexports.encodePayloadAsArrayBuffer = function (packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function (data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function (err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function (acc, p) {\n      var len;\n\n      if (typeof p === 'string') {\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n    var resultArray = new Uint8Array(totalLength);\n    var bufferIndex = 0;\n    encodedPackets.forEach(function (p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n\n      if (isString) {\n        var view = new Uint8Array(p.length);\n\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n\n        ab = view.buffer;\n      }\n\n      if (isString) {\n        // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else {\n        // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n\n      resultArray[bufferIndex++] = 255;\n      var view = new Uint8Array(ab);\n\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n    return callback(resultArray.buffer);\n  });\n};\n/**\n * Encode as Blob\n */\n\n\nexports.encodePayloadAsBlob = function (packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function (encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function (err, results) {\n    return callback(new Blob(results));\n  });\n};\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1;; i++) {\n      if (tailArray[i] === 255) break; // 310 = char length of Number.MAX_VALUE\n\n      if (msgLength.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function (buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};","map":{"version":3,"sources":["/home/mathew/javascript/ischools/node_modules/engine.io-parser/lib/browser.js"],"names":["keys","require","hasBinary","sliceBuffer","after","utf8","base64encoder","ArrayBuffer","isAndroid","navigator","test","userAgent","isPhantomJS","dontSendBlobs","exports","protocol","packets","open","close","ping","pong","message","upgrade","noop","packetslist","err","type","data","Blob","encodePacket","packet","supportsBinary","utf8encode","callback","undefined","buffer","encodeArrayBuffer","encodeBlob","base64","encodeBase64Object","encoded","encode","String","strict","encodeBase64Packet","contentArray","Uint8Array","resultBuffer","byteLength","i","length","encodeBlobAsArrayBuffer","fr","FileReader","onload","result","readAsArrayBuffer","blob","b64","split","readAsDataURL","b64data","fromCharCode","apply","e","typed","basic","Array","btoa","decodePacket","binaryType","utf8decode","charAt","decodeBase64Packet","substr","tryDecode","Number","substring","asArray","rest","decode","msg","encodePayload","isBinary","encodePayloadAsBlob","encodePayloadAsArrayBuffer","setLengthHeader","encodeOne","doneCallback","map","results","join","ary","each","done","next","eachWithIndex","el","cb","error","decodePayload","decodePayloadAsBinary","n","l","chr","ret","encodedPackets","totalLength","reduce","acc","p","len","toString","resultArray","bufferIndex","forEach","isString","ab","view","charCodeAt","lenStr","parseInt","binaryIdentifier","size","lengthAry","bufferTail","buffers","tailArray","msgLength","push","total"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar keys = require('./keys');\nvar hasBinary = require('has-binary2');\nvar sliceBuffer = require('arraybuffer.slice');\nvar after = require('after');\nvar utf8 = require('./utf8');\n\nvar base64encoder;\nif (typeof ArrayBuffer !== 'undefined') {\n  base64encoder = require('base64-arraybuffer');\n}\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = require('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n  // String data\n  if (typeof data === 'string') {\n    if (data.charAt(0) === 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n      if (data === false) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, { strict: false });\n  } catch (e) {\n    return false;\n  }\n  return data;\n}\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!base64encoder) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data !== 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '', n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    }\n\n    if (length === '' || (length != (n = Number(length)))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = exports.decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var ret = callback(packet, i + n, l);\n      if (false === ret) return;\n    }\n\n    // advance cursor\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] === 255) break;\n\n      // 310 = char length of Number.MAX_VALUE\n      if (msgLength.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}