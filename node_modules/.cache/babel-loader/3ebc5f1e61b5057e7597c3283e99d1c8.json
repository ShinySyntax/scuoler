{"ast":null,"code":"var _jsxFileName = \"/home/mathew/javascript/ischools-react/client/src/components/MeetingShowSelected.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport socketIOClient from \"socket.io-client\";\nimport data from \"./data\";\nimport '../css/Chat.css';\nimport VideoExt from './chat/VideoExt';\nimport SocketX from './chat/SocketX';\nimport PeerConnectionExt from './chat/PeerConnectionExt';\nconst ICE_SERVERS = [{\n  urls: 'turn:numb.viagenie.ca',\n  credential: 'muazkh',\n  username: 'webrtc@live.com'\n}, {\n  url: 'turn:192.158.29.39:3478?transport=tcp',\n  credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n  username: '28224511:1379330808'\n}, {\n  url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n  credential: 'webrtc',\n  username: 'webrtc'\n}, {\n  url: 'turn:13.250.13.83:3478?transport=tcp',\n  credential: 'YzYNCouZM1mhqhmseWk6',\n  username: 'YzYNCouZM1mhqhmseWk6'\n}, {\n  urls: 'stun:stun.l.google.com:19302'\n},\n/*{ urls: 'stun:stun1.l.google.com:19302' },\n{ urls: 'stun:stun2.l.google.com:19302' },\n{ urls: 'stun:stun3.l.google.com:19302' },\n{ urls: 'stun:stun4.l.google.com:19302' },*/\n{\n  urls: 'stun:stun.ekiga.net'\n}];\n\nclass MeetingShowSelected extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dualShareHandler = mediaStream => {\n      this.setState({\n        localStream: mediaStream\n      });\n    };\n\n    this.errorHandler = error => {\n      console.log(error.message);\n    };\n\n    this.shareScreenChange = async e => {\n      let isChecked = e.target.checked;\n      let {\n        localStream\n      } = this.state;\n      let dualStream;\n\n      if (isChecked) {\n        dualStream = await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n      } else {\n        dualStream = await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n      }\n\n      if (localStream === null) {\n        for (let key in this.peerConnections) dualStream.getTracks().forEach(track => this.peerConnections[key].addTrack(track));\n\n        this.setState({\n          localStream: dualStream,\n          shareScreen: isChecked\n        });\n      } else {\n        let trackArr = [...localStream.getTracks()];\n\n        for (let i = 0; i < trackArr.length; i++) await localStream.removeTrack(trackArr[i]);\n\n        for (let i = 0; i < dualStream.getTracks().length; i++) {\n          await localStream.addTrack(dualStream.getTracks()[i]);\n\n          for (let key in this.peerConnections) {\n            const senders = this.peerConnections[key].getSenders();\n            senders.forEach(sender => {\n              if (dualStream.getTracks()[i].kind === sender.track.kind) sender.replaceTrack(dualStream.getTracks()[i]);\n            });\n          }\n        }\n\n        this.setState({\n          shareScreen: isChecked\n        });\n      }\n    };\n\n    this.onSocketConnect = () => {\n      if (this.socket) {\n        this.socket.emit(\"map\", {\n          userName: this.props.loggedInUserFullName,\n          userId: this.props.loggedInUser\n        });\n        console.log(this.socket);\n        console.log(' mapped to ' + this.props.loggedInUser);\n      }\n    };\n\n    this.onUpdateUserList = data => {\n      let userIds = [...this.state.userIds];\n      let newUserIds = data.userIds;\n      newUserIds.forEach(id => {\n        if (!userIds.includes(id)) userIds.push(id);\n      });\n      console.log('In update user list');\n      console.log(userIds);\n      console.log(data.nameMap);\n      this.setState({\n        userIds,\n        userNameMap: data.nameMap\n      }, () => {\n        if (userIds.includes(this.organiserId) && !this.state.callMadeByNonOrganiser) {\n          this.callUser(this.organiserId);\n          this.setState({\n            callMadeByNonOrganiser: true\n          });\n        }\n      });\n    };\n\n    this.callUser = async userId => {\n      console.log('Call User ' + userId + ' ' + this.state.userNameMap[userId]);\n      if (this.isRemotePlaying[userId] === undefined) this.isRemotePlaying[userId] = false;\n      if (this.callAttempts[userId] === undefined) this.callAttempts[userId] = 0;else this.callAttempts[userId]++;\n\n      if (this.state.remoteStreams[userId] === undefined || this.peerConnections[userId] === undefined) {\n        this.peerConnections[userId] = new RTCPeerConnection({\n          iceServers: ICE_SERVERS\n        });\n        if (this.state.localStream) this.state.localStream.getTracks().forEach(track => this.peerConnections[userId].addTrack(track));\n        let remoteStreams = Object.assign({}, this.state.remoteStreams);\n        remoteStreams[userId] = new MediaStream();\n        this.setState({\n          remoteStreams\n        });\n      } //console.log(this.peerConnection);\n\n\n      if (!this.isRemotePlaying[userId] && this.callAttempts[userId] < 3) {\n        console.log('Call Attempts ' + this.callAttempts[userId]);\n        const offer = await this.peerConnections[userId].createOffer();\n        await this.peerConnections[userId].setLocalDescription(new RTCSessionDescription(offer));\n        this.socket.emit(\"call-user\", {\n          offer,\n          to: userId,\n          from: this.props.loggedInUser\n        });\n        this.setState({\n          message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`\n        });\n      }\n    };\n\n    this.onCallRcvd = async data => {\n      //console.log('callRcvd '+this.state.callRcvd);\n      if (this.state.remoteStreams[data.from] === undefined || this.peerConnections[data.from] === undefined) {\n        this.peerConnections[data.from] = new RTCPeerConnection({\n          iceServers: ICE_SERVERS\n        });\n        if (this.state.localStream) this.state.localStream.getTracks().forEach(track => this.peerConnections[data.from].addTrack(track));\n        let remoteStreams = Object.assign({}, this.state.remoteStreams);\n        remoteStreams[data.from] = new MediaStream();\n        this.setState({\n          remoteStreams\n        });\n      }\n\n      await this.peerConnections[data.from].setRemoteDescription(new RTCSessionDescription(data.offer));\n      const answer = await this.peerConnections[data.from].createAnswer();\n      console.log('answer \\n' + JSON.stringify(answer));\n      await this.peerConnections[data.from].setLocalDescription(new RTCSessionDescription(answer)); //console.log(this.peerConnections[data.from]);\n\n      this.socket.emit(\"make-answer\", {\n        answer,\n        to: data.from,\n        from: this.props.loggedInUser\n      }); //this.setState({callRcvd: true});\n    };\n\n    this.onAnswerRcvd = async data => {\n      console.log('on Answer Rcvd' + JSON.stringify(data.answer));\n      await this.peerConnections[data.from].setRemoteDescription(new RTCSessionDescription(data.answer));\n      /*if (!this.state.answerRcvd && !this.state.callRcvd)\n      {\n        this.setState({answerRcvd: true});\n      }*/\n\n      this.socket.emit(\"ack-callee\", {\n        to: data.from,\n        from: this.props.loggedInUser\n      });\n    };\n\n    this.onAckCalleeRcvd = data => {\n      console.log('on ack callee received, callAttempts ' + this.callAttempts[data.from] + ' remotePlaying' + this.isRemotePlaying[data.from]);\n      if (this.state.remoteStreams[data.from].getTracks().length <= 0 && this.callAttempts[data.from] < 3) this.callUser(data.from, null).then();\n    };\n\n    this.onRemoveUser = ({\n      userId\n    }) => {\n      console.log('removing user ' + userId);\n      let userIds = this.state.userIds.filter(val => val !== userId);\n      let userNameMap = {};\n\n      for (let attr in this.state.userNameMap) {\n        if (userIds.includes(attr)) userNameMap[attr] = this.state.userNameMap[attr];\n      }\n\n      if (this.props.loggedInUser === this.organiserId) {\n        delete this.peerConnections[userId];\n      }\n\n      if (userId === this.organiserId) this.setState({\n        userNameMap,\n        userIds,\n        callMadeByNonOrganiser: false\n      });else this.setState({\n        userNameMap,\n        userIds\n      });\n    };\n\n    this.handleIceCandidate = async data => {};\n\n    this.handleOnIceEvent = rtcPeerConnectionIceEvent => {\n      console.log('ICE event handle');\n      /*if (rtcPeerConnectionIceEvent.candidate && this.peerConnection) {\n        const { candidate } = rtcPeerConnectionIceEvent;\n        this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n      }*/\n    };\n\n    this.onRemoteVideoPlaying = (e, key) => {\n      this.isRemotePlaying[key] = true;\n      console.log('remote video playing event for remote user ' + key);\n      console.log(e);\n    };\n\n    this.state = {\n      icons: data.icons,\n      userIds: [],\n      userNameMap: {},\n      message: 'Select a user on the left menu to start sharing.',\n      callMadeByNonOrganiser: false,\n      //callRcvd: false,\n      //answerRcvd: false,\n      localStream: null,\n      remoteStreams: {},\n      shareScreen: false\n    };\n    const {\n      params\n    } = this.props.match;\n    this.meetingId = params.id;\n    this.organiserId = params.organiserId;\n    this.peerConnections = {};\n    this.callAttempts = {};\n    this.isRemotePlaying = {}; //this.socket = socketIOClient(ENDPOINT);\n\n    this.socket = socketIOClient(\"/\" + this.meetingId);\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions = {\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.loggedInUserFullName !== '') {\n      if (this.state.shareScreen) {\n        navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n      } else {\n        navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        ;\n      }\n    }\n  }\n\n  render() {\n    if (this.props.loggedInUserFullName === '') {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/errorLogin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 16\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      }, \"Meeting Show Selected\", /*#__PURE__*/React.createElement(SocketX, {\n        socket: this.socket,\n        onSocketConnect: this.onSocketConnect,\n        onUpdateUserList: this.onUpdateUserList,\n        onRemoveUser: this.onRemoveUser,\n        onCallRcvd: this.onCallRcvd,\n        onAnswerRcvd: this.onAnswerRcvd,\n        onAckCalleeRcvd: this.onAckCalleeRcvd,\n        handleIceCandidate: this.handleIceCandidate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 14\n        }\n      }), Object.keys(this.state.remoteStreams).map(key => /*#__PURE__*/React.createElement(PeerConnectionExt, {\n        peerConnection: this.peerConnections[key],\n        localStream: this.state.localStream,\n        remoteStream: this.state.remoteStreams[key],\n        handleOnIceEvent: this.handleOnIceEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"active-users-panel\",\n        id: \"active-user-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"panel-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 23\n        }\n      }, \"Callable Users:\"), this.state.userIds.map(val => /*#__PURE__*/React.createElement(\"div\", {\n        id: val,\n        key: val,\n        className: \"active-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 57\n        }\n      }, this.state.userNameMap[val], \"(\", val, \")\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-chat-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"talk-info\",\n        id: \"talking-with-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 27\n        }\n      }, this.state.message), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 27\n        }\n      }, \"Share Screen: \", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"shareScreen\",\n        checked: this.state.shareScreen,\n        onChange: this.shareScreenChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 43\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        muted: \"muted\",\n        mediaStream: this.state.localStream,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 29\n        }\n      }), Object.keys(this.state.remoteStreams).map(key => /*#__PURE__*/React.createElement(VideoExt, {\n        controls: true,\n        mediaStream: this.state.remoteStreams[key],\n        onPlaying: e => this.onRemoteVideoPlaying(e, key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 32\n        }\n      }))))));\n    }\n  }\n\n}\n\nexport default MeetingShowSelected;","map":{"version":3,"sources":["/home/mathew/javascript/ischools-react/client/src/components/MeetingShowSelected.js"],"names":["React","Redirect","socketIOClient","data","VideoExt","SocketX","PeerConnectionExt","ICE_SERVERS","urls","credential","username","url","MeetingShowSelected","Component","constructor","props","dualShareHandler","mediaStream","setState","localStream","errorHandler","error","console","log","message","shareScreenChange","e","isChecked","target","checked","state","dualStream","navigator","mediaDevices","getDisplayMedia","displayMediaOptions","getUserMedia","camMediaOptions","key","peerConnections","getTracks","forEach","track","addTrack","shareScreen","trackArr","i","length","removeTrack","senders","getSenders","sender","kind","replaceTrack","onSocketConnect","socket","emit","userName","loggedInUserFullName","userId","loggedInUser","onUpdateUserList","userIds","newUserIds","id","includes","push","nameMap","userNameMap","organiserId","callMadeByNonOrganiser","callUser","isRemotePlaying","undefined","callAttempts","remoteStreams","RTCPeerConnection","iceServers","Object","assign","MediaStream","offer","createOffer","setLocalDescription","RTCSessionDescription","to","from","onCallRcvd","setRemoteDescription","answer","createAnswer","JSON","stringify","onAnswerRcvd","onAckCalleeRcvd","then","onRemoveUser","filter","val","attr","handleIceCandidate","handleOnIceEvent","rtcPeerConnectionIceEvent","onRemoteVideoPlaying","icons","params","match","meetingId","video","cursor","audio","echoCancellation","noiseSuppression","componentDidMount","catch","render","keys","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,QAAV,QAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,iBAAP;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,MAAMC,WAAW,GAAC,CAChB;AACEC,EAAAA,IAAI,EAAE,uBADR;AAEEC,EAAAA,UAAU,EAAE,QAFd;AAGEC,EAAAA,QAAQ,EAAE;AAHZ,CADgB,EAMhB;AACIC,EAAAA,GAAG,EAAE,uCADT;AAEIF,EAAAA,UAAU,EAAE,8BAFhB;AAGIC,EAAAA,QAAQ,EAAE;AAHd,CANgB,EAWhB;AACIC,EAAAA,GAAG,EAAE,6CADT;AAEIF,EAAAA,UAAU,EAAE,QAFhB;AAGIC,EAAAA,QAAQ,EAAE;AAHd,CAXgB,EAgBhB;AACIC,EAAAA,GAAG,EAAE,sCADT;AAEIF,EAAAA,UAAU,EAAE,sBAFhB;AAGIC,EAAAA,QAAQ,EAAE;AAHd,CAhBgB,EAqBhB;AAAEF,EAAAA,IAAI,EAAE;AAAR,CArBgB;AAsBhB;;;;AAIA;AAAEA,EAAAA,IAAI,EAAE;AAAR,CA1BgB,CAAlB;;AA6BA,MAAMI,mBAAN,SAAkCZ,KAAK,CAACa,SAAxC,CAAiD;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SA2ClBC,gBA3CkB,GA2CAC,WAAD,IAAe;AAC9B,WAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAEF;AAAd,OAAd;AACD,KA7CiB;;AAAA,SA+ClBG,YA/CkB,GA+CLC,KAAK,IAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD,KAjDiB;;AAAA,SAmDlBC,iBAnDkB,GAmDA,MAAOC,CAAP,IAAW;AAC3B,UAAIC,SAAS,GAACD,CAAC,CAACE,MAAF,CAASC,OAAvB;AACA,UAAI;AAACV,QAAAA;AAAD,UAAc,KAAKW,KAAvB;AACA,UAAIC,UAAJ;;AACA,UAAGJ,SAAH,EAAa;AACTI,QAAAA,UAAU,GAAC,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuC,KAAKC,mBAA5C,CAAjB;AACH,OAFD,MAGI;AACFJ,QAAAA,UAAU,GAAC,MAAMC,SAAS,CAACC,YAAV,CAAuBG,YAAvB,CAAoC,KAAKC,eAAzC,CAAjB;AACD;;AACD,UAAGlB,WAAW,KAAG,IAAjB,EAAsB;AACpB,aAAI,IAAImB,GAAR,IAAe,KAAKC,eAApB,EACIR,UAAU,CAACS,SAAX,GAAuBC,OAAvB,CAA+BC,KAAK,IAAI,KAAKH,eAAL,CAAqBD,GAArB,EAA0BK,QAA1B,CAAmCD,KAAnC,CAAxC;;AAEJ,aAAKxB,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAEY,UAAd;AAA0Ba,UAAAA,WAAW,EAAEjB;AAAvC,SAAd;AACD,OALD,MAMI;AACF,YAAIkB,QAAQ,GAAC,CAAC,GAAG1B,WAAW,CAACqB,SAAZ,EAAJ,CAAb;;AACA,aAAI,IAAIM,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,QAAQ,CAACE,MAAvB,EAA8BD,CAAC,EAA/B,EACI,MAAM3B,WAAW,CAAC6B,WAAZ,CAAwBH,QAAQ,CAACC,CAAD,CAAhC,CAAN;;AAEJ,aAAI,IAAIA,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACf,UAAU,CAACS,SAAX,GAAuBO,MAArC,EAA4CD,CAAC,EAA7C,EAAgD;AAC5C,gBAAM3B,WAAW,CAACwB,QAAZ,CAAqBZ,UAAU,CAACS,SAAX,GAAuBM,CAAvB,CAArB,CAAN;;AACA,eAAI,IAAIR,GAAR,IAAe,KAAKC,eAApB,EAAoC;AAChC,kBAAMU,OAAO,GAAG,KAAKV,eAAL,CAAqBD,GAArB,EAA0BY,UAA1B,EAAhB;AACAD,YAAAA,OAAO,CAACR,OAAR,CAAiBU,MAAD,IAAY;AACR,kBAAGpB,UAAU,CAACS,SAAX,GAAuBM,CAAvB,EAA0BM,IAA1B,KAAiCD,MAAM,CAACT,KAAP,CAAaU,IAAjD,EACID,MAAM,CAACE,YAAP,CAAoBtB,UAAU,CAACS,SAAX,GAAuBM,CAAvB,CAApB;AACL,aAHnB;AAIH;AACJ;;AACD,aAAK5B,QAAL,CAAc;AAAC0B,UAAAA,WAAW,EAAEjB;AAAd,SAAd;AACD;AACF,KApFiB;;AAAA,SAkGlB2B,eAlGkB,GAkGF,MAAI;AAClB,UAAG,KAAKC,MAAR,EAAe;AACb,aAAKA,MAAL,CAAYC,IAAZ,CAAiB,KAAjB,EAAwB;AACtBC,UAAAA,QAAQ,EAAE,KAAK1C,KAAL,CAAW2C,oBADC;AAEtBC,UAAAA,MAAM,EAAE,KAAK5C,KAAL,CAAW6C;AAFG,SAAxB;AAIAtC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKgC,MAAjB;AACAjC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAc,KAAKR,KAAL,CAAW6C,YAArC;AACD;AACF,KA3GiB;;AAAA,SA6GlBC,gBA7GkB,GA6GA1D,IAAD,IAAU;AACzB,UAAI2D,OAAO,GAAC,CAAC,GAAG,KAAKhC,KAAL,CAAWgC,OAAf,CAAZ;AACA,UAAIC,UAAU,GAAC5D,IAAI,CAAC2D,OAApB;AACAC,MAAAA,UAAU,CAACtB,OAAX,CAAmBuB,EAAE,IAAE;AACrB,YAAG,CAACF,OAAO,CAACG,QAAR,CAAiBD,EAAjB,CAAJ,EACEF,OAAO,CAACI,IAAR,CAAaF,EAAb;AACH,OAHD;AAKA1C,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYuC,OAAZ;AACAxC,MAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAI,CAACgE,OAAjB;AACA,WAAKjD,QAAL,CAAc;AAAC4C,QAAAA,OAAD;AAAUM,QAAAA,WAAW,EAAEjE,IAAI,CAACgE;AAA5B,OAAd,EAAoD,MAAI;AACtD,YAAGL,OAAO,CAACG,QAAR,CAAiB,KAAKI,WAAtB,KAAsC,CAAC,KAAKvC,KAAL,CAAWwC,sBAArD,EAA4E;AACxE,eAAKC,QAAL,CAAc,KAAKF,WAAnB;AACA,eAAKnD,QAAL,CAAc;AAACoD,YAAAA,sBAAsB,EAAE;AAAzB,WAAd;AACH;AACF,OALD;AAMD,KA9HiB;;AAAA,SAgIlBC,QAhIkB,GAgIT,MAAOZ,MAAP,IAAgB;AACvBrC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAaoC,MAAb,GAAoB,GAApB,GAAwB,KAAK7B,KAAL,CAAWsC,WAAX,CAAuBT,MAAvB,CAApC;AAEA,UAAG,KAAKa,eAAL,CAAqBb,MAArB,MAA+Bc,SAAlC,EACE,KAAKD,eAAL,CAAqBb,MAArB,IAA6B,KAA7B;AAEF,UAAG,KAAKe,YAAL,CAAkBf,MAAlB,MAA4Bc,SAA/B,EACE,KAAKC,YAAL,CAAkBf,MAAlB,IAA0B,CAA1B,CADF,KAGE,KAAKe,YAAL,CAAkBf,MAAlB;;AAEF,UAAG,KAAK7B,KAAL,CAAW6C,aAAX,CAAyBhB,MAAzB,MAAmCc,SAAnC,IAA8C,KAAKlC,eAAL,CAAqBoB,MAArB,MAA+Bc,SAAhF,EAA0F;AACxF,aAAKlC,eAAL,CAAqBoB,MAArB,IAA+B,IAAIiB,iBAAJ,CAAsB;AAAEC,UAAAA,UAAU,EAAEtE;AAAd,SAAtB,CAA/B;AACA,YAAG,KAAKuB,KAAL,CAAWX,WAAd,EACE,KAAKW,KAAL,CAAWX,WAAX,CAAuBqB,SAAvB,GAAmCC,OAAnC,CAA2CC,KAAK,IAAI,KAAKH,eAAL,CAAqBoB,MAArB,EAA6BhB,QAA7B,CAAsCD,KAAtC,CAApD;AACF,YAAIiC,aAAa,GAACG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjD,KAAL,CAAW6C,aAA7B,CAAlB;AACAA,QAAAA,aAAa,CAAChB,MAAD,CAAb,GAAuB,IAAIqB,WAAJ,EAAvB;AACA,aAAK9D,QAAL,CAAc;AAACyD,UAAAA;AAAD,SAAd;AACD,OAlBsB,CAoBvB;;;AACA,UAAG,CAAC,KAAKH,eAAL,CAAqBb,MAArB,CAAD,IAAiC,KAAKe,YAAL,CAAkBf,MAAlB,IAA0B,CAA9D,EAAgE;AAC5DrC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAiB,KAAKmD,YAAL,CAAkBf,MAAlB,CAA7B;AACA,cAAMsB,KAAK,GAAG,MAAM,KAAK1C,eAAL,CAAqBoB,MAArB,EAA6BuB,WAA7B,EAApB;AACA,cAAM,KAAK3C,eAAL,CAAqBoB,MAArB,EAA6BwB,mBAA7B,CAAiD,IAAIC,qBAAJ,CAA0BH,KAA1B,CAAjD,CAAN;AAEA,aAAK1B,MAAL,CAAYC,IAAZ,CAAiB,WAAjB,EAA8B;AAC5ByB,UAAAA,KAD4B;AAE5BI,UAAAA,EAAE,EAAE1B,MAFwB;AAG5B2B,UAAAA,IAAI,EAAE,KAAKvE,KAAL,CAAW6C;AAHW,SAA9B;AAKA,aAAK1C,QAAL,CAAc;AAACM,UAAAA,OAAO,EAAG,uBAAsB,KAAKM,KAAL,CAAWsC,WAAX,CAAuBT,MAAvB,CAA+B,KAAIA,MAAO;AAA3E,SAAd;AACH;AAEF,KAlKiB;;AAAA,SAoKlB4B,UApKkB,GAoKP,MAAOpF,IAAP,IAAgB;AACzB;AACA,UAAG,KAAK2B,KAAL,CAAW6C,aAAX,CAAyBxE,IAAI,CAACmF,IAA9B,MAAsCb,SAAtC,IAAiD,KAAKlC,eAAL,CAAqBpC,IAAI,CAACmF,IAA1B,MAAkCb,SAAtF,EAAgG;AAC9F,aAAKlC,eAAL,CAAqBpC,IAAI,CAACmF,IAA1B,IAAkC,IAAIV,iBAAJ,CAAsB;AAAEC,UAAAA,UAAU,EAAEtE;AAAd,SAAtB,CAAlC;AACA,YAAG,KAAKuB,KAAL,CAAWX,WAAd,EACE,KAAKW,KAAL,CAAWX,WAAX,CAAuBqB,SAAvB,GAAmCC,OAAnC,CAA2CC,KAAK,IAAI,KAAKH,eAAL,CAAqBpC,IAAI,CAACmF,IAA1B,EAAgC3C,QAAhC,CAAyCD,KAAzC,CAApD;AAEF,YAAIiC,aAAa,GAACG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjD,KAAL,CAAW6C,aAA7B,CAAlB;AACAA,QAAAA,aAAa,CAACxE,IAAI,CAACmF,IAAN,CAAb,GAA0B,IAAIN,WAAJ,EAA1B;AACA,aAAK9D,QAAL,CAAc;AAACyD,UAAAA;AAAD,SAAd;AACD;;AAED,YAAM,KAAKpC,eAAL,CAAqBpC,IAAI,CAACmF,IAA1B,EAAgCE,oBAAhC,CACJ,IAAIJ,qBAAJ,CAA0BjF,IAAI,CAAC8E,KAA/B,CADI,CAAN;AAGA,YAAMQ,MAAM,GAAG,MAAM,KAAKlD,eAAL,CAAqBpC,IAAI,CAACmF,IAA1B,EAAgCI,YAAhC,EAArB;AACApE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAYoE,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAxB;AACA,YAAM,KAAKlD,eAAL,CAAqBpC,IAAI,CAACmF,IAA1B,EAAgCH,mBAAhC,CAAoD,IAAIC,qBAAJ,CAA0BK,MAA1B,CAApD,CAAN,CAjByB,CAkBzB;;AACA,WAAKlC,MAAL,CAAYC,IAAZ,CAAiB,aAAjB,EAAgC;AAC9BiC,QAAAA,MAD8B;AAE9BJ,QAAAA,EAAE,EAAElF,IAAI,CAACmF,IAFqB;AAG9BA,QAAAA,IAAI,EAAE,KAAKvE,KAAL,CAAW6C;AAHa,OAAhC,EAnByB,CAwBzB;AACD,KA7LiB;;AAAA,SA+LlBiC,YA/LkB,GA+LL,MAAO1F,IAAP,IAAgB;AAC1BmB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAiBoE,IAAI,CAACC,SAAL,CAAezF,IAAI,CAACsF,MAApB,CAA7B;AAEC,YAAM,KAAKlD,eAAL,CAAqBpC,IAAI,CAACmF,IAA1B,EAAgCE,oBAAhC,CACJ,IAAIJ,qBAAJ,CAA0BjF,IAAI,CAACsF,MAA/B,CADI,CAAN;AAGA;;;;;AAIA,WAAKlC,MAAL,CAAYC,IAAZ,CAAiB,YAAjB,EAA+B;AAC7B6B,QAAAA,EAAE,EAAElF,IAAI,CAACmF,IADoB;AAE7BA,QAAAA,IAAI,EAAE,KAAKvE,KAAL,CAAW6C;AAFY,OAA/B;AAIH,KA7MiB;;AAAA,SA+MlBkC,eA/MkB,GA+MD3F,IAAD,IAAQ;AACpBmB,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAwC,KAAKmD,YAAL,CAAkBvE,IAAI,CAACmF,IAAvB,CAAxC,GAAqE,gBAArE,GAAsF,KAAKd,eAAL,CAAqBrE,IAAI,CAACmF,IAA1B,CAAlG;AACA,UAAG,KAAKxD,KAAL,CAAW6C,aAAX,CAAyBxE,IAAI,CAACmF,IAA9B,EAAoC9C,SAApC,GAAgDO,MAAhD,IAAwD,CAAxD,IAA6D,KAAK2B,YAAL,CAAkBvE,IAAI,CAACmF,IAAvB,IAA6B,CAA7F,EACE,KAAKf,QAAL,CAAcpE,IAAI,CAACmF,IAAnB,EAAyB,IAAzB,EAA+BS,IAA/B;AACL,KAnNiB;;AAAA,SAsNlBC,YAtNkB,GAsNL,CAAC;AAAErC,MAAAA;AAAF,KAAD,KAAgB;AAC3BrC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAiBoC,MAA7B;AACA,UAAIG,OAAO,GAAC,KAAKhC,KAAL,CAAWgC,OAAX,CAAmBmC,MAAnB,CAA2BC,GAAD,IAAOA,GAAG,KAAGvC,MAAvC,CAAZ;AACA,UAAIS,WAAW,GAAC,EAAhB;;AACA,WAAI,IAAI+B,IAAR,IAAgB,KAAKrE,KAAL,CAAWsC,WAA3B,EAAuC;AACrC,YAAGN,OAAO,CAACG,QAAR,CAAiBkC,IAAjB,CAAH,EACE/B,WAAW,CAAC+B,IAAD,CAAX,GAAkB,KAAKrE,KAAL,CAAWsC,WAAX,CAAuB+B,IAAvB,CAAlB;AACH;;AACD,UAAG,KAAKpF,KAAL,CAAW6C,YAAX,KAA0B,KAAKS,WAAlC,EAA8C;AAC5C,eAAO,KAAK9B,eAAL,CAAqBoB,MAArB,CAAP;AACD;;AACD,UAAGA,MAAM,KAAG,KAAKU,WAAjB,EACE,KAAKnD,QAAL,CAAc;AAACkD,QAAAA,WAAD;AAAcN,QAAAA,OAAd;AAAuBQ,QAAAA,sBAAsB,EAAE;AAA/C,OAAd,EADF,KAGC,KAAKpD,QAAL,CAAc;AAACkD,QAAAA,WAAD;AAAcN,QAAAA;AAAd,OAAd;AACF,KArOiB;;AAAA,SAuOlBsC,kBAvOkB,GAuOG,MAAOjG,IAAP,IAAgB,CACpC,CAxOiB;;AAAA,SA0OlBkG,gBA1OkB,GA0OEC,yBAAD,IAA+B;AAChDhF,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA;;;;AAID,KAhPiB;;AAAA,SAkPlBgF,oBAlPkB,GAkPG,CAAC7E,CAAD,EAAIY,GAAJ,KAAU;AAC7B,WAAKkC,eAAL,CAAqBlC,GAArB,IAA0B,IAA1B;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,gDAA8Ce,GAA1D;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACD,KAtPiB;;AAEhB,SAAKI,KAAL,GAAW;AACT0E,MAAAA,KAAK,EAAErG,IAAI,CAACqG,KADH;AAET1C,MAAAA,OAAO,EAAC,EAFC;AAGTM,MAAAA,WAAW,EAAC,EAHH;AAIT5C,MAAAA,OAAO,EAAE,kDAJA;AAKT8C,MAAAA,sBAAsB,EAAE,KALf;AAMT;AACA;AACAnD,MAAAA,WAAW,EAAE,IARJ;AASTwD,MAAAA,aAAa,EAAE,EATN;AAUT/B,MAAAA,WAAW,EAAE;AAVJ,KAAX;AAYA,UAAM;AAAC6D,MAAAA;AAAD,QAAU,KAAK1F,KAAL,CAAW2F,KAA3B;AAEA,SAAKC,SAAL,GAAeF,MAAM,CAACzC,EAAtB;AACA,SAAKK,WAAL,GAAiBoC,MAAM,CAACpC,WAAxB;AACA,SAAK9B,eAAL,GAAqB,EAArB;AACA,SAAKmC,YAAL,GAAkB,EAAlB;AACA,SAAKF,eAAL,GAAqB,EAArB,CApBgB,CAsBhB;;AACA,SAAKjB,MAAL,GAAcrD,cAAc,CAAC,MAAI,KAAKyG,SAAV,CAA5B;AAEA,SAAKxE,mBAAL,GAA2B;AACzByE,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE;AADH,OADkB;AAIzBC,MAAAA,KAAK,EAAE;AACLC,QAAAA,gBAAgB,EAAE,IADb;AAELC,QAAAA,gBAAgB,EAAE;AAFb;AAJkB,KAA3B;AASA,SAAK3E,eAAL,GAAqB;AACnBuE,MAAAA,KAAK,EAAE,IADY;AAEnBE,MAAAA,KAAK,EAAE;AACLC,QAAAA,gBAAgB,EAAE,IADb;AAELC,QAAAA,gBAAgB,EAAE;AAFb;AAFY,KAArB;AAOD;;AA6CDC,EAAAA,iBAAiB,GAAE;AACjB,QAAG,KAAKlG,KAAL,CAAW2C,oBAAX,KAAkC,EAArC,EAAwC;AACpC,UAAG,KAAK5B,KAAL,CAAWc,WAAd,EAA0B;AACtBZ,QAAAA,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuC,KAAKC,mBAA5C,EAAiE4D,IAAjE,CAAsE,KAAK/E,gBAA3E,EAA6FkG,KAA7F,CAAmG,KAAK9F,YAAxG;AACH,OAFD,MAGI;AACFY,QAAAA,SAAS,CAACC,YAAV,CAAuBG,YAAvB,CAAoC,KAAKC,eAAzC,EAA0D0D,IAA1D,CAA+D,KAAK/E,gBAApE,EAAsFkG,KAAtF,CAA4F,KAAK9F,YAAjG;AAA+G;AAChH;AACL;AAED;;AAyJD+F,EAAAA,MAAM,GAAE;AACJ,QAAG,KAAKpG,KAAL,CAAW2C,oBAAX,KAAkC,EAArC,EAAwC;AACtC,0BAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAIA;AACI,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEC,oBAAC,OAAD;AACC,QAAA,MAAM,EAAE,KAAKH,MADd;AAEC,QAAA,eAAe,EAAE,KAAKD,eAFvB;AAGC,QAAA,gBAAgB,EAAE,KAAKO,gBAHxB;AAIC,QAAA,YAAY,EAAE,KAAKmC,YAJpB;AAKC,QAAA,UAAU,EAAE,KAAKT,UALlB;AAMC,QAAA,YAAY,EAAE,KAAKM,YANpB;AAOC,QAAA,eAAe,EAAE,KAAKC,eAPvB;AAQC,QAAA,kBAAkB,EAAE,KAAKM,kBAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,EAYGtB,MAAM,CAACsC,IAAP,CAAY,KAAKtF,KAAL,CAAW6C,aAAvB,EAAsC0C,GAAtC,CAA2C/E,GAAD,iBACzC,oBAAC,iBAAD;AACC,QAAA,cAAc,EAAE,KAAKC,eAAL,CAAqBD,GAArB,CADjB;AAEC,QAAA,WAAW,EAAE,KAAKR,KAAL,CAAWX,WAFzB;AAGC,QAAA,YAAY,EAAE,KAAKW,KAAL,CAAW6C,aAAX,CAAyBrC,GAAzB,CAHf;AAIC,QAAA,gBAAgB,EAAE,KAAK+D,gBAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CAZH,eAqBE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACM;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAqC,QAAA,EAAE,EAAC,uBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEG,KAAKvE,KAAL,CAAWgC,OAAX,CAAmBuD,GAAnB,CAAuBnB,GAAG,iBAAG;AAAK,QAAA,EAAE,EAAEA,GAAT;AAAc,QAAA,GAAG,EAAEA,GAAnB;AAA2B,QAAA,SAAS,EAAC,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKpE,KAAL,CAAWsC,WAAX,CAAuB8B,GAAvB,CADH,OACiCA,GADjC,MADJ,CAA7B,CAFH,CADN,eAWM;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEM;AAAI,QAAA,SAAS,EAAC,WAAd;AAA0B,QAAA,EAAE,EAAC,mBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKpE,KAAL,CAAWN,OADd,CAFN,eAKM;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCACgB;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,EAAE,EAAC,aAA1B;AAAwC,QAAA,OAAO,EAAE,KAAKM,KAAL,CAAWc,WAA5D;AACE,QAAA,QAAQ,EAAE,KAAKnB,iBADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADhB,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,eAIE,oBAAC,QAAD;AACC,QAAA,QAAQ,EAAE,IADX;AAEC,QAAA,KAAK,EAAC,OAFP;AAGC,QAAA,WAAW,EAAE,KAAKK,KAAL,CAAWX,WAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAQI2D,MAAM,CAACsC,IAAP,CAAY,KAAKtF,KAAL,CAAW6C,aAAvB,EAAsC0C,GAAtC,CAA0C/E,GAAG,iBAC5C,oBAAC,QAAD;AACA,QAAA,QAAQ,MADR;AAEA,QAAA,WAAW,EAAE,KAAKR,KAAL,CAAW6C,aAAX,CAAyBrC,GAAzB,CAFb;AAGA,QAAA,SAAS,EAAGZ,CAAD,IAAK,KAAK6E,oBAAL,CAA0B7E,CAA1B,EAA6BY,GAA7B,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CARJ,CALN,CAXN,CArBF,CADF;AA2DH;AACJ;;AA5T8C;;AA+TjD,eAAe1B,mBAAf","sourcesContent":["import React from 'react';\nimport {  Redirect } from 'react-router-dom';\nimport socketIOClient from \"socket.io-client\";\nimport data from \"./data\";\nimport '../css/Chat.css';\nimport VideoExt from './chat/VideoExt';\nimport SocketX from './chat/SocketX';\nimport PeerConnectionExt from './chat/PeerConnectionExt';\n\nconst ICE_SERVERS=[\n  {\n    urls: 'turn:numb.viagenie.ca',\n    credential: 'muazkh',\n    username: 'webrtc@live.com'\n  },\n  {\n      url: 'turn:192.158.29.39:3478?transport=tcp',\n      credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n      username: '28224511:1379330808'\n  },\n  {\n      url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n      credential: 'webrtc',\n      username: 'webrtc'\n  },\n  {\n      url: 'turn:13.250.13.83:3478?transport=tcp',\n      credential: 'YzYNCouZM1mhqhmseWk6',\n      username: 'YzYNCouZM1mhqhmseWk6'\n  },\n  { urls: 'stun:stun.l.google.com:19302' },\n  /*{ urls: 'stun:stun1.l.google.com:19302' },\n  { urls: 'stun:stun2.l.google.com:19302' },\n  { urls: 'stun:stun3.l.google.com:19302' },\n  { urls: 'stun:stun4.l.google.com:19302' },*/\n  { urls: 'stun:stun.ekiga.net'}\n];\n\nclass MeetingShowSelected extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      icons: data.icons,\n      userIds:[],\n      userNameMap:{},\n      message: 'Select a user on the left menu to start sharing.',\n      callMadeByNonOrganiser: false,\n      //callRcvd: false,\n      //answerRcvd: false,\n      localStream: null,\n      remoteStreams: {},\n      shareScreen: false\n    }\n    const {params}= this.props.match;\n\n    this.meetingId=params.id;\n    this.organiserId=params.organiserId;\n    this.peerConnections={};\n    this.callAttempts={};\n    this.isRemotePlaying={};\n\n    //this.socket = socketIOClient(ENDPOINT);\n    this.socket = socketIOClient(\"/\"+this.meetingId);\n\n    this.displayMediaOptions = {\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n    this.camMediaOptions={\n      video: true,\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    };\n  }\n\n  dualShareHandler=(mediaStream)=>{\n    this.setState({localStream: mediaStream});\n  };\n\n  errorHandler=error => {\n    console.log(error.message);\n  };\n\n  shareScreenChange=async (e)=>{\n    let isChecked=e.target.checked;\n    let {localStream}=this.state;\n    let dualStream;\n    if(isChecked){\n        dualStream=await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);\n    }\n    else{\n      dualStream=await navigator.mediaDevices.getUserMedia(this.camMediaOptions);\n    }\n    if(localStream===null){\n      for(let key in this.peerConnections)\n          dualStream.getTracks().forEach(track => this.peerConnections[key].addTrack(track));\n\n      this.setState({localStream: dualStream, shareScreen: isChecked})\n    }\n    else{\n      let trackArr=[...localStream.getTracks()];\n      for(let i=0;i<trackArr.length;i++)\n          await localStream.removeTrack(trackArr[i]);\n\n      for(let i=0;i<dualStream.getTracks().length;i++){\n          await localStream.addTrack(dualStream.getTracks()[i]);\n          for(let key in this.peerConnections){\n              const senders = this.peerConnections[key].getSenders();\n              senders.forEach((sender) => {\n                                  if(dualStream.getTracks()[i].kind===sender.track.kind)\n                                      sender.replaceTrack(dualStream.getTracks()[i]);\n                                });\n          }\n      }\n      this.setState({shareScreen: isChecked});\n    }\n  }\n\n  componentDidMount(){\n    if(this.props.loggedInUserFullName!==''){\n        if(this.state.shareScreen){\n            navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);\n        }\n        else{\n          navigator.mediaDevices.getUserMedia(this.camMediaOptions).then(this.dualShareHandler).catch(this.errorHandler);;\n        }\n   }\n\n  }\n\n  onSocketConnect=()=>{\n    if(this.socket){\n      this.socket.emit(\"map\", {\n        userName: this.props.loggedInUserFullName,\n        userId: this.props.loggedInUser\n      });\n      console.log(this.socket);\n      console.log(' mapped to '+this.props.loggedInUser);\n    }\n  }\n\n  onUpdateUserList=(data) => {\n    let userIds=[...this.state.userIds];\n    let newUserIds=data.userIds;\n    newUserIds.forEach(id=>{\n      if(!userIds.includes(id))\n        userIds.push(id);\n    });\n\n    console.log('In update user list');\n    console.log(userIds);\n    console.log(data.nameMap);\n    this.setState({userIds, userNameMap: data.nameMap}, ()=>{\n      if(userIds.includes(this.organiserId) && !this.state.callMadeByNonOrganiser){\n          this.callUser(this.organiserId);\n          this.setState({callMadeByNonOrganiser: true});\n      }\n    });\n  };\n\n  callUser=async (userId)=>{\n    console.log('Call User '+userId+' '+this.state.userNameMap[userId]);\n\n    if(this.isRemotePlaying[userId]===undefined)\n      this.isRemotePlaying[userId]=false;\n\n    if(this.callAttempts[userId]===undefined)\n      this.callAttempts[userId]=0;\n    else\n      this.callAttempts[userId]++;\n\n    if(this.state.remoteStreams[userId]===undefined||this.peerConnections[userId]===undefined){\n      this.peerConnections[userId] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n      if(this.state.localStream)\n        this.state.localStream.getTracks().forEach(track => this.peerConnections[userId].addTrack(track));\n      let remoteStreams=Object.assign({}, this.state.remoteStreams);\n      remoteStreams[userId]= new MediaStream();\n      this.setState({remoteStreams});\n    }\n\n    //console.log(this.peerConnection);\n    if(!this.isRemotePlaying[userId] && this.callAttempts[userId]<3){\n        console.log('Call Attempts '+this.callAttempts[userId]);\n        const offer = await this.peerConnections[userId].createOffer();\n        await this.peerConnections[userId].setLocalDescription(new RTCSessionDescription(offer));\n\n        this.socket.emit(\"call-user\", {\n          offer,\n          to: userId,\n          from: this.props.loggedInUser\n        });\n        this.setState({message: `Talking with: user: ${this.state.userNameMap[userId]} (${userId})`});\n    }\n\n  }\n\n  onCallRcvd=async (data) => {\n    //console.log('callRcvd '+this.state.callRcvd);\n    if(this.state.remoteStreams[data.from]===undefined||this.peerConnections[data.from]===undefined){\n      this.peerConnections[data.from] = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n      if(this.state.localStream)\n        this.state.localStream.getTracks().forEach(track => this.peerConnections[data.from].addTrack(track));\n\n      let remoteStreams=Object.assign({}, this.state.remoteStreams);\n      remoteStreams[data.from]= new MediaStream();\n      this.setState({remoteStreams});\n    }\n\n    await this.peerConnections[data.from].setRemoteDescription(\n      new RTCSessionDescription(data.offer)\n    );\n    const answer = await this.peerConnections[data.from].createAnswer();\n    console.log('answer \\n'+JSON.stringify(answer));\n    await this.peerConnections[data.from].setLocalDescription(new RTCSessionDescription(answer));\n    //console.log(this.peerConnections[data.from]);\n    this.socket.emit(\"make-answer\", {\n      answer,\n      to: data.from,\n      from: this.props.loggedInUser\n    });\n    //this.setState({callRcvd: true});\n  }\n\n  onAnswerRcvd=async (data) => {\n     console.log('on Answer Rcvd'+JSON.stringify(data.answer));\n\n      await this.peerConnections[data.from].setRemoteDescription(\n        new RTCSessionDescription(data.answer)\n      );\n      /*if (!this.state.answerRcvd && !this.state.callRcvd)\n      {\n        this.setState({answerRcvd: true});\n      }*/\n      this.socket.emit(\"ack-callee\", {\n        to: data.from,\n        from: this.props.loggedInUser\n      });\n  }\n\n  onAckCalleeRcvd=(data)=>{\n      console.log('on ack callee received, callAttempts '+this.callAttempts[data.from]+' remotePlaying'+this.isRemotePlaying[data.from]);\n      if(this.state.remoteStreams[data.from].getTracks().length<=0 && this.callAttempts[data.from]<3)\n        this.callUser(data.from, null).then();\n  }\n\n\n  onRemoveUser=({ userId }) => {\n    console.log('removing user '+userId);\n    let userIds=this.state.userIds.filter((val)=>val!==userId);\n    let userNameMap={};\n    for(let attr in this.state.userNameMap){\n      if(userIds.includes(attr))\n        userNameMap[attr]=this.state.userNameMap[attr];\n    }\n    if(this.props.loggedInUser===this.organiserId){\n      delete this.peerConnections[userId];\n    }\n    if(userId===this.organiserId)\n      this.setState({userNameMap, userIds, callMadeByNonOrganiser: false});\n    else\n     this.setState({userNameMap, userIds});\n  }\n\n  handleIceCandidate = async (data) => {\n  }\n\n  handleOnIceEvent = (rtcPeerConnectionIceEvent) => {\n    console.log('ICE event handle')\n    /*if (rtcPeerConnectionIceEvent.candidate && this.peerConnection) {\n      const { candidate } = rtcPeerConnectionIceEvent;\n      this.socket.emit(\"ice-candidate\", JSON.stringify(candidate));\n    }*/\n  }\n\n  onRemoteVideoPlaying=(e, key)=>{\n    this.isRemotePlaying[key]=true;\n    console.log('remote video playing event for remote user '+key);\n    console.log(e);\n  }\n\n\n  render(){\n      if(this.props.loggedInUserFullName===''){\n        return <Redirect to=\"/errorLogin\"/>\n      }\n      else\n      {\n          return (\n            <div>\n            Meeting Show Selected\n             <SocketX\n              socket={this.socket}\n              onSocketConnect={this.onSocketConnect}\n              onUpdateUserList={this.onUpdateUserList}\n              onRemoveUser={this.onRemoveUser}\n              onCallRcvd={this.onCallRcvd}\n              onAnswerRcvd={this.onAnswerRcvd}\n              onAckCalleeRcvd={this.onAckCalleeRcvd}\n              handleIceCandidate={this.handleIceCandidate}\n              />\n              {Object.keys(this.state.remoteStreams).map((key)=>(\n                <PeerConnectionExt\n                 peerConnection={this.peerConnections[key]}\n                 localStream={this.state.localStream}\n                 remoteStream={this.state.remoteStreams[key]}\n                 handleOnIceEvent={this.handleOnIceEvent}\n                />\n              ))\n              }\n              <div className=\"content-container\">\n                    <div className=\"active-users-panel\"  id=\"active-user-container\">\n                      <h3 className=\"panel-title\">Callable Users:</h3>\n                      {this.state.userIds.map(val=>(<div id={val} key={val}    className=\"active-user\">\n                                                        <p className=\"username\">\n                                                          {this.state.userNameMap[val]}({val})\n                                                        </p>\n                                                       </div>\n                                                       )\n                                            )}\n                    </div>\n                    <div className=\"video-chat-container\">\n                          {/*<h2>Logged In User: {this.props.loggedInUserFullName}</h2>*/}\n                          <h2 className=\"talk-info\" id=\"talking-with-info\">\n                            {this.state.message}\n                          </h2>\n                          <div className=\"video-container\">\n                            Share Screen: <input type=\"checkbox\" id=\"shareScreen\" checked={this.state.shareScreen}\n                                            onChange={this.shareScreenChange}/>\n                            <br/>\n                            <VideoExt\n                             controls={true}\n                             muted=\"muted\"\n                             mediaStream={this.state.localStream} />\n                             {Object.keys(this.state.remoteStreams).map(key=>(\n                               <VideoExt\n                               controls\n                               mediaStream={this.state.remoteStreams[key]}\n                               onPlaying={(e)=>this.onRemoteVideoPlaying(e, key)}\n                               />\n                             ))}\n\n                          </div>\n                    </div>\n              </div>\n            </div>\n          )\n      }\n  }\n}\n\nexport default MeetingShowSelected;\n"]},"metadata":{},"sourceType":"module"}